{"componentChunkName":"component---src-components-details-template-js","path":"/components/CModal/","result":{"data":{"site":{"siteMetadata":{"ver":"3.0"}},"allFile":{"nodes":[{"id":"21d4ccb8-23e7-551c-9dde-7f9c6fcf7ee5","name":"CAlert","fields":{"code":"import React, { useState, useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CFade from '../fade/CFade'\r\nimport { omitByKeys } from '@coreui/utils/src'\r\nimport { CFadeProps } from '../utils/helper.js'\r\nimport CButtonClose from '../button/CButtonClose'\r\n\r\n//component - CoreUI / CAlert\r\nconst CAlert = props => {\r\n  let {\r\n    children,\r\n    className,\r\n    //\r\n    onShowChange,\r\n    closeButton,\r\n    color,\r\n    fade,\r\n    show,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    className,\r\n    'alert',\r\n    {\r\n      [`alert-${color}`]: color,\r\n      'alert-dismissible': closeButton\r\n    }\r\n  )\r\n\r\n  const alertTransition = {\r\n    baseClass: fade ? CFade.baseClass : '',\r\n    timeout: fade ? CFade.timeout : 0,\r\n    unmountOnExit: true\r\n  }\r\n  \r\n  const [isOpen, setIsOpen] = useState(show)\r\n\r\n  useEffect(() => {\r\n    setIsOpen(show)\r\n  }, [show])\r\n\r\n  let timeout = useRef()\r\n\r\n  useEffect(() => {\r\n    onShowChange && onShowChange(isOpen)\r\n    clearTimeout(timeout.current)\r\n    if (typeof isOpen === 'number' && isOpen > 0) {\r\n      timeout.current = setTimeout(() => {\r\n        setIsOpen(isOpen - 1)\r\n      }, 1000)\r\n    }\r\n    return () => clearTimeout(timeout.current)\r\n  }, [isOpen])\r\n\r\n  const attrs = omitByKeys(attributes, CFadeProps)\r\n\r\n  return (\r\n    <CFade\r\n      {...alertTransition}\r\n      className={classes}\r\n      in={Boolean(isOpen)}\r\n      role=\"alert\"\r\n      {...attrs}\r\n    >\r\n      { children }\r\n      { closeButton && <CButtonClose onClick={() => setIsOpen(false)} />}\r\n    </CFade>\r\n  )\r\n}\r\n\r\nCAlert.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  onShowChange: PropTypes.func,\r\n  closeButton: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  fade: PropTypes.bool,\r\n  show: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\r\n};\r\n\r\nCAlert.defaultProps = {\r\n  show: true,\r\n  fade: true\r\n};\r\n\r\nexport default CAlert\r\n"}},{"id":"5fd2c6ef-f2d8-5dff-9ae5-d2f3b027d704","name":"CBadge","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport CLink from '../link/CLink'\r\n\r\n//component - CoreUI / CBadge\r\n\r\nconst CBadge = props => {\r\n\r\n  let {\r\n    tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    color,\r\n    shape,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'badge',\r\n    {\r\n      [`badge-${color}`]: color,\r\n      [`badge-${shape}`]: shape\r\n    }\r\n  )\r\n\r\n  const Tag = attributes.to || attributes.href ? CLink : tag\r\n  const ref = { [`${typeof Tag === 'string' ? 'ref': 'innerRef'}`]: innerRef }\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} {...ref} />\r\n  )\r\n\r\n}\r\n\r\nCBadge.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string,\r\n  shape: PropTypes.oneOf(['', 'pill'])\r\n};\r\n\r\nCBadge.defaultProps = {\r\n  tag: 'span'\r\n}\r\n\r\nexport default CBadge\r\n"}},{"id":"776a09b8-6e1d-593d-8267-deb99c7cb6f9","name":"CBrand","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from './helper.js'\r\nimport CLink from '../link/CLink'\r\n\r\n//component - CoreUI / CBrand\r\nconst CBrand = props => {\r\n\r\n  const {\r\n    tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(className)\r\n\r\n  const Tag = attributes.to || attributes.href ? CLink : tag\r\n  const ref = { [`${typeof Tag === 'string' ? 'ref': 'innerRef'}`]: innerRef}\r\n  return (\r\n    <Tag className={classes} {...attributes} {...ref} />\r\n  )\r\n}\r\n\r\nCBrand.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCBrand.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CBrand\r\n"}},{"id":"cf0244ae-1fb3-5d34-bad4-f26c4981b1cb","name":"CBreadcrumb","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CBreadcrumb\r\n\r\nconst CBreadcrumb = props => {\r\n\r\n  const {\r\n    className,\r\n    innerRef,\r\n    //\r\n    ...attributes\r\n  } = props\r\n\r\n  const classes = classNames(className, 'breadcrumb')\r\n\r\n  //render\r\n  return (\r\n    <ol className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCBreadcrumb.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n}\r\n\r\nexport default CBreadcrumb"}},{"id":"d634ef42-7d56-50d0-a08d-8bece04c72f3","name":"CBreadcrumbItem","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CBreadcrumbItem\r\n\r\nconst CBreadcrumbItem = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    active,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    active ? 'active' : false,\r\n    'breadcrumb-item'\r\n  )\r\n\r\n  return (\r\n    <li \r\n      className={classes}\r\n      role=\"presentation\"\r\n      aria-current={active ? 'page' : undefined}\r\n      {...attributes}\r\n      ref={innerRef} \r\n    />\r\n  )\r\n\r\n}\r\n\r\nCBreadcrumbItem.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool\r\n}\r\n\r\nexport default CBreadcrumbItem"}},{"id":"0d0c115d-c293-5bac-b4ca-e3d092bb22f6","name":"CBreadcrumbRouter","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { CBreadcrumb, CBreadcrumbItem } from '../index'\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\n//component - CoreUI / CBreadcrumbRouter\r\n\r\nconst getPaths = pathname => {\r\n  const paths = ['/']\r\n  if (pathname === '/') return paths;\r\n  pathname.split('/').reduce((prev, curr) => {\r\n    const currPath = `${prev}/${curr}`\r\n    paths.push(currPath)\r\n    return currPath\r\n  })\r\n  return paths\r\n}\r\n\r\nconst CBreadcrumbRouteItem = ({name, path}, currPath) => {\r\n  if (path === currPath) {\r\n    return <CBreadcrumbItem key={path} active>{name}</CBreadcrumbItem>\r\n  } else {\r\n    return <CBreadcrumbItem key={path}>\r\n      <Link to={path}>\r\n        {name}\r\n      </Link>\r\n    </CBreadcrumbItem>\r\n  }\r\n}\r\n\r\nconst CBreadcrumbRouter = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    routes,\r\n    ...attributes\r\n  } = props;\r\n\r\n  let items = null\r\n  if (routes) {\r\n    const currPath = useLocation().pathname\r\n    const paths = getPaths(currPath)\r\n    const currRoutes = routes.filter(route => paths.includes(route.path))\r\n    items = currRoutes.map(route => {\r\n      return CBreadcrumbRouteItem(route, currPath)\r\n    })\r\n  }\r\n\r\n\r\n  //render\r\n\r\n  const classes = classNames(className)\r\n\r\n  return (\r\n    <CBreadcrumb \r\n      className={classes} \r\n      {...attributes}\r\n      ref={innerRef}\r\n    >\r\n      {items}\r\n    </CBreadcrumb>\r\n  )\r\n}\r\n\r\nCBreadcrumbRouter.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  routes: PropTypes.array\r\n}\r\n\r\nexport default CBreadcrumbRouter"}},{"id":"cf52d5cb-4ed4-5ab4-9831-9d410c381208","name":"CButton","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport CLink from '../link/CLink'\r\n//component - CoreUI / CButton\r\n\r\nconst CButton = props => {\r\n\r\n  let {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    onClick,\r\n    disabled,\r\n    active,\r\n    block,\r\n    color,\r\n    size,\r\n    pressed,\r\n    shape,\r\n    variant,\r\n    ...attributes\r\n  } = props\r\n\r\n  const click = e => !disabled && onClick && onClick(e)\r\n\r\n  const isLink = attributes.to || attributes.href\r\n\r\n  //render\r\n  const classes = classNames(\r\n    className,\r\n    'btn',\r\n    variant || color ? `btn${variant ? '-' + variant : ''}-${color}` : false,\r\n    size ? `btn-${size}` : false,\r\n    block ? 'btn-block' : false,\r\n    shape ? `btn-${shape}` : false,\r\n    pressed ? 'btn-pressed' : false,\r\n    { 'active': active && !isLink,\r\n    'disabled': disabled && !isLink }\r\n  )\r\n\r\n\r\n  if (isLink) {\r\n    return <CLink\r\n      {...attributes}\r\n      active={active}\r\n      disabled={disabled}\r\n      className={classes}\r\n      onClick={click}\r\n      innerRef={innerRef}\r\n    />\r\n  } else {\r\n    return <Tag\r\n      className={classes}\r\n      type=\"button\"\r\n      disabled={disabled}\r\n      {...attributes}\r\n      onClick={click}\r\n      ref={innerRef}\r\n    />\r\n  }\r\n}\r\n\r\nCButton.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  block: PropTypes.bool,\r\n  shape: PropTypes.string,\r\n  variant: PropTypes.oneOf(['', 'ghost', 'outline']),\r\n  color: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  size: PropTypes.string,\r\n  pressed: PropTypes.bool,\r\n}\r\n\r\nCButton.defaultProps = {\r\n  tag: 'button'\r\n}\r\n\r\n//export\r\nexport default CButton\r\n"}},{"id":"3165e993-3595-525a-adfb-260ef72eb4d1","name":"CButtonClose","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CButtonClose\r\n\r\nconst CButtonClose = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    buttonClass,\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    buttonClass,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <button\r\n      className={classes}\r\n      aria-label=\"Close\"\r\n      {...attributes} \r\n      ref={innerRef}\r\n    >\r\n      { children || String.fromCharCode(215) }\r\n    </button>\r\n  )\r\n\r\n}\r\n\r\nCButtonClose.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  buttonClass: PropTypes.string,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n}\r\n\r\nCButtonClose.defaultProps = {\r\n  buttonClass: 'close'\r\n}\r\n\r\nexport default CButtonClose\r\n"}},{"id":"19ef5f16-4fd9-5c51-ae10-848297379bae","name":"CButtonGroup","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CButtonGroup\r\n\r\nconst CButtonGroup = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    size,\r\n    vertical,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    size ? 'btn-group-' + size : false,\r\n    vertical ? 'btn-group-vertical' : 'btn-group'\r\n  )\r\n\r\n  return (\r\n    <div \r\n      className={classes} \r\n      role=\"group\"\r\n      {...attributes} \r\n      ref={innerRef} \r\n    />\r\n  )\r\n}\r\n\r\nCButtonGroup.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  size: PropTypes.oneOf(['', 'sm', 'lg']),\r\n  vertical: PropTypes.bool\r\n}\r\n\r\n\r\nexport default CButtonGroup\r\n"}},{"id":"50cdcf0b-70ba-577b-8c56-7e1eff40c910","name":"CButtonToolbar","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CButtonToolbar\r\n\r\nconst CButtonToolbar = props=>{\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    justify,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'btn-toolbar',\r\n    { [`justify-content-${justify}`]: justify }\r\n  )\r\n\r\n  return (\r\n    <div \r\n      className={classes}\r\n      role=\"toolbar\"\r\n      aria-label=\"toolbar\"\r\n      {...attributes} \r\n      ref={innerRef} \r\n    />\r\n  )\r\n\r\n}\r\n\r\nCButtonToolbar.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  role: PropTypes.string,\r\n  justify: PropTypes.oneOf(['', 'start', 'end', 'between', 'center'])\r\n}\r\n\r\nexport default CButtonToolbar\r\n"}},{"id":"785dfb35-7c63-5378-9bc6-41cfcf9d3eef","name":"CCallout","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CCallout\r\n\r\nconst CCallout = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    color,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'c-callout',\r\n    color ? 'c-callout-' + color : null,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n\r\n}\r\n\r\nCCallout.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string\r\n}\r\n\r\nexport default CCallout\r\n"}},{"id":"6fde2579-3d90-539e-bebe-1793e06f8311","name":"CCard","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CCard\r\n\r\nconst CCard = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    color,\r\n    textColor,\r\n    borderColor,\r\n    align,\r\n    accentColor,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card',\r\n    align ? `text-${align}` : false,\r\n    textColor ? `text-${textColor}` : false,\r\n    color ? `bg-${color}` : false,\r\n    borderColor ? `border-${borderColor}` : false,\r\n    accentColor ? `card-accent-${accentColor}` : false,\r\n  )\r\n\r\n\r\n  return (\r\n    <Tag \r\n      className={classes} \r\n      {...attributes} \r\n      ref={innerRef}\r\n    />\r\n  )\r\n}\r\n\r\nexport const sharedPropTypes = {\r\n  align: PropTypes.oneOf(['', 'left', 'center', 'right']),\r\n  color: PropTypes.string,\r\n  borderColor: PropTypes.string,\r\n  textColor: PropTypes.string\r\n}\r\n\r\nCCard.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  accentColor: PropTypes.string,\r\n  ...sharedPropTypes\r\n}\r\n\r\nCCard.defaultProps = {\r\n  tag: 'div'\r\n}\r\n\r\nexport default CCard\r\n"}},{"id":"a84c4cfd-dabb-5c0f-9927-2576e4720f1f","name":"CCardBody","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport { sharedPropTypes } from './CCard'\r\n//component - CoreUI / CCardBody\r\n\r\nconst CCardBody = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    color,\r\n    textColor,\r\n    borderColor,\r\n    align,\r\n    ...attributes\r\n  } = props\r\n\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card-body',\r\n    align ? `text-${align}` : false,\r\n    textColor ? `text-${textColor}` : false,\r\n    color ? `bg-${color}` : false,\r\n    borderColor ? `border-${borderColor}` : false\r\n  )\r\n\r\n  return (\r\n    <Tag \r\n      className={classes} \r\n      {...attributes}\r\n      ref={innerRef}\r\n    />\r\n  )\r\n\r\n}\r\n\r\nCCardBody.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  ...sharedPropTypes\r\n}\r\n\r\nCCardBody.defaultProps = {\r\n  tag: 'div'\r\n}\r\n\r\nexport default CCardBody\r\n"}},{"id":"6ba23322-3114-5bcc-badb-fa5cd6eb88c0","name":"CCardFooter","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport { sharedPropTypes } from './CCard.js'\r\n\r\n//component - CoreUI / CCardFooter\r\n\r\nconst CCardFooter = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    color,\r\n    textColor,\r\n    borderColor,\r\n    align,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card-footer',\r\n    align ? `text-${align}` : false,\r\n    textColor ? `text-${textColor}` : false,\r\n    color ? `bg-${color}` : false,\r\n    borderColor ? `border-${borderColor}` : false\r\n  )\r\n\r\n  return (\r\n    <Tag \r\n      className={classes} \r\n       {...attributes}\r\n      ref={innerRef} \r\n    />\r\n  )\r\n\r\n}\r\n\r\nCCardFooter.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  ...sharedPropTypes\r\n}\r\n\r\nCCardFooter.defaultProps = {\r\n  tag: 'footer'\r\n}\r\n\r\nexport default CCardFooter\r\n"}},{"id":"bb27d026-c34f-5aec-96dd-b1b611d451e7","name":"CCardGroup","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport {tagPropType} from '../utils/helper.js'\r\n\r\n//component - CoreUI / CCardGroup\r\n\r\nconst CCardGroup = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    deck,\r\n    columns,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    `card-${columns ? 'columns' : deck ? 'deck' : 'group' }`,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n\r\n}\r\n\r\nCCardGroup.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  deck: PropTypes.bool,\r\n  columns: PropTypes.bool,\r\n}\r\n\r\nCCardGroup.defaultProps = {\r\n  tag: 'div'\r\n}\r\n\r\nexport default CCardGroup\r\n"}},{"id":"7b2c4dc0-1b9e-5c4c-87c6-4545b666660d","name":"CCardHeader","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport { sharedPropTypes } from './CCard'\r\n\r\n//component - CoreUI / CCardHeader\r\n\r\nconst CCardHeader = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    innerRef,\r\n    color,\r\n    textColor,\r\n    borderColor,\r\n    align,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card-header',\r\n    align ? `text-${align}` : false,\r\n    textColor ? `text-${textColor}` : false,\r\n    color ? `bg-${color}` : false,\r\n    borderColor ? `border-${borderColor}` : false\r\n  )\r\n\r\n  return (\r\n    <Tag \r\n      className={classes}\r\n       {...attributes} \r\n      ref={innerRef} \r\n    />\r\n  )\r\n\r\n}\r\n\r\nCCardHeader.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  ...sharedPropTypes\r\n}\r\n\r\nCCardHeader.defaultProps = {\r\n  tag: 'header'\r\n}\r\n\r\nexport default CCardHeader\r\n"}},{"id":"9f39da64-ec26-5ce4-835f-56a8be7b7b3b","name":"CCardImg","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport CImg from '../image/CImg'\r\n\r\n//component - CoreUI / CCardImg\r\nconst CCardImg = props => {\r\n  const { variant, ...rest } = props\r\n  const classSuffix = variant !== 'full' ? `-${variant}` : ''\r\n  return (\r\n    <CImg {...rest} className={[`card-img${classSuffix}`, rest.className]}/>\r\n  )\r\n}\r\n\r\nCCardImg.propTypes = {\r\n  variant: PropTypes.oneOf(['', 'top', 'bottom', 'full'])\r\n}\r\n\r\nCCardImg.defaultProps = {\r\n  variant: 'full'\r\n}\r\n\r\nexport default CCardImg\r\n"}},{"id":"b703760b-4fbc-50c6-ab2b-e8df659e08bb","name":"CCardImgOverlay","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CCardImgOverlay\r\n\r\nconst CCardImgOverlay = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card-img-overlay'\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardImgOverlay.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardImgOverlay.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CCardImgOverlay;\r\n"}},{"id":"10285697-3326-5e29-9a79-f4e3d9592638","name":"CCardLink","fields":{"code":"/* eslint react/prop-types: 0 */\r\nimport React from 'react'\r\nimport CLink from '../link/CLink'\r\n\r\nconst CCardLink = props => {\r\n  return (\r\n    <CLink {...props} className={['card-link', props.className]}/>\r\n  )\r\n}\r\n\r\nexport default CCardLink\r\n"}},{"id":"716f0d10-c1f0-5518-aba2-6cd323945546","name":"CCardSubtitle","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CCardSubtitle\r\n\r\nconst CCardSubtitle = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card-subtitle'\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardSubtitle.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardSubtitle.defaultProps = {\r\n  tag: 'h6'\r\n};\r\n\r\nexport default CCardSubtitle;\r\n"}},{"id":"3a42900d-f436-5dbc-8705-944d97465f90","name":"CCardText","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CCardText\r\n\r\nconst CCardText = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card-text'\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardText.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardText.defaultProps = {\r\n  tag: 'p'\r\n};\r\n\r\nexport default CCardText;\r\n"}},{"id":"74b8aa9c-3e9f-5933-9f9b-11fe79309c8b","name":"CCardTitle","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CCardTitle\r\n\r\nconst CCardTitle = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'card-title'\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardTitle.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardTitle.defaultProps = {\r\n  tag: 'h4'\r\n};\r\n\r\nexport default CCardTitle;\r\n"}},{"id":"daab77a8-3460-53ae-89b1-208e419f984f","name":"CCarousel","fields":{"code":"import React, { useState, useRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CCarousel\r\n\r\nconst CCarousel = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    autoSlide,\r\n    activeIndex,\r\n    animate,\r\n    onSlideChange,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [state, setState] = useState([null, activeIndex])\r\n  const [itemNumber, setItemNumber] = useState(null)\r\n  const [animating, setAnimating] = useState()\r\n\r\n  useEffect(() => {\r\n    setState([state[1], activeIndex])\r\n  }, [activeIndex])\r\n\r\n  const timeout = useRef()\r\n\r\n  const setNext = () => {\r\n    reset()\r\n    if (autoSlide) {\r\n      timeout.current = setTimeout(() => nextItem(), autoSlide)\r\n    } \r\n  }\r\n  const reset = () => clearTimeout(timeout.current)\r\n  const nextItem = () => {\r\n    setState([state[1], itemNumber === state[1] + 1 ? 0 : state[1] + 1, 'next'])\r\n  }\r\n\r\n  useEffect(() => {\r\n    onSlideChange && onSlideChange(state[1])\r\n    setNext()\r\n    return () => reset()\r\n  }, [state])\r\n\r\n\r\n  const classes = classNames('carousel', className)\r\n  return (\r\n    <div\r\n      className={classes}\r\n      onMouseEnter={reset}\r\n      onMouseLeave={setNext}\r\n      {...attributes}\r\n      ref={innerRef}\r\n    >\r\n      <Context.Provider value={{\r\n        state,\r\n        setState,\r\n        animate,\r\n        itemNumber,\r\n        setItemNumber,\r\n        animating,\r\n        setAnimating\r\n      }}>\r\n        {props.children}\r\n      </Context.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nCCarousel.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.array,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  activeIndex: PropTypes.number,\r\n  autoSlide: PropTypes.number,\r\n  animate: PropTypes.bool,\r\n  onSlideChange: PropTypes.func\r\n};\r\n\r\nCCarousel.defaultProps = {\r\n  activeIndex: 0\r\n};\r\n\r\nexport default CCarousel\r\n"}},{"id":"604f0015-e18c-5fa4-90bf-335edb377cca","name":"CCarouselCaption","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CCarouselCaption\r\n\r\nconst CCarouselCaption = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'carousel-caption',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div \r\n      className={classes} \r\n      {...attributes} \r\n      ref={innerRef}\r\n    />\r\n  )\r\n}\r\n\r\nCCarouselCaption.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nexport default CCarouselCaption\r\n"}},{"id":"bfaaae45-9328-5efc-8d30-01b02ee02cae","name":"CCarouselControl","fields":{"code":"import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { Context } from './CCarousel'\r\n\r\n//component - CoreUI / CCarouselControl\r\n\r\nconst CCarouselControl = props => {\r\n\r\n  const {\r\n    className,\r\n    children,\r\n    //\r\n    innerRef,\r\n    direction,\r\n    ...attributes\r\n  } = props\r\n\r\n  const { state, setState, itemNumber, animating } = useContext(Context)\r\n\r\n  const onClick = () => {\r\n    if (animating) {\r\n      return\r\n    }\r\n    let newIdx\r\n    if (direction === 'next') {\r\n      newIdx = itemNumber === state[1] + 1 ? 0 : state[1] + 1\r\n    } else {\r\n      newIdx = state[1] === 0 ? itemNumber - 1 : state[1] - 1\r\n    }\r\n    setState([state[1], newIdx, direction])\r\n  }\r\n\r\n  //render\r\n\r\n  const anchorClasses = classNames(\r\n    `carousel-control-${direction}`, className,\r\n  )\r\n\r\n  return (\r\n    <a\r\n      className={anchorClasses}\r\n      {...attributes}\r\n      onClick={onClick}\r\n      ref={innerRef}\r\n    >\r\n      { children || <span \r\n        className={`carousel-control-${direction}-icon`} \r\n        aria-label={direction} \r\n      />}\r\n    </a>\r\n  )\r\n}\r\n\r\nCCarouselControl.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  direction: PropTypes.oneOf(['prev', 'next']).isRequired,\r\n};\r\n\r\nexport default CCarouselControl\r\n"}},{"id":"0501ec36-06a9-5e70-bb34-8e2971979c7f","name":"CCarouselIndicators","fields":{"code":"import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport { Context } from './CCarousel'\r\n//component - CoreUI / CCarouselIndicators\r\n\r\nconst CCarouselIndicators = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    indicatorsClass,\r\n    ...attributes\r\n  } = props\r\n\r\n  const { itemNumber, state, setState, animating } = useContext(Context)\r\n\r\n  //render\r\n  const listClasses = classNames(\r\n    indicatorsClass, className\r\n  )\r\n\r\n  const indicators = Array.from({length: itemNumber}, (_, i) => i).map(key => {\r\n    return (\r\n      <li\r\n        key={`indicator${key}`}\r\n        onClick={() => {\r\n          !animating && key !== state[1] && setState([state[1], key])\r\n        }}\r\n        className={state[1] === key ? 'active' : ''}\r\n      />)\r\n  })\r\n\r\n  return (\r\n    <ol \r\n      className={listClasses}\r\n      {...attributes}\r\n      ref={innerRef}\r\n    >\r\n      {indicators}\r\n    </ol>\r\n  )\r\n}\r\n\r\nCCarouselIndicators.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  indicatorsClass: PropTypes.string\r\n};\r\n\r\nCCarouselIndicators.defaultProps = {\r\n  indicatorsClass: 'carousel-indicators'\r\n};\r\n\r\nexport default CCarouselIndicators\r\n"}},{"id":"29f7e94f-545a-5a1a-862e-95fbe868860f","name":"CCarouselInner","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CCarouselInner\r\n\r\nconst CCarouselInner = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'carousel-inner',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div \r\n      className={classes} \r\n      {...attributes} \r\n      ref={innerRef}\r\n    />\r\n  )\r\n}\r\n\r\nCCarouselInner.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nexport default CCarouselInner\r\n"}},{"id":"c05d0ae6-7725-5330-811e-8723908a773a","name":"CCarouselItem","fields":{"code":"import React, { useState, useContext, createRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { Transition } from 'react-transition-group'\r\nimport { Context } from './CCarousel'\r\n\r\n//component - CoreUI / CCarouselItem\r\nconst getIndex = (el) => Array.from(el.parentNode.children).indexOf(el)\r\n\r\nconst getDirection = (state) => {\r\n  if (state[2]) {\r\n    return state[2] === 'next' ? 'right' : 'left'\r\n  } else {\r\n    return state[1] > state[0] ? 'right' : 'left'\r\n  }\r\n}\r\n\r\nconst CCarouselItem = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const {\r\n    animate,\r\n    state,\r\n    itemNumber,\r\n    setItemNumber,\r\n    animating,\r\n    setAnimating\r\n  } = useContext(Context)\r\n\r\n  const ref = createRef()\r\n  innerRef && innerRef(ref)\r\n  const [isIn, setIsIn] = useState()\r\n\r\n  useEffect(() => {\r\n    if (!itemNumber) {\r\n      setItemNumber(ref.current.parentNode.children.length)\r\n    }\r\n    setIsIn(state[1] === getIndex(ref.current))\r\n  }, [state])\r\n\r\n  const onEnter = () => {\r\n    setAnimating(false)\r\n  }\r\n\r\n  const onEntering = (node) => {\r\n    /* eslint-disable no-unused-vars */\r\n    const offsetHeight = node.offsetHeight\r\n    setAnimating(true)\r\n    /* eslint-enable no-unused-vars */\r\n  }\r\n\r\n  const onExit = () => {\r\n    setAnimating(false)\r\n  }\r\n\r\n  const onExiting = () => {\r\n    setAnimating(true)\r\n  }\r\n\r\n  const onExited = () => {\r\n    setAnimating(false)\r\n  }\r\n\r\n\r\n  //render\r\n  if (!animate || state[0] === null) {\r\n    const itemClasses = classNames(\r\n      'carousel-item',\r\n      isIn && 'active',\r\n      className,\r\n    )\r\n    return (\r\n      <div \r\n        className={itemClasses} \r\n        ref={ref}\r\n        {...attributes}\r\n      >\r\n        {children}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Transition\r\n      timeout={600}\r\n      in={isIn}\r\n      onEnter={onEnter}\r\n      onEntering={onEntering}\r\n      onExit={onExit}\r\n      onExiting={onExiting}\r\n      onExited={onExited}\r\n    >\r\n      {(status) => {\r\n        const direction = getDirection(state)\r\n        const isActive = (status === 'entered') || (status === 'exiting')\r\n        const directionClassName = (status === 'entering' || status === 'exiting') &&\r\n          animating &&\r\n          (direction === 'right' ? 'carousel-item-left' : 'carousel-item-right')\r\n\r\n        const orderClassName = (status === 'entering') &&\r\n          (direction === 'right' ? 'carousel-item-next' : 'carousel-item-prev')\r\n\r\n        const itemClasses = classNames(\r\n          'carousel-item',\r\n          isActive && 'active',\r\n          directionClassName,\r\n          orderClassName,\r\n          className,\r\n        )\r\n\r\n        return (\r\n          <div \r\n            className={itemClasses} \r\n            ref={ref}\r\n            {...attributes}\r\n          >\r\n            {children}\r\n          </div>\r\n        )\r\n      }}\r\n    </Transition>\r\n  )\r\n\r\n}\r\n\r\nCCarouselItem.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nexport default CCarouselItem\r\n"}},{"id":"5415ed19-5ab2-55b2-9c26-ab3e23924f6a","name":"CChart","fields":{"code":"import React, { useState, useEffect, useRef, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Chart from 'chart.js'\r\nimport { customTooltips as cuiCustomTooltips } from '@coreui/chartjs'\r\nimport '@coreui/chartjs/dist/css/coreui-chartjs.css'\r\n\r\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\nconst key = () => Math.random().toString(36).replace('0.', '')\r\n\r\n//component - CoreUI / CChart\r\nconst CChart = props => {\r\n  const {\r\n    innerRef,\r\n    datasets,\r\n    labels,\r\n    options,\r\n    plugins,\r\n    type,\r\n    ...attributes\r\n  } = props\r\n\r\n  const compData = useRef({ firstRun: true }).current\r\n  const [chart, setChart] = useState()\r\n  const ref = useRef()\r\n  const safeId = useState('safe_id_' + key())[0]\r\n\r\n  // methods\r\n  const renderChart = () => {\r\n    destroyChart()\r\n    setChart(new Chart(\r\n      ref.current.getContext('2d'),\r\n      chartConfig\r\n    ))\r\n  }\r\n\r\n  const updateChart = () => {\r\n    Object.assign(chart, chartConfig)\r\n    chart.update()\r\n  }\r\n\r\n  const destroyChart = () => chart && chart.destroy()\r\n\r\n  const dataset = (datasets && datasets[0] && datasets[0].data) || []\r\n\r\n  const computedLabels = useMemo(() => {\r\n    if (labels && typeof labels !== 'string') {\r\n      return labels\r\n    }\r\n    const emptyLabels = Array(dataset.length).fill('')\r\n    if (labels === 'indexes') {\r\n      return emptyLabels.map((u, i) => i + 1)\r\n    } else if (labels === 'months') {\r\n      return emptyLabels.map((u, i) => months[i % 12])\r\n    }\r\n    return emptyLabels\r\n  }, [JSON.stringify(labels), dataset.length])\r\n\r\n\r\n  const customTooltips = (() => {\r\n    if (options && options.tooltips) {\r\n      return\r\n    }\r\n    return {\r\n      tooltips: {\r\n        enabled: false,\r\n        custom: cuiCustomTooltips,\r\n        intersect: true,\r\n        mode: 'index',\r\n        position: 'nearest',\r\n        callbacks: {\r\n          labelColor(tooltipItem, chart) {\r\n            function getValue(prop) {\r\n              return typeof prop === 'object' ? prop[tooltipItem.index] : prop\r\n            }\r\n\r\n            const dataset = chart.data.datasets[tooltipItem.datasetIndex]\r\n            //tooltipLabelColor is coreUI custom prop used only here\r\n            const backgroundColor = getValue(\r\n              dataset.tooltipLabelColor ||\r\n              dataset.pointHoverBackgroundColor ||\r\n              dataset.borderColor ||\r\n              dataset.backgroundColor\r\n            )\r\n            return {\r\n              backgroundColor\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return Object.assign({}, options, customTooltips || {})\r\n  })()\r\n\r\n  const chartConfig = {\r\n    type,\r\n    data: {\r\n      datasets,\r\n      labels: computedLabels\r\n    },\r\n    options: computedOptions,\r\n    plugins\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (compData.firstRun) return\r\n    updateChart()\r\n  }, [chartConfig])\r\n\r\n  useEffect(() => {\r\n    renderChart()\r\n    compData.firstRun = false\r\n    return () => destroyChart()\r\n  }, [])\r\n\r\n  return (\r\n    <div {...attributes} ref={innerRef}>\r\n      <canvas id={safeId} ref={ref} />\r\n    </div>\r\n  )\r\n}\r\n\r\nCChart.propTypes = {\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  datasets: PropTypes.array,\r\n  labels: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\r\n  options: PropTypes.object,\r\n  plugins: PropTypes.array,\r\n  type: PropTypes.string\r\n}\r\n\r\nconst CChartBar = props => <CChart {...props} type=\"bar\"/>\r\nconst CChartHorizontalBar = props => <CChart {...props} type=\"horizontalBar\"/>\r\nconst CChartLine = props => <CChart {...props} type=\"line\"/>\r\nconst CChartDoughnut = props => <CChart {...props} type=\"doughnut\"/>\r\nconst CChartRadar = props => <CChart {...props} type=\"radar\"/>\r\nconst CChartPie = props => <CChart {...props} type=\"pie\"/>\r\nconst CChartPolarArea = props => <CChart {...props} type=\"polarArea\"/>\r\nconst CCharts = props => {\r\n  console.warn(\r\n    '<CCharts> component has been deprecated. Use <CChart> or <CChart{type}> instead'\r\n  )\r\n  return <CChart {...props}/>\r\n}\r\n\r\nexport {\r\n  CChart,\r\n  CCharts,\r\n  CChartBar,\r\n  CChartHorizontalBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n}\r\n\r\n"}},{"id":"4a101522-6ca2-5163-aed9-245f50ee6aa1","name":"CCol","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\nconst colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\r\nconst stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\r\nconst columnProps = PropTypes.oneOfType([\r\n  PropTypes.bool,\r\n  PropTypes.number,\r\n  PropTypes.string,\r\n  PropTypes.shape({\r\n    size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\r\n    order: stringOrNumberProp,\r\n    offset: stringOrNumberProp\r\n  })\r\n]);\r\nconst getColumnSizeClass = (isXs, colWidth, colSize) => {\r\n  if (colSize === true || colSize === '') {\r\n    return isXs ? 'col' : `col-${colWidth}`;\r\n  } else if (colSize === 'auto') {\r\n    return isXs ? 'col-auto' : `col-${colWidth}-auto`;\r\n  }\r\n  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;\r\n};\r\n\r\n//component - CoreUI / CCol\r\n\r\nconst CCol = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    widths,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const colClasses = [];\r\n\r\n  widths.forEach((colWidth, i) => {\r\n    let columnProp = props[colWidth];\r\n    delete attributes[colWidth];\r\n    if (!columnProp && columnProp !== '') {\r\n      return;\r\n    }\r\n    const isXs = !i;\r\n    if (typeof columnProp === 'object') {\r\n      const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;\r\n      const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\r\n\r\n      colClasses.push(classNames({\r\n        [colClass]: columnProp.size || columnProp.size === '',\r\n        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,\r\n        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0\r\n      }));\r\n    } else {\r\n      const colClass = getColumnSizeClass(isXs, colWidth, columnProp);\r\n      colClasses.push(colClass);\r\n    }\r\n  });\r\n\r\n  if (!colClasses.length) {\r\n    colClasses.push('col');\r\n  }\r\n\r\n  const classes = classNames(\r\n    className,\r\n    colClasses\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCol.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  xs: columnProps,\r\n  sm: columnProps,\r\n  md: columnProps,\r\n  lg: columnProps,\r\n  xl: columnProps,\r\n  widths: PropTypes.array\r\n};\r\n\r\nCCol.defaultProps = {\r\n  tag: 'div',\r\n  widths: colWidths,\r\n};\r\n\r\nexport default CCol;\r\n"}},{"id":"cb2d4c4d-9571-5493-bba1-a27d5c0dc17d","name":"CCollapse","fields":{"code":"import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { Transition } from 'react-transition-group'\r\n\r\nconst getTransitionClass = s => {\r\n  return s === 'entering' ? 'collapsing' : \r\n         s === 'entered' ? 'collapse show' :\r\n         s === 'exiting' ? 'collapsing' : 'collapse'\r\n}\r\n\r\n//component - CoreUI / CCollapse\r\nconst CCollapse = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    show,\r\n    navbar,\r\n    ...attributes\r\n  } = props\r\n\r\n  const [height, setHeight] = useState()\r\n\r\n  const onEntering = node => {\r\n    setHeight(node.scrollHeight)\r\n  }\r\n\r\n  const onEntered = () => {\r\n    setHeight(null)\r\n  }\r\n\r\n  const onExit = node => {\r\n    setHeight(node.scrollHeight)\r\n  }\r\n\r\n  const onExiting = node => {\r\n    const _unused = node.offsetHeight // eslint-disable-line no-unused-vars\r\n    setHeight(0)\r\n  }\r\n\r\n  const onExited = () => {\r\n    setHeight(null)\r\n  }\r\n\r\n  //render\r\n  return (\r\n    <Transition\r\n      in={show}\r\n      timeout={350}\r\n      appear={false}\r\n      enter={true}\r\n      exit={true}\r\n      onEntering={onEntering}\r\n      onEntered={onEntered}\r\n      onExit={onExit}\r\n      onExiting={onExiting}\r\n      onExited={onExited}\r\n    >\r\n      {(status) => {\r\n        let collapseClass = getTransitionClass(status)\r\n        const classes = classNames(\r\n          className,\r\n          collapseClass,\r\n          navbar && 'navbar-collapse'\r\n        )\r\n        const style = height === null ? null : { height }\r\n        return (\r\n          <div\r\n            {...attributes}\r\n            style={{ ...attributes.style, ...style }}\r\n            className={classes}\r\n            ref={innerRef}\r\n          >\r\n            {children}\r\n          </div>\r\n        )\r\n      }}\r\n    </Transition>\r\n  )\r\n}\r\n\r\nCCollapse.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ]),\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  show: PropTypes.bool,\r\n  navbar: PropTypes.bool\r\n}\r\n\r\nCCollapse.defaultProps = {\r\n  show: false\r\n}\r\n\r\nexport default CCollapse\r\n"}},{"id":"8ef8cf8a-4587-5ca6-8123-9515af40d19b","name":"CContainer","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CContainer\r\n\r\nconst CContainer = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    fluid,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    fluid ? 'container-fluid' : 'container'\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCContainer.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fluid: PropTypes.bool\r\n};\r\n\r\nCContainer.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CContainer;\r\n"}},{"id":"aa868396-0ef5-5cbd-b32b-e13569013873","name":"CCreateElement","fields":{"code":"import React, { useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//component - CoreUI / CCreateElement\r\nconst CCreateElement = ({ items, components = {} }) => {\r\n  const renderItem = (item, i) => {\r\n    const { _tag, _children, ...rest } = item\r\n    const Tag = components[_tag] || _tag\r\n    const children = _children ? _children.map((child, i) => {\r\n      return typeof child === 'object' ? renderItem(child, i) : child\r\n    }) : ''\r\n    return <Tag key={Tag + i} {...rest}>{children}</Tag>\r\n  }\r\n\r\n  const generatedItems = useMemo(() => {\r\n    return items && items.map((item, i) => renderItem(item, i))\r\n  }, [JSON.stringify(items)])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {generatedItems}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nCCreateElement.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  components: PropTypes.object\r\n};\r\n\r\nexport default CCreateElement"}},{"id":"b47dd88a-f8f2-5e00-8181-c0c73f9597a2","name":"CDataTable","fields":{"code":"import React, { useState, useRef, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CPagination from '../pagination/CPagination'\r\nimport CElementCover from '../element-cover/CElementCover'\r\nimport style from './CDataTable.module.css'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilArrowTop, cilBan } from '@coreui/icons'\r\n\r\n//component - CoreUI / CTable\r\nconst CDataTable = props => {\r\n\r\n  const {\r\n    //\r\n    innerRef,\r\n    overTableSlot,\r\n    columnHeaderSlot,\r\n    sortingIconSlot,\r\n    columnFilterSlot,\r\n    noItemsViewSlot,\r\n    noItemsView,\r\n    captionSlot,\r\n    underTableSlot,\r\n    theadTopSlot,\r\n    loadingSlot,\r\n    scopedSlots,\r\n    loading,\r\n    fields,\r\n    pagination,\r\n    activePage,\r\n    itemsPerPage,\r\n    items,\r\n    sorter,\r\n    header,\r\n    clickableRows,\r\n    columnFilter,\r\n    tableFilterValue,\r\n    tableFilter,\r\n    addTableClasses,\r\n    size,\r\n    dark,\r\n    striped,\r\n    hover,\r\n    border,\r\n    outlined,\r\n    responsive,\r\n    footer,\r\n    itemsPerPageSelect,\r\n    sorterValue,\r\n    columnFilterValue,\r\n    onRowClick,\r\n    onSorterValueChange,\r\n    onPaginationChange,\r\n    onColumnFilterChange,\r\n    onPagesChange,\r\n    onTableFilterChange,\r\n    onPageChange,\r\n    onFilteredItemsChange\r\n  } = props\r\n\r\n  const compData = useRef(\r\n    { firstRun: true, columnFiltered: 0, changeItems: 0 }).current\r\n\r\n\r\n  //\r\n  const [perPageItems, setPerPageItems] = useState(itemsPerPage)\r\n  const [sorterState, setSorterState] = useState(sorterValue || {})\r\n  const [tableFilterState, setTableFilterState] = useState(tableFilterValue)\r\n  const [columnFilterState, setColumnFilterState] = useState(columnFilterValue || {})\r\n  const [page, setPage] = useState(activePage || 1)\r\n  const [passedItems, setPassedItems] = useState(items || [])\r\n\r\n  // functions\r\n\r\n  const cellClass = (item, colName, index) => {\r\n    let classes = []\r\n    if (item._cellClasses && item._cellClasses[colName]) {\r\n      classes.push(item._cellClasses[colName])\r\n    }\r\n    if (fields && fields[index]._classes) {\r\n      classes.push(fields[index]._classes)\r\n    }\r\n    return classes\r\n  }\r\n\r\n  const pretifyName = (name)=>{\r\n    return name.replace(/[-_.]/g, ' ')\r\n      .replace(/ +/g, ' ')\r\n      .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\r\n      .split(' ')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ')\r\n  }\r\n\r\n  const headerClass = i => fields && fields[i]._classes && fields[i]._classes\r\n\r\n  const isSortable = i => sorter && fields && fields[i].sorter !== false\r\n\r\n  const headerStyles = (index) => {\r\n    let style = { verticalAlign: 'middle', overflow: 'hidden' }\r\n    if (isSortable(index)) {\r\n      style.cursor='pointer'\r\n    }\r\n    if (fields && fields[index] && fields[index]._style) {\r\n      return {...style, ...fields[index]._style}\r\n    }\r\n    return style\r\n  }\r\n\r\n  const getIconState = index => {\r\n    const direction = sorterState.asc ? 'asc' : 'desc'\r\n    return rawColumnNames[index] === sorterState.column ? direction : 0\r\n  }\r\n\r\n  const iconClasses = index => {\r\n    const state = getIconState(index)\r\n    return [\r\n      'position-absolute', style['icon-transition'], style['arrow-position'],\r\n      !state && style['transparent'],\r\n      state === 'desc' && style['rotate-icon']\r\n    ]\r\n  }\r\n\r\n  const rowClicked = (item, index, e, detailsClick = false) => {\r\n    onRowClick && onRowClick(item, index, getClickedColumnName(e, detailsClick), e)\r\n  }\r\n\r\n  const changeSort = (column, index) => {\r\n    if (!isSortable(index)) {\r\n      return\r\n    }\r\n    //if column changed or sort was descending change asc to true\r\n    const state = sorterState\r\n    const columnRepeated = state.column === column\r\n    if (!sorter || !sorter.resetable) {\r\n      state.column = column\r\n    } else {\r\n      state.column = columnRepeated && state.asc === false ? null : column\r\n    }\r\n    state.asc = !(columnRepeated && state.asc)\r\n    setSorterState({...state})\r\n    onSorterValueChange && onSorterValueChange(sorterState)\r\n  }\r\n\r\n  const paginationChange = e => {\r\n    onPaginationChange && onPaginationChange(Number(e.target.value))\r\n    !itemsPerPageSelect.external && setPerPageItems(Number(e.target.value))\r\n  }\r\n\r\n  const columnFilterEvent = (colName, value, type)=>{\r\n    const isLazy = columnFilter && columnFilter.lazy === true\r\n    if (isLazy && type === 'input' || !isLazy && type === 'change') {\r\n      return\r\n    }\r\n    const newState = {...columnFilterState, [`${colName}`]: value }\r\n    setColumnFilterState(newState)\r\n    onColumnFilterChange && onColumnFilterChange(newState)\r\n  }\r\n\r\n  const tableFilterChange = (value, type) => {\r\n    const isLazy = tableFilter && tableFilter.lazy === true\r\n    if (isLazy && type === 'input' || !isLazy && type === 'change') {\r\n      return\r\n    }\r\n    setTableFilterState(value)\r\n    onTableFilterChange && onTableFilterChange(value)\r\n  }\r\n\r\n  const getClickedColumnName = (e, detailsClick) => {\r\n    if (detailsClick) {\r\n      return 'details'\r\n    } else {\r\n      const children = Array.from(e.target.closest('tr').children)\r\n      const clickedCell = children.filter(child => child.contains(e.target))[0]\r\n      return rawColumnNames[children.indexOf(clickedCell)]\r\n    }\r\n  }\r\n\r\n  // computed\r\n\r\n  const generatedColumnNames = (() => {\r\n    return Object.keys(passedItems[0] || {}).filter(el => el.charAt(0) !== '_')\r\n  })()\r\n\r\n  const rawColumnNames = (()=>{\r\n    if (fields) {\r\n      return fields.map(el => el.key || el)\r\n    }\r\n    return generatedColumnNames\r\n  })()\r\n\r\n  useMemo(() => {\r\n    compData.columnFiltered++\r\n  }, [\r\n    JSON.stringify(columnFilter),\r\n    JSON.stringify(columnFilterState),\r\n    rawColumnNames.join(''),\r\n    compData.changeItems\r\n  ])\r\n\r\n  const columnFiltered = useMemo(()=>{\r\n    let items = passedItems\r\n    if (columnFilter && columnFilter.external) {\r\n      return items\r\n    }\r\n    Object.entries(columnFilterState).forEach(([key, value]) => {\r\n      const columnFilter = String(value).toLowerCase()\r\n      if (columnFilter && rawColumnNames.includes(key)) {\r\n        items = items.filter(item => {\r\n          return String(item[key]).toLowerCase().includes(columnFilter)\r\n        })\r\n      }\r\n    })\r\n    return items\r\n  }, [compData.columnFiltered])\r\n\r\n  const tableFiltered = useMemo(()=>{\r\n    let items = columnFiltered\r\n    if (!tableFilterState || (tableFilter && tableFilter.external)) {\r\n      return items\r\n    }\r\n    const filter = tableFilterState.toLowerCase()\r\n    const hasFilter = (item) => String(item).toLowerCase().includes(filter)\r\n    items = items.filter(item => {\r\n      return rawColumnNames.filter(key => hasFilter(item[key])).length\r\n    })\r\n    return items\r\n  }, [\r\n    compData.columnFiltered,\r\n    tableFilterState,\r\n    JSON.stringify(tableFilter)\r\n  ])\r\n\r\n  const sortedItems = useMemo(() => {\r\n    const col = sorterState.column\r\n    if (!col || !rawColumnNames.includes(col) || sorter.external) {\r\n      onFilteredItemsChange && onFilteredItemsChange(tableFiltered)\r\n      return tableFiltered\r\n    }\r\n    //if values in column are to be sorted by numeric value they all have to be type number\r\n    const flip = sorterState.asc ? 1 : -1\r\n    const sorted = tableFiltered.slice().sort((item, item2) => {\r\n      const value = item[col]\r\n      const value2 = item2[col]\r\n      const a = typeof value === 'number' ? value : String(value).toLowerCase()\r\n      const b = typeof value2 === 'number' ? value2 : String(value2).toLowerCase()\r\n      return a > b ? 1 * flip : b > a ? -1 * flip : 0\r\n    })\r\n    !compData.firstRun && onFilteredItemsChange && onFilteredItemsChange(tableFiltered)\r\n    return sorted\r\n  }, [\r\n    JSON.stringify(tableFiltered), \r\n    JSON.stringify(sorterState), \r\n    JSON.stringify(sorter)\r\n  ])\r\n\r\n  const tableClasses = [\r\n    'table',\r\n    {\r\n      [`table-${size}`]: size,\r\n      'table-dark': dark,\r\n      'table-striped': striped,\r\n      'table-hover': hover,\r\n      'table-bordered': border,\r\n      'border': outlined\r\n    },\r\n    addTableClasses\r\n  ]\r\n\r\n\r\n  const columnNames = useMemo(() => {\r\n    if (fields) {\r\n      return fields.map(f => {\r\n        return f.label !== undefined ? f.label : pretifyName(f.key || f)\r\n      })\r\n    }\r\n    return rawColumnNames.map(el => pretifyName(el))\r\n  }, [fields, rawColumnNames])\r\n\r\n  const sortingIconStyles = sorter && 'position-relative pr-4'\r\n\r\n  const colspan = rawColumnNames.length\r\n\r\n  const totalPages = Math.ceil((sortedItems.length) / perPageItems) || 1\r\n  useMemo(() => {\r\n    !compData.firstRun && onPagesChange && onPagesChange(totalPages)\r\n  }, [totalPages])\r\n\r\n  const computedPage = useMemo(() => {\r\n    const compPage = pagination ? page : activePage\r\n    !compData.firstRun && onPageChange && onPageChange(compPage)\r\n    return compPage\r\n  }, [page, activePage, pagination])\r\n\r\n  const firstItemIndex = (computedPage - 1) * perPageItems || 0\r\n\r\n  const paginatedItems = sortedItems.slice(\r\n    firstItemIndex,\r\n    firstItemIndex + perPageItems\r\n  )\r\n  const currentItems = computedPage ? paginatedItems : sortedItems\r\n\r\n  const tableFilterData = {\r\n    label: (tableFilter && tableFilter.label) || 'Filter:',\r\n    placeholder: (tableFilter && tableFilter.placeholder) || 'type string...'\r\n  }\r\n\r\n  const paginationSelect = {\r\n    label: (itemsPerPageSelect && itemsPerPageSelect.label) || 'Items per page:',\r\n    values: (itemsPerPageSelect && itemsPerPageSelect.values) || [5, 10, 20, 50]\r\n  }\r\n\r\n  const noItemsText = (() => {\r\n    const customValues = noItemsView || {}\r\n    if (passedItems.length) {\r\n      return customValues.noResults || 'No filtering results'\r\n    }\r\n    return customValues.noItems || 'No items'\r\n  })()\r\n\r\n  // watch\r\n  useMemo(() => setPerPageItems(itemsPerPage), [itemsPerPage])\r\n\r\n  useMemo(() => setSorterState({ ...sorterValue }), [sorterValue])\r\n\r\n  useMemo(() => setTableFilterState(tableFilterValue), [tableFilterValue])\r\n\r\n  useMemo(() => setColumnFilterState({...columnFilterValue}), [columnFilterValue])\r\n\r\n  //items\r\n  useMemo(() => {\r\n    if (\r\n      items &&\r\n      !compData.firstRun &&\r\n      (items.length !== passedItems.length ||\r\n      JSON.stringify(items) !== JSON.stringify(passedItems))\r\n    ) {\r\n      setPassedItems(items)\r\n      compData.changeItems++\r\n    }\r\n  })\r\n\r\n\r\n\r\n  // render\r\n  compData.firstRun = false\r\n\r\n  const paginationProps = typeof pagination === 'object' ? pagination : null\r\n\r\n  const headerContent = (\r\n  <tr>\r\n    {\r\n      columnNames.map((name, index)=>{\r\n        return (\r\n          <th\r\n            onClick={()=>{changeSort(rawColumnNames[index], index)}}\r\n            className={classNames([headerClass(index), sortingIconStyles])}\r\n            style={headerStyles(index)}\r\n            key={index}\r\n          >\r\n            { columnHeaderSlot[`${rawColumnNames[index]}`] ||\r\n              <div className=\"d-inline\">{name}</div>\r\n            }\r\n            {\r\n              isSortable(index) &&\r\n              ((sortingIconSlot && sortingIconSlot(getIconState(index), iconClasses(index))) ||\r\n              <CIcon\r\n                customClasses={classNames(iconClasses(index))}\r\n                width={18}\r\n                content={cilArrowTop}\r\n              />)\r\n            }\r\n          </th>\r\n        )\r\n      })\r\n    }\r\n  </tr>)\r\n\r\n  return (\r\n<React.Fragment>\r\n<div ref={innerRef}>\r\n  {\r\n    (itemsPerPageSelect || tableFilter) &&\r\n    <div className=\"row my-2 mx-0\">\r\n      {\r\n        tableFilter &&\r\n        <div className=\"col-sm-6 form-inline p-0\">\r\n          <label className=\"mr-2\">{tableFilterData.label}</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder={tableFilterData.placeholder}\r\n            onInput={(e)=>{tableFilterChange(e.target.value, 'input')}}\r\n            onChange={(e)=>{tableFilterChange(e.target.value, 'change')}}\r\n            value={tableFilterState || ''}\r\n          />\r\n        </div>\r\n      }\r\n      {\r\n        itemsPerPageSelect &&\r\n        <div className={'col-sm-6 p-0' + (!tableFilter && 'offset-sm-6')}>\r\n          <div className=\"form-inline justify-content-sm-end\">\r\n            <label className=\"mr-2\">{paginationSelect.label}</label>\r\n            <select\r\n              className=\"form-control\"\r\n              onChange={paginationChange}\r\n            >\r\n              <option value=\"\" disabled hidden>\r\n                {perPageItems}\r\n              </option>\r\n              { paginationSelect.values.map((number, key)=>{\r\n                return (\r\n                  <option\r\n                    val={number}\r\n                    key={key}\r\n                  >\r\n                    {number}\r\n                  </option>\r\n                )\r\n              })}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n\r\n{ overTableSlot }\r\n\r\n<div className={`position-relative ${responsive && 'table-responsive' }`}>\r\n  <table className={classNames(tableClasses)}>\r\n    <thead>\r\n      { theadTopSlot }\r\n      { header && headerContent }\r\n      {\r\n        columnFilter && <tr className=\"table-sm\">\r\n          {\r\n            rawColumnNames.map((colName, index)=>{\r\n              return (\r\n                <th className={classNames(headerClass(index))} key={index}>\r\n                  { columnFilterSlot[`${rawColumnNames[index]}`] ||\r\n                    ( fields && fields[index].filter !== false &&\r\n                      <input\r\n                        className=\"form-control form-control-sm\"\r\n                        onInput={(e)=>{columnFilterEvent(colName, e.target.value, 'input')}}\r\n                        onChange={(e)=>{columnFilterEvent(colName, e.target.value, 'change')}}\r\n                        value={columnFilterState[colName] || ''}\r\n                      />)\r\n                  }\r\n                </th>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n      }\r\n    </thead>\r\n    <tbody style={clickableRows && { cursor: 'pointer' }}>\r\n      { currentItems.map((item, itemIndex) => {\r\n        return (\r\n          <React.Fragment key={itemIndex}>\r\n          <tr\r\n            className={classNames(item._classes)}\r\n            tabIndex={clickableRows && 0}\r\n            onClick={(e)=>{rowClicked(item, itemIndex + firstItemIndex, e)}}\r\n          >\r\n            {\r\n              rawColumnNames.map((colName, index)=>{\r\n                return (\r\n                  scopedSlots[colName] &&\r\n                  React.cloneElement(\r\n                    scopedSlots[colName](item, itemIndex + firstItemIndex),\r\n                    {'key': index}\r\n                  )\r\n                ) ||\r\n                <td\r\n                  className={classNames(cellClass(item, colName, index))}\r\n                  key={index}\r\n                >\r\n                  { String(item[colName]) }\r\n                </td>\r\n              })\r\n            }\r\n          </tr>\r\n          {\r\n            scopedSlots.details &&\r\n            <tr\r\n              onClick={(e)=>{rowClicked(item, itemIndex + firstItemIndex, e, true)}}\r\n              className=\"p-0\"\r\n              style={{border: 'none !important'}}\r\n              key={'details' + itemIndex}\r\n            >\r\n              <td\r\n                colSpan={colspan}\r\n                className=\"p-0\"\r\n                style={{border: 'none !important'}}\r\n              >\r\n                { scopedSlots.details(item, itemIndex + firstItemIndex) }\r\n              </td>\r\n            </tr>\r\n          }\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n      {\r\n        !currentItems.length &&\r\n        <tr>\r\n          <td colSpan={colspan}>\r\n            { noItemsViewSlot ||\r\n              <div className=\"text-center my-5\">\r\n                <h2>\r\n                  { noItemsText }\r\n                  <CIcon\r\n                    width=\"30\"\r\n                    name=\"cilBan\"\r\n                    content={cilBan}\r\n                    className=\"text-danger mb-2\"\r\n                  />\r\n                </h2>\r\n              </div>}\r\n          </td>\r\n        </tr>\r\n      }\r\n    </tbody>\r\n    { footer && currentItems.length > 0 && <tfoot>{headerContent}</tfoot>}\r\n    { captionSlot }\r\n  </table>\r\n  { loading && \r\n    (loadingSlot || \r\n    <CElementCover \r\n      boundaries={[\r\n        { sides: ['top'], query: 'td' },\r\n        { sides: ['bottom'], query: 'tbody' }\r\n      ]}\r\n    />)\r\n  }\r\n</div>\r\n\r\n{ underTableSlot }\r\n\r\n{ pagination &&\r\n  <CPagination\r\n    {...paginationProps}\r\n    style={{display: totalPages > 0 ? 'inline' : 'none'}}\r\n    onActivePageChange={(page) => { setPage(page) }}\r\n    pages={totalPages}\r\n    activePage={page}\r\n  />\r\n}\r\n</React.Fragment>\r\n  )\r\n}\r\n\r\nCDataTable.propTypes = {\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  overTableSlot: PropTypes.node,\r\n  columnHeaderSlot: PropTypes.object,\r\n  sortingIconSlot: PropTypes.func,\r\n  columnFilterSlot: PropTypes.object,\r\n  noItemsViewSlot: PropTypes.node,\r\n  noItemsView: PropTypes.object,\r\n  captionSlot: PropTypes.node,\r\n  underTableSlot: PropTypes.node,\r\n  scopedSlots: PropTypes.object,\r\n  theadTopSlot: PropTypes.node,\r\n  loadingSlot: PropTypes.node,\r\n  loading: PropTypes.bool,\r\n  fields: PropTypes.array,\r\n  pagination: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  activePage: PropTypes.number,\r\n  itemsPerPage: PropTypes.number,\r\n  items: PropTypes.array,\r\n  sorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  clickableRows: PropTypes.bool,\r\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  tableFilterValue: PropTypes.string,\r\n  tableFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  addTableClasses: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\r\n  size: PropTypes.string,\r\n  dark: PropTypes.bool,\r\n  striped: PropTypes.bool,\r\n  hover: PropTypes.bool,\r\n  border: PropTypes.bool,\r\n  outlined: PropTypes.bool,\r\n  responsive: PropTypes.bool,\r\n  footer: PropTypes.bool,\r\n  itemsPerPageSelect: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  sorterValue: PropTypes.object,\r\n  columnFilterValue: PropTypes.object,\r\n  header: PropTypes.bool,\r\n  onRowClick: PropTypes.func,\r\n  onSorterValueChange: PropTypes.func,\r\n  onPaginationChange: PropTypes.func,\r\n  onColumnFilterChange: PropTypes.func,\r\n  onPagesChange: PropTypes.func,\r\n  onTableFilterChange: PropTypes.func,\r\n  onPageChange: PropTypes.func,\r\n  onFilteredItemsChange: PropTypes.func\r\n}\r\n\r\nCDataTable.defaultProps = {\r\n  itemsPerPage: 10,\r\n  responsive: true,\r\n  columnHeaderSlot: {},\r\n  columnFilterSlot: {},\r\n  scopedSlots: {},\r\n  sorterValue: {},\r\n  header: true\r\n}\r\n\r\nexport default CDataTable\r\n"}},{"id":"949e00ab-b054-51ab-872f-522cb53d2270","name":"CDropdown","fields":{"code":"import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\nexport const Context = React.createContext({})\r\n\r\n//component - CoreUI / CDropdown\r\n\r\nconst CDropdown = props => {\r\n\r\n  const {\r\n    className,\r\n    tag,\r\n    //\r\n    innerRef,\r\n    inNav,\r\n    ...attributes\r\n  } = props\r\n\r\n\r\n  const [reference, setReference] = useState()\r\n  const [isOpen, setIsOpen] = useState()\r\n  const [split, setSplit] = useState()\r\n  const [placement, setPlacement] = useState('')\r\n\r\n  const carretClass = placement.includes('top') ? 'dropup' :\r\n    placement.includes('right') ? 'dropright' :\r\n    placement.includes('left') ? 'dropleft' : 'dropdown'\r\n\r\n  const Tag = tag || (inNav ? 'li' : 'div')\r\n  const classes = classNames(\r\n    className,\r\n    carretClass,\r\n    { 'nav-item': inNav, 'btn-group': split, 'show': isOpen }\r\n  )\r\n\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      isOpen,\r\n      setIsOpen,\r\n      reference,\r\n      setReference,\r\n      inNav,\r\n      setSplit,\r\n      setPlacement\r\n    }}>\r\n      <Tag\r\n        className={classes}\r\n        {...attributes}\r\n        ref={innerRef}\r\n      />\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nCDropdown.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  inNav: PropTypes.bool\r\n}\r\n\r\nexport default CDropdown\r\n"}},{"id":"d326a693-ae8e-5ec1-93f6-b3a6764fdd95","name":"CDropdownDivider","fields":{"code":"import React from 'react'\r\nimport CDropdownItem from './CDropdownItem'\r\n\r\n//component - CoreUI / CDropdownDivider\r\n\r\nconst CDropdownDivider = props => {\r\n\r\n  return (\r\n    <CDropdownItem {...props} divider/>\r\n  )\r\n}\r\n\r\nexport default CDropdownDivider"}},{"id":"dbc02722-d78b-5814-97ec-27ea10df5c52","name":"CDropdownHeader","fields":{"code":"import React from 'react'\r\nimport CDropdownItem from './CDropdownItem'\r\n\r\n//component - CoreUI / CDropdownHeader\r\n\r\nconst CDropdownHeader = props => {\r\n\r\n  return (\r\n    <CDropdownItem {...props} header/>\r\n  )\r\n}\r\n\r\nexport default CDropdownHeader\r\n"}},{"id":"89448d1a-5c1f-5d35-bd43-ce1d1740c3ca","name":"CDropdownItem","fields":{"code":"import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport { Context } from './CDropdown'\r\nimport CLink from '../link/CLink'\r\n\r\n//component - CoreUI / CDropdownItem\r\nconst CDropdownItem = props => {\r\n\r\n  let {\r\n    tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    onClick,\r\n    color,\r\n    divider,\r\n    header,\r\n    active,\r\n    disabled,\r\n    ...rest\r\n  } = props\r\n\r\n  const { setIsOpen } = useContext(Context)\r\n\r\n  const isItem = !(header || divider)\r\n\r\n  const click = e => {\r\n    if (disabled) {\r\n      return\r\n    }\r\n    onClick && onClick(e)\r\n    isItem && setIsOpen(false)\r\n  }\r\n\r\n  //render\r\n  const tabIndex = isItem && !disabled ? null : -1\r\n  const role = tabIndex === null ? 'menuitem' : undefined\r\n  const Tag = tag || (!isItem ? 'div' : CLink)\r\n  const ref = { [`${typeof Tag === 'string' ? 'ref': 'innerRef'}`]: innerRef }\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'dropdown-' + (header ? 'header' : divider ? 'divider' : 'item'),\r\n    { active },\r\n    color && 'bg-' + color,\r\n    disabled && Tag !== CLink && 'disabled'\r\n  )\r\n\r\n\r\n\r\n  return (\r\n    <Tag\r\n      className={classes}\r\n      tabIndex={tabIndex}\r\n      role={role}\r\n      disabled={disabled}\r\n      {...rest}\r\n      onClick={click}\r\n      {...ref}\r\n    />\r\n  )\r\n}\r\n\r\nCDropdownItem.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string,\r\n  divider: PropTypes.bool,\r\n  header: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  active: PropTypes.bool\r\n}\r\n\r\nexport default CDropdownItem\r\n"}},{"id":"562d7a3b-7956-5fc3-aafb-c9c179e35441","name":"CDropdownMenu","fields":{"code":"import React, { useState, useEffect, useLayoutEffect, useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { Context } from './CDropdown'\r\nimport { createPopper } from '@popperjs/core'\r\n\r\n//component - CoreUI / CDropdownMenu\r\n\r\n\r\nconst CDropdownMenu = props => {\r\n\r\n  const {\r\n    className,\r\n    show,\r\n    placement,\r\n    modifiers,\r\n    innerRef,\r\n    ...rest\r\n  } = props\r\n\r\n  const { reference, isOpen, setIsOpen, setPlacement } = useContext(Context)\r\n  const [popperElement, setPopperElement] = useState(null)\r\n  const [popper, setPopper] = useState(null)\r\n\r\n  innerRef && innerRef(popperElement)\r\n\r\n  useEffect(() => {\r\n    setIsOpen(show)\r\n    setPlacement(placement)\r\n  }, [show, placement])\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'dropdown-menu',\r\n    {\r\n      'show': isOpen,\r\n    }\r\n  )\r\n\r\n  useLayoutEffect(() => {\r\n    if (!reference) {\r\n      return\r\n    }\r\n    setPopper(createPopper(\r\n      reference,\r\n      popperElement,\r\n      {\r\n        placement,\r\n        modifiers: modifiers || []\r\n      }\r\n    ))\r\n   \r\n    return () => {\r\n      if (popper) {\r\n        popper.destroy()\r\n      }\r\n    }\r\n  }, [isOpen])\r\n\r\n  const checkClose = (e) => {\r\n    if ([reference, popperElement].every(el => !el.contains(e.target))) {\r\n      setIsOpen(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.addEventListener('click', checkClose)\r\n    }\r\n    return () => document.removeEventListener('click', checkClose)\r\n  }, [isOpen])\r\n\r\n  return (\r\n    <div\r\n      className={classes}\r\n      ref={setPopperElement}\r\n      role=\"menu\"\r\n      aria-hidden={!isOpen}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\n\r\nCDropdownMenu.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  modifiers: PropTypes.array,\r\n  show: PropTypes.bool,\r\n  placement: PropTypes.oneOf([\r\n    '', 'top-end', 'top', 'top-start',\r\n    'bottom-end', 'bottom', 'bottom-start',\r\n    'right-start', 'right', 'right-end',\r\n    'left-start', 'left', 'left-end'\r\n  ])\r\n}\r\n\r\nCDropdownMenu.defaultProps = {\r\n  placement: 'bottom-start',\r\n}\r\n\r\nexport default CDropdownMenu\r\n"}},{"id":"9ee35b78-14ee-5d23-a49b-b6cc4b890c7b","name":"CDropdownToggle","fields":{"code":"import React, { useContext, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport CButton from '../button/CButton'\r\nimport CLink from '../link/CLink'\r\nimport { Context } from './CDropdown'\r\n\r\n//component - CoreUI / CDropdownToggle\r\n\r\nconst CDropdownToggle = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    onClick,\r\n    caret,\r\n    split,\r\n    tag,\r\n    ...attributes\r\n  } = props\r\n\r\n  const {\r\n    reference,\r\n    setReference,\r\n    isOpen,\r\n    setIsOpen,\r\n    inNav,\r\n    setSplit\r\n  } = useContext(Context)\r\n  \r\n  innerRef && innerRef(reference)\r\n\r\n  useEffect(() => {\r\n    setSplit(split)\r\n  })\r\n\r\n  const click = e => {\r\n    if (props.disabled) {\r\n      return\r\n    }\r\n    onClick && onClick(e)\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const Tag = tag || (inNav ? CLink : CButton)\r\n\r\n  const classes = classNames(\r\n    className,\r\n    {\r\n      'dropdown-toggle': caret && !split,\r\n      'nav-link': inNav\r\n    }\r\n  )\r\n\r\n  const togglerAttrs = {\r\n    onClick: click,\r\n    'aria-expanded': isOpen ? 'true' : 'false',\r\n    'aria-haspopup': 'true',\r\n    'aria-label': 'Dropdown toggle',\r\n    [`${tag && typeof tag === 'string' ? 'ref' : 'innerRef'}`]: setReference\r\n  }\r\n\r\n  if (split) {\r\n    return (\r\n      <React.Fragment>\r\n        <CButton {...attributes}>\r\n          {props.children}\r\n        </CButton>\r\n        <CButton\r\n          className='dropdown-toggle dropdown-toggle-split'\r\n          {...togglerAttrs}\r\n          {...attributes}\r\n        >{''}</CButton>\r\n      </React.Fragment>\r\n    )\r\n  } else {\r\n    return (\r\n      <Tag\r\n        className={classes}\r\n        {...togglerAttrs}\r\n        {...attributes}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nCDropdownToggle.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  caret: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  split: PropTypes.bool,\r\n  disabled: PropTypes.bool\r\n}\r\n\r\nCDropdownToggle.defaultProps = {\r\n  caret: true\r\n}\r\n\r\nexport default CDropdownToggle\r\n"}},{"id":"e6266327-8c4f-5fa9-af9b-af4ecfa221a6","name":"CElementCover","fields":{"code":"import React, { useEffect, createRef, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CSpinner from '../spinner/CSpinner'\r\n\r\n//component - CoreUI / CElementCover\r\nconst CElementCover = props => {\r\n\r\n  const {\r\n    className,\r\n    children,\r\n    //\r\n    innerRef,\r\n    boundaries,\r\n    opacity,\r\n    ...attributes\r\n  } = props\r\n\r\n  const [customBoundaries, setCustomBoundaries] = useState({})\r\n  const ref = createRef(null)\r\n  innerRef && innerRef(ref)\r\n\r\n  const getCustomBoundaries = () => {\r\n    if (!ref || !ref.current || !boundaries) {\r\n      return {}\r\n    }\r\n    const parent = ref.current.parentElement\r\n    const parentCoords = parent.getBoundingClientRect()\r\n    const customBoundaries = {}\r\n    boundaries.forEach(({sides, query}) => {\r\n      const element = parent.querySelector(query)\r\n      if (!element || !sides) {\r\n        return\r\n      }\r\n      const coords = element.getBoundingClientRect()\r\n      sides.forEach(side => {\r\n        const sideMargin = Math.abs(coords[side] - parentCoords[side])\r\n        customBoundaries[side] = sideMargin + 'px'\r\n      })\r\n    })\r\n    return customBoundaries\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCustomBoundaries(getCustomBoundaries())\r\n  }, [JSON.stringify(getCustomBoundaries())])\r\n\r\n  //render\r\n  const classes = classNames(className)\r\n\r\n  const containerCoords = {\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    ...customBoundaries\r\n  }\r\n\r\n  const coverStyles = {\r\n    ...containerCoords,\r\n    position: 'absolute',\r\n    backgroundColor: `rgb(255,255,255,${opacity})`\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className={classes} \r\n      style={coverStyles} \r\n      {...attributes} \r\n      ref={ref}\r\n    >\r\n      { children ||  \r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translateX(-50%) translateY(-50%)'\r\n        }}>       \r\n          <CSpinner grow size=\"lg\" color=\"primary\"/>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nCElementCover.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  boundaries: PropTypes.array,\r\n  opacity: PropTypes.number\r\n};\r\n\r\nCElementCover.defaultProps = {\r\n  opacity: 0.4\r\n};\r\n\r\nexport default CElementCover"}},{"id":"fcfb4fe7-4d30-5a4a-9689-92215ce80be3","name":"CEmbed","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CEmbed\r\n\r\nconst CEmbed = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    innerRef,\r\n    //\r\n    ratio,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className, 'embed-responsive', `embed-responsive-${ratio}`\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCEmbed.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  ratio: PropTypes.oneOf(['21by9', '16by9', '4by3', '1by1']),\r\n};\r\n\r\nCEmbed.defaultProps = {\r\n  tag: 'div',\r\n  ratio: '16by9'\r\n}\r\n\r\nexport default CEmbed\r\n"}},{"id":"3357ebf6-7f5d-57ad-87b9-4ee36d1719ef","name":"CEmbedItem","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CEmbedItem\r\n\r\nconst CEmbedItem = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'embed-responsive-item'\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCEmbedItem.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  type: PropTypes.oneOf(['iframe', 'embed', 'video', 'object', 'img'])\r\n};\r\n\r\nCEmbedItem.defaultProps = {\r\n  tag: 'iframe'\r\n}\r\n\r\nexport default CEmbedItem\r\n"}},{"id":"865d9136-bccb-54e1-9498-dbd3b862ff80","name":"CFade","fields":{"code":"import React, { useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { pickByKeys, omitByKeys } from '@coreui/utils/src'\r\nimport { TransitionPropTypeKeys, tagPropType } from '../utils/helper.js'\r\nimport { Transition } from 'react-transition-group'\r\n\r\n//component - CoreUI / CFade\r\nconst CFade = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    children,\r\n    //\r\n    innerRef,\r\n    baseClass,\r\n    baseClassActive,\r\n    ...rest\r\n  } = props\r\n\r\n  //render\r\n  const transitionProps = pickByKeys(rest, TransitionPropTypeKeys)\r\n  const childProps = omitByKeys(rest, TransitionPropTypeKeys)\r\n\r\n  const childRef = useRef()\r\n\r\n  return (\r\n    <Transition {...transitionProps} nodeRef={childRef}>\r\n      {(status) => {\r\n        const isActive = status === 'entered'\r\n        const classes = classNames(\r\n          className,\r\n          baseClass,\r\n          isActive && baseClassActive\r\n        )\r\n        return (\r\n          <Tag className={classes} {...childProps} ref={innerRef}>\r\n            {children}\r\n          </Tag>\r\n        )\r\n      }}\r\n    </Transition>\r\n  )\r\n}\r\n\r\nCFade.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ]),\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  baseClass: PropTypes.string,\r\n  baseClassActive: PropTypes.string\r\n}\r\n\r\nCFade.defaultProps = {\r\n  tag: 'div',\r\n  //\r\n  baseClass: 'fade',\r\n  baseClassActive: 'show',\r\n  timeout: 150,\r\n  appear: true,\r\n  enter: true,\r\n  exit: true,\r\n  in: true\r\n}\r\n\r\nexport default CFade\r\n"}},{"id":"d2198ab9-9e6c-51d4-992d-a340ea7faf93","name":"CFooter","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CFooter\r\nconst CFooter = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    fixed,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'c-footer',\r\n    fixed ? 'c-footer-fixed' : null,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCFooter.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fixed: PropTypes.bool\r\n};\r\n\r\nCFooter.defaultProps = {\r\n  tag: 'footer',\r\n  fixed: false\r\n};\r\n\r\nexport default CFooter\r\n"}},{"id":"43b57b75-26c2-5f84-92ee-5291ac93b437","name":"CForm","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CForm\r\n\r\nconst CForm = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    innerRef,\r\n    //\r\n    inline,\r\n    wasValidated,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    inline ? 'form-inline' : false,\r\n    wasValidated ? 'was-validated' : false\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCForm.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  inline: PropTypes.bool,\r\n  wasValidated: PropTypes.bool\r\n};\r\n\r\nCForm.defaultProps = {\r\n  tag: 'form',\r\n};\r\n\r\nexport default CForm;\r\n"}},{"id":"e7455973-d80c-5d2b-87e4-bf47737f5061","name":"CFormFeedback","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CFormFeedback\r\n\r\nconst CFormFeedback = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    valid,\r\n    tooltip,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const validMode = tooltip ? 'tooltip' : 'feedback'\r\n  const classes = classNames(\r\n    valid ? `valid-${validMode}` : `invalid-${validMode}`,\r\n    className\r\n  )\r\n\r\n  return <div className={classes} {...attributes} ref={innerRef} />\r\n}\r\n\r\nCFormFeedback.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  valid: PropTypes.bool,\r\n  tooltip: PropTypes.bool\r\n};\r\n\r\nexport const CValidFeedback = props => <CFormFeedback {...props} valid/>\r\nexport const CInvalidFeedback = props => <CFormFeedback {...props} valid={false}/>\r\n"}},{"id":"a72d1f70-4e16-51ac-9757-f99ac109a88f","name":"CFormGroup","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CFormGroup\r\nconst CFormGroup = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    row,\r\n    disabled,\r\n    variant,\r\n    inline,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const checkClass = variant && variant.includes('custom') ? 'custom-control' : 'form-check'\r\n\r\n  const classes = classNames(\r\n    row && 'row',\r\n    !variant && 'form-group',\r\n    variant && checkClass,\r\n    variant === 'custom-radio' && 'custom-radio',\r\n    variant === 'custom-checkbox' && 'custom-checkbox',\r\n    variant && inline && `${checkClass}-inline`,\r\n    variant && disabled && 'disabled',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCFormGroup.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  row: PropTypes.bool,\r\n  variant: PropTypes.oneOf(['checkbox', 'custom-checkbox', 'custom-radio']),\r\n  inline: PropTypes.bool,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\n\r\nexport default CFormGroup\r\n"}},{"id":"7f2bc3b7-0703-5dd2-9835-abf46eef889d","name":"CFormText","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CFormText\r\nconst CFormText = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    innerRef,\r\n    //\r\n    color,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'form-text', color && `text-${color}`, className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCFormText.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string\r\n};\r\n\r\nCFormText.defaultProps = {\r\n  tag: 'small',\r\n  color: 'muted'\r\n};\r\n\r\nexport default CFormText\r\n"}},{"id":"f546debe-947b-5a94-9fda-a1a0d94f3f6d","name":"CHeader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CHeader\r\n\r\nconst CHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    fixed,\r\n    colorScheme,\r\n    withSubheader,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = classNames(className,\r\n  'c-header',\r\n  colorScheme ? 'c-header-' + colorScheme : null,\r\n  fixed ? 'c-header-fixed' : null,\r\n  withSubheader ? 'c-header-with-subheader' : null);\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCHeader.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fixed: PropTypes.bool,\r\n  withSubheader: PropTypes.bool,\r\n  colorScheme: PropTypes.string,\r\n};\r\n\r\nCHeader.defaultProps = {\r\n  tag: 'header',\r\n  fixed: true,\r\n  colorScheme: 'light'\r\n};\r\n\r\nexport default CHeader;\r\n"}},{"id":"c01225f4-220d-5ce1-8cf5-fc83c9a127a4","name":"CHeaderBrand","fields":{"code":"/* eslint react/prop-types: 0 */\r\nimport React from 'react'\r\nimport CBrand from '../utils/CBrand'\r\n\r\n//component - CoreUI / CHeaderBrand\r\n\r\nconst CHeaderBrand = props => {\r\n  return (\r\n    <CBrand {...props} className={['c-header-brand', props.className]}/>\r\n  )\r\n}\r\n\r\nexport default CHeaderBrand\r\n"}},{"id":"65536506-3af8-5cb6-9c88-e0e1ee2323d0","name":"CHeaderNav","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CHeaderNav\r\n\r\nconst CHeaderNav = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-header-nav'\r\n  )\r\n\r\n  return (\r\n    <ul className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n\r\n}\r\n\r\nCHeaderNav.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\n\r\nexport default CHeaderNav\r\n"}},{"id":"e5ad520f-9418-5fe9-9350-f836a6984eef","name":"CHeaderNavItem","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CHeaderNavItem\r\n\r\nconst CHeaderNavItem = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-header-nav-item'\r\n  )\r\n\r\n  return (\r\n    <li className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n\r\n}\r\n\r\nCHeaderNavItem.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\n\r\nexport default CHeaderNavItem"}},{"id":"52fbaec8-5d17-57a4-a3cd-5ecb03773c9e","name":"CHeaderNavLink","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CLink from '../link/CLink'\r\n\r\n//component - CoreUI / CHeaderNavLink\r\n\r\nconst CHeaderNavLink = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...rest\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-header-nav-link'\r\n  )\r\n\r\n  return (\r\n    <CLink className={classes} {...rest} innerRef={innerRef} />\r\n  )\r\n\r\n}\r\n\r\nCHeaderNavLink.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\n\r\nexport default CHeaderNavLink"}},{"id":"819e736a-b0e4-505b-8ac0-64129c8f5086","name":"CIcon","fields":{"code":"import React, { useMemo, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport './CIcon.css'\r\n\r\nconst colog = (...args) => {\r\n  if (process && process.env && process.env.NODE_ENV === 'development') {\r\n    console.warn(...args)\r\n  }\r\n}\r\n\r\nconst toCamelCase = (str) => {\r\n  return str.replace(/([-_][a-z0-9])/ig, ($1) => {\r\n    return $1.toUpperCase()\r\n  }).replace(/-/ig, '')\r\n}\r\n\r\n//component - CoreUI / CIcon\r\nconst CIcon = props => {\r\n\r\n  const {\r\n    className,\r\n    name,\r\n    content,\r\n    customClasses,\r\n    size,\r\n    src,\r\n    title,\r\n    use,\r\n    ...attributes\r\n  } = props\r\n\r\n  const [change, setChange] = useState(0)\r\n\r\n  useMemo(() => setChange(change + 1), [name, JSON.stringify[content]])\r\n\r\n  const iconName = useMemo(()=>{\r\n    const iconNameIsKebabCase = name && name.includes('-')\r\n    return iconNameIsKebabCase ? toCamelCase(name) : name\r\n  }, [change])\r\n\r\n  const titleCode = title ? `<title>${title}</title>` : ''\r\n\r\n  const code = useMemo(() => {\r\n    if (content) {\r\n      return content\r\n    } else if (name && React.icons) {\r\n      return React.icons[iconName] ? React.icons[iconName] :\r\n        colog('Not existing icon: '+ iconName + ' in React.icons object')\r\n    }\r\n  }, [change])\r\n\r\n  const iconCode = useMemo(()=>{\r\n    return Array.isArray(code) ? code[1] || code[0] : code\r\n  }, [change])\r\n\r\n  const scale = (()=>{\r\n    return Array.isArray(code) && code.length > 1 ? code[0] : '64 64'\r\n  })()\r\n\r\n  const viewBox = (()=>{\r\n    return attributes.viewBox || `0 0 ${scale}`\r\n  })()\r\n\r\n  const computedSize = (()=>{\r\n    const addCustom = !size && (attributes.width || attributes.height)\r\n    return size === 'custom' || addCustom ? 'custom-size' : size\r\n  })()\r\n\r\n  //render\r\n  const computedClasses = classNames(\r\n    'c-icon',\r\n    computedSize && `c-icon-${computedSize}`,\r\n    className\r\n  )\r\n\r\n  const classes = customClasses || computedClasses\r\n\r\n  return (\r\n    <React.Fragment>\r\n      { !src && !use &&\r\n        <svg\r\n          {...attributes}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox={viewBox}\r\n          className={classes}\r\n          role=\"img\"\r\n          dangerouslySetInnerHTML={{__html: titleCode + iconCode}}\r\n        />\r\n      }\r\n      { src && !use &&\r\n        <img\r\n          {...attributes}\r\n          className={className}\r\n          src={src}\r\n          role=\"img\"\r\n        />\r\n      }\r\n      { !src && use &&\r\n        <svg\r\n          {...attributes}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className={classes}\r\n          role=\"img\"\r\n        >\r\n          <use href={use}></use>\r\n        </svg>\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nCIcon.propTypes = {\r\n  className: PropTypes.string,\r\n  name: PropTypes.string,\r\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  size: PropTypes.oneOf([\r\n    'custom', 'custom-size', 'sm', 'lg', 'xl',\r\n    '2xl', '3xl', '4xl', '5xl', '6xl', '7xl', '8xl', '9xl'\r\n  ]),\r\n  customClasses: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\r\n  src: PropTypes.string,\r\n  title: PropTypes.string,\r\n  use: PropTypes.string\r\n}\r\n\r\nexport default CIcon\r\n\r\nexport const CIconWarn = props => {\r\n  colog(\r\n    '@coreui/icons-react: Please use default export since named exports are deprecated'\r\n  )\r\n  return <CIcon {...props}/>\r\n}\r\n"}},{"id":"17ddea7f-296f-5e36-8705-f8334638813a","name":"CImg","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CImg\r\nconst CImg = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    fluid,\r\n    block,\r\n    thumbnail,\r\n    shape,\r\n    align,\r\n    src,\r\n    width,\r\n    height,\r\n    placeholderColor,\r\n    fluidGrow,\r\n    ...attributes\r\n  } = props\r\n\r\n  const alignClass = align === 'center' ? 'mx-auto' : \r\n                     align === 'right' ? 'float-right' :\r\n                     align === 'left' ? 'float-left' : ''\r\n\r\n  // render\r\n  const classes = classNames(\r\n    className,\r\n    alignClass,\r\n    thumbnail && 'img-thumbnail',\r\n    fluid || fluidGrow && 'img-fluid',\r\n    fluidGrow && 'w-100',\r\n    block && 'd-block',\r\n    shape\r\n  )\r\n\r\n  return (\r\n    src ?\r\n      <img\r\n        className={classes}\r\n        src={src}\r\n        width={width}\r\n        height={height}\r\n        {...attributes}\r\n        ref={innerRef} \r\n      /> :\r\n      <svg\r\n        className={classes}\r\n        width={width}\r\n        height={height}\r\n        style={{'backgroundColor': placeholderColor }}\r\n        {...attributes}\r\n        ref={innerRef}\r\n      />\r\n  )\r\n\r\n}\r\n\r\nCImg.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  src: PropTypes.string,\r\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  block: PropTypes.bool,\r\n  fluid: PropTypes.bool,\r\n  fluidGrow: PropTypes.bool,\r\n  shape: PropTypes.string,//oneOf(['', 'rounded']),\r\n  thumbnail: PropTypes.bool,\r\n  align: PropTypes.oneOf(['', 'left', 'right', 'center']),\r\n  placeholderColor: PropTypes.string\r\n};\r\n\r\nCImg.defaultProps = {\r\n  placeholderColor: 'transparent'\r\n};\r\n\r\nexport default CImg\r\n"}},{"id":"e1549f82-8b5a-5f41-b369-6225b6f68d95","name":"CInput","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CInput\r\nconst commonPropTypes = {\r\n  className: PropTypes.string,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  valid: PropTypes.bool,\r\n  invalid: PropTypes.bool\r\n}\r\n\r\nconst CInput = props => {\r\n\r\n  let {\r\n    className,\r\n    //\r\n    innerRef,\r\n    type,\r\n    valid,\r\n    invalid,\r\n    plaintext,\r\n    size,\r\n    sizeHtml,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n  const classes = \r\n  classNames(\r\n    plaintext ? 'form-control-plaintext' : 'form-control',\r\n    size && `form-control-${size}`,\r\n    invalid && 'is-invalid',\r\n    valid && 'is-valid',\r\n    className\r\n  )\r\n\r\n  return <input \r\n    className={classes} \r\n    type={type}\r\n    {...attributes}\r\n    size={sizeHtml} \r\n    ref={innerRef}\r\n  />\r\n}\r\n\r\nCInput.propTypes = {\r\n  ...commonPropTypes,\r\n  plaintext: PropTypes.bool,\r\n  type: PropTypes.string,\r\n  size: PropTypes.string,\r\n  sizeHtml: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n\r\nCInput.defaultProps = {\r\n  type: 'text'\r\n};\r\n\r\nconst CTextarea = props => {\r\n\r\n  let {\r\n    className,\r\n    //\r\n    innerRef,\r\n    valid,\r\n    invalid,\r\n    plaintext,\r\n    size,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n  const classes = classNames(\r\n      plaintext ? 'form-control-plaintext' : 'form-control',\r\n      size && `form-control-${size}`,\r\n      invalid && 'is-invalid',\r\n      valid && 'is-valid',\r\n      className\r\n  )\r\n\r\n  return <textarea className={classes} {...attributes} ref={innerRef}/>\r\n}\r\n\r\nCTextarea.propTypes = {\r\n  ...commonPropTypes,\r\n  plaintext: PropTypes.bool,\r\n  size: PropTypes.string\r\n};\r\n\r\nconst CInputFile = props => {\r\n\r\n  let {\r\n    className,\r\n    //\r\n    innerRef,\r\n    valid,\r\n    invalid,\r\n    custom,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    custom ? 'custom-file-input' : 'form-control-file',\r\n    invalid && 'is-invalid',\r\n    valid && 'is-valid',\r\n    className\r\n  )\r\n\r\n  return <input className={classes} {...attributes} type=\"file\" ref={innerRef}/>\r\n}\r\n\r\nCInputFile.propTypes = {\r\n  ...commonPropTypes,\r\n  custom: PropTypes.bool\r\n};\r\n\r\nconst CInputCheckbox = props => {\r\n\r\n  let {\r\n    className,\r\n    //\r\n    innerRef,\r\n    valid,\r\n    invalid,\r\n    custom,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    custom ? 'custom-control-input' : 'form-check-input',\r\n    invalid && 'is-invalid',\r\n    valid && 'is-valid',\r\n    className\r\n  )\r\n\r\n  return <input className={classes} type=\"checkbox\" {...attributes} ref={innerRef}/>\r\n}\r\n\r\nCInputCheckbox.propTypes = {\r\n  ...commonPropTypes,\r\n  custom: PropTypes.bool\r\n};\r\n\r\nconst CInputRadio = props => <CInputCheckbox {...props} type=\"radio\"/> \r\n\r\nconst CSelect = props => {\r\n\r\n  let {\r\n    className,\r\n    //\r\n    innerRef,\r\n    valid,\r\n    invalid,\r\n    size,\r\n    sizeHtml,\r\n    custom,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n  const baseClass = custom ? 'custom-select' : 'form-control'\r\n  const classes = classNames(\r\n    baseClass,\r\n    size && `${baseClass}-${size}`,\r\n    invalid && 'is-invalid',\r\n    valid && 'is-valid',\r\n    className\r\n  )\r\n\r\n  return <select \r\n    className={classes} \r\n    {...attributes} \r\n    size={sizeHtml} \r\n    ref={innerRef}\r\n  />\r\n}\r\n\r\nCSelect.propTypes = {\r\n  ...commonPropTypes,\r\n  size: PropTypes.string,\r\n  sizeHtml: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n\r\nexport {\r\n  CInput,\r\n  CTextarea,\r\n  CInputFile,\r\n  CInputCheckbox,\r\n  CInputRadio,\r\n  CSelect\r\n}"}},{"id":"25414042-9c01-5c1f-93d9-9e2bbcc2da48","name":"CInputGroup","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CInputGroup\r\nconst CInputGroup = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    size,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'input-group',\r\n    size && `input-group-${size}`,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCInputGroup.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  size: PropTypes.string\r\n};\r\n\r\nexport default CInputGroup\r\n"}},{"id":"d776803c-7506-5cfa-9270-691126fb83f2","name":"CInputGroupAddon","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CInputGroupAddon\r\nconst CInputGroupAddon = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    prepend,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'input-group-' + (prepend ? 'prepend' : 'append'), className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nCInputGroupAddon.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  prepend: PropTypes.bool\r\n};\r\n\r\nexport const CInputGroupAppend = props => <CInputGroupAddon {...props} prepend={false}/>\r\nexport const CInputGroupPrepend = props => <CInputGroupAddon {...props} prepend/>\r\n"}},{"id":"ea51d1a4-629a-557a-a087-9694da5733a0","name":"CInputGroupText","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CInputGroupText\r\nconst CInputGroupText = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'input-group-text', className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCInputGroupText.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCInputGroupText.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CInputGroupText\r\n"}},{"id":"5fe39165-4a9e-5b82-96d0-9e3bb3dcc8c3","name":"CJumbotron","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CJumbotron\r\n\r\nconst CJumbotron = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    fluid,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'jumbotron',\r\n    fluid ? 'jumbotron-fluid' : false\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCJumbotron.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fluid: PropTypes.bool\r\n};\r\n\r\nCJumbotron.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CJumbotron;\r\n"}},{"id":"6c33a2a4-cb02-5630-94a2-58c7d4182d90","name":"CLabel","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport CCol from '../grid/CCol'\r\n\r\n//component - CoreUI / CLabel\r\nconst CLabel = props => {\r\n\r\n  const {\r\n    tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    hidden,\r\n    variant,\r\n    col,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n  const classes = classNames(\r\n    hidden && 'sr-only',\r\n    variant === 'custom-checkbox' && 'custom-control-label',\r\n    variant === 'checkbox' && 'form-check-label',\r\n    variant === 'custom-file' && 'custom-file-label',\r\n    col && 'col-form-label',\r\n    col && typeof col === 'string' && `col-form-label-${col}`,\r\n    className\r\n  )\r\n\r\n  const Tag = col ? CCol : tag\r\n  const addLabelTag = col && { tag }\r\n\r\n  return (\r\n    <Tag className={classes} {...addLabelTag} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCLabel.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  hidden: PropTypes.bool,\r\n  variant: PropTypes.oneOf(['custom-file', 'checkbox', 'custom-checkbox']),\r\n  col: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\r\n};\r\n\r\nCLabel.defaultProps = {\r\n  tag: 'label'\r\n}\r\n\r\nexport default CLabel\r\n"}},{"id":"3a298d6f-eddf-535e-a185-282940d1d3fa","name":"CLink","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n//component - CoreUI / CLink\r\nconst CLink = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    active,\r\n    href,\r\n    onClick,\r\n    disabled,\r\n    ...rest\r\n  } = props\r\n\r\n  const to = rest ? rest.to : null\r\n  const click = e => {\r\n    if ((!href && !to) || href === '#') {\r\n      e.preventDefault()\r\n    }\r\n    !disabled && onClick && onClick(e)\r\n  }\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    active && 'active',\r\n    disabled && 'disabled',\r\n    className\r\n  )\r\n\r\n  return to ? (\r\n    <NavLink\r\n      {...rest}\r\n      className={classes}\r\n      onClick={click}\r\n      ref={innerRef}\r\n    />\r\n  ) : (\r\n    <a\r\n      href={href || '#'}\r\n      className={classes}\r\n      rel={rest.target === '_blank' ? 'noopener norefferer' : null}\r\n      {...rest}\r\n      onClick={click}\r\n      ref={innerRef}\r\n    />\r\n  )\r\n}\r\n\r\nCLink.propTypes = {\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  href: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  ...NavLink.propTypes,\r\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  to: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\r\n};\r\n\r\n// CLink.sortAttributes = (attributesToSort) => {\r\n//   const attributes = {}\r\n//   const linkProps = {}\r\n//   Object.entries(attributesToSort || {}).forEach(([key, value]) => {\r\n//     if (Object.keys(CLink.propTypes).includes(key)) {\r\n//       linkProps[key] = value\r\n//     } else {\r\n//       attributes[key] = value\r\n//     }\r\n//   })\r\n//   return { linkProps, attributes }\r\n// }\r\n\r\nexport default CLink\r\n"}},{"id":"2bae7664-c9de-5b76-971f-fb0863adef9e","name":"CListGroup","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport {tagPropType} from '../utils/helper.js'\r\n\r\n//component - CoreUI / CListGroup\r\n\r\nconst CListGroup = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    horizontal,\r\n    flush,\r\n    accent,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'list-group', \r\n    {\r\n      [`list-group-horizontal-${horizontal}`]: horizontal,\r\n      'list-group-flush': flush,\r\n      'list-group-accent': accent\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Tag \r\n      className={classes}\r\n      role=\"list-items\"\r\n      {...attributes}\r\n      ref={innerRef}\r\n    />\r\n  )\r\n\r\n}\r\n\r\nCListGroup.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  flush: PropTypes.bool,\r\n  horizontal: PropTypes.string,\r\n  accent: PropTypes.bool\r\n};\r\n\r\nCListGroup.defaultProps = {\r\n  tag: 'ul',\r\n};\r\n\r\nexport default CListGroup\r\n"}},{"id":"fd580981-0a57-52c3-9b54-63c3913076b4","name":"CListGroupItem","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport CLink from '../link/CLink'\r\n\r\n//component - CoreUI / CListGroupItem\r\n\r\nconst CListGroupItem = props => {\r\n\r\n  let {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    active,\r\n    disabled,\r\n    action,\r\n    color,\r\n    accent,\r\n    ...rest\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className, 'list-group-item',\r\n    {\r\n      'list-group-item-action': action||rest.href||rest.to||Tag=='button',\r\n      active,\r\n      disabled,\r\n      [`list-group-item-${color}`]: color,\r\n      [`list-group-item-accent-${accent}`]: accent\r\n    }\r\n  )\r\n\r\n  if (props.href || props.to){\r\n    return (\r\n      <CLink {...rest} className={classes} innerRef={innerRef}/>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <Tag {...rest} className={classes} ref={innerRef}/>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCListGroupItem.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.any,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  accent: PropTypes.string,\r\n  action: PropTypes.bool\r\n};\r\n\r\nCListGroupItem.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CListGroupItem\r\n"}},{"id":"a2256d6f-109d-5610-a043-fb9621463cd8","name":"CMedia","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CMedia\r\n\r\nconst CMedia = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames('media', className)\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n}\r\n\r\nCMedia.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nexport default CMedia\r\n"}},{"id":"855f4250-2262-5027-89f6-bd50988894a9","name":"CMediaBody","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CMediaBody\r\n\r\nconst CMediaBody = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'media-body', className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCMediaBody.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nexport default CMediaBody\r\n"}},{"id":"c4e0c773-eacb-5932-9dbf-21f10999e04d","name":"CModal","fields":{"code":"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CFade from '../fade/CFade'\r\n\r\nexport const Context = React.createContext({})\r\n\r\n//component - CoreUI / CModal\r\nconst CModal = props => {\r\n\r\n  const {\r\n    //\r\n    innerRef,\r\n    show,\r\n    centered,\r\n    size,\r\n    color,\r\n    borderColor,\r\n    fade,\r\n    backdrop,\r\n    closeOnBackdrop,\r\n    onOpened,\r\n    onClosed,\r\n    addContentClass,\r\n    onClose,\r\n    ...attributes\r\n  } = props\r\n\r\n  const [isOpen, setIsOpen] = useState(show)\r\n  const modalClick = e => e.target.dataset.modal && closeOnBackdrop && close()\r\n\r\n  useEffect(() => {\r\n    setIsOpen(show)\r\n  }, [show])\r\n\r\n\r\n  const close = () => {\r\n    onClose && onClose()\r\n    setIsOpen(false)\r\n  }\r\n\r\n  const onEntered = () => onOpened && onOpened()\r\n\r\n  const onExited = () => onClosed && onClosed()\r\n\r\n  const transitionProps = {\r\n    baseClass: fade ? 'fade d-block' : '',\r\n    baseClassActive: 'show',\r\n    timeout: fade ? 150 : 0,\r\n    unmountOnExit: true\r\n  }\r\n\r\n  const modalClasses = classNames(\r\n    'modal overflow-auto', {\r\n      [`modal-${color}`]: color\r\n    }\r\n  )\r\n\r\n  const dialogClasses = classNames(\r\n    'modal-dialog', {\r\n      'modal-dialog-centered': centered,\r\n      [`modal-${size}`]: size\r\n    }\r\n  )\r\n\r\n  const contentClasses = classNames(\r\n    'modal-content', {\r\n      [`border-${borderColor}`]: borderColor,\r\n    },\r\n    addContentClass\r\n  )\r\n\r\n  const backdropClasses = classNames({\r\n    'modal-backdrop': true,\r\n    'fade': fade,\r\n    'show': isOpen || fade\r\n  })\r\n\r\n  return (\r\n    <div onClick={modalClick}>\r\n      <CFade\r\n        {...transitionProps}\r\n        in={Boolean(isOpen)}\r\n        onEntered={onEntered}\r\n        onExited={onExited}\r\n        tabIndex=\"-1\"\r\n        role=\"dialog\"\r\n        className={modalClasses}\r\n        data-modal={true}\r\n      >\r\n        <div className={dialogClasses} role=\"document\">\r\n          <div\r\n            {...attributes} \r\n            className={contentClasses} \r\n            ref={innerRef}\r\n          >\r\n            <Context.Provider value={{close}}>\r\n              {props.children}\r\n            </Context.Provider>\r\n          </div>\r\n        </div>\r\n      </CFade>\r\n      { backdrop && isOpen && <div className={backdropClasses}></div> }\r\n    </div>\r\n  )\r\n}\r\n\r\nCModal.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  show: PropTypes.bool,\r\n  centered: PropTypes.bool,\r\n  size: PropTypes.oneOf(['', 'sm', 'lg', 'xl']),\r\n  backdrop: PropTypes.bool,\r\n  color: PropTypes.string, \r\n  borderColor: PropTypes.string,\r\n  onOpened: PropTypes.func,\r\n  onClosed: PropTypes.func,\r\n  fade: PropTypes.bool,\r\n  closeOnBackdrop: PropTypes.bool,\r\n  onClose: PropTypes.func,\r\n  addContentClass: PropTypes.string\r\n}\r\n\r\nCModal.defaultProps = {\r\n  backdrop: true,\r\n  fade: true,\r\n  closeOnBackdrop: true\r\n}\r\n\r\nexport default CModal\r\n"}},{"id":"43537b3d-8d87-5fb8-b863-132cab2fa040","name":"CModalBody","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CModalBody\r\n\r\nconst CModalBody = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'modal-body'\r\n  );\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCModalBody.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCModalBody.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CModalBody;\r\n"}},{"id":"fec1057a-cef3-5abf-9708-27197fa73f72","name":"CModalFooter","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from '../utils/helper.js';\r\n\r\n//component - CoreUI / CModalFooter\r\n\r\nconst CModalFooter = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'modal-footer'\r\n  );\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCModalFooter.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCModalFooter.defaultProps = {\r\n  tag: 'footer'\r\n};\r\n\r\nexport default CModalFooter;\r\n"}},{"id":"aae9573b-b0e8-551b-b9c2-943801b6f9f5","name":"CModalHeader","fields":{"code":"import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\nimport { Context } from './CModal'\r\nimport CButtonClose from '../button/CButtonClose'\r\n//component - CoreUI / CModalHeader\r\n\r\nconst CModalHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    closeButton,\r\n    ...attributes\r\n  } = props\r\n\r\n  const { close } = useContext(Context)\r\n  \r\n  //render\r\n\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'modal-header'\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}>\r\n      {props.children}\r\n      {closeButton && <CButtonClose onClick={close}/>}\r\n    </Tag>\r\n  )\r\n\r\n}\r\n\r\nCModalHeader.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  closeButton: PropTypes.bool\r\n};\r\n\r\nCModalHeader.defaultProps = {\r\n  tag: 'header'\r\n};\r\n\r\nexport default CModalHeader\r\n"}},{"id":"5ce5928d-bfc0-5969-a360-c9871a61021c","name":"CModalTitle","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CModalTitle\r\nconst CModalTitle = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'modal-title', className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n}\r\n\r\nCModalTitle.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCModalTitle.defaultProps = {\r\n  tag: 'h5'\r\n};\r\n\r\nexport default CModalTitle\r\n"}},{"id":"6515c6a6-59f3-5e53-86a8-5ee9c3e2ffbe","name":"CNav","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CNav\r\n\r\nconst CNav = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    variant,\r\n    vertical,\r\n    justified,\r\n    fill,\r\n    inCard,\r\n    ...attributes\r\n  } = props\r\n\r\n  const verticalClass = `flex${vertical === true ? '' : `-${vertical}`}-column`\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'nav',\r\n    vertical && verticalClass,\r\n    {\r\n      [`nav-${variant}`]: variant,\r\n      'nav-justified': justified,\r\n      'nav-fill': fill,\r\n      [`card-header-${variant}`]: inCard && variant\r\n    },\r\n    className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n\r\n}\r\n\r\nCNav.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  variant: PropTypes.oneOf(['', 'tabs', 'pills']),\r\n  vertical: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  justified: PropTypes.bool,\r\n  fill: PropTypes.bool,\r\n  inCard: PropTypes.bool\r\n};\r\n\r\nCNav.defaultProps = {\r\n  tag: 'ul'\r\n};\r\n\r\nexport default CNav\r\n"}},{"id":"1dc2b8ec-a332-51e1-84c9-ce74f215e985","name":"CNavItem","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CNavItem\r\n\r\nconst CNavItem = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'nav-item',\r\n    className\r\n  )\r\n\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCNavItem.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCNavItem.defaultProps = {\r\n  tag: 'li',\r\n};\r\n\r\nexport default CNavItem\r\n"}},{"id":"9603ed4c-4d0b-5381-9ad5-9dd205d1de13","name":"CNavLink","fields":{"code":"import React, { useContext, useState, createRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport CLink from '../link/CLink'\r\n\r\nimport { Context } from '../tabs/CTabs'\r\n\r\nconst getIndex = (el) => Array.from(el.parentNode.children).indexOf(el)\r\n\r\nconst getState = ({ current: el }) => {\r\n  const hasSiblings = el.parentElement.childNodes.length > 1\r\n  return el.dataset.tab || getIndex(hasSiblings ? el : el.parentElement)\r\n}\r\n\r\nconst CNavLink = props => {\r\n\r\n  const {\r\n    innerRef,\r\n    className,\r\n    onClick,\r\n    ...rest\r\n  } = props\r\n\r\n  const tabState = useContext(Context)\r\n  const actTab = (tabState || {}).active\r\n  const ref = createRef()\r\n  innerRef && innerRef(ref)\r\n  const [active, setActive] = useState()\r\n\r\n  useEffect(() => {\r\n    typeof actTab !== 'undefined' && setActive(getState(ref) === actTab)\r\n  }, [actTab])\r\n\r\n  const click = (e) => {\r\n    onClick && onClick(e)\r\n    tabState && tabState.setActiveTab(getState(ref))\r\n  }\r\n\r\n  return (\r\n    <CLink \r\n      active={active}\r\n      {...rest}\r\n      innerRef={ref}\r\n      onClick={click} \r\n      className={['nav-link', className]}\r\n    />\r\n  )\r\n}\r\n\r\nCNavLink.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default CNavLink\r\n"}},{"id":"31d540c6-cbab-5cca-b799-de09057d3a73","name":"CNavbar","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CNavbar\r\n\r\nconst CNavbar = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    expandable,\r\n    light,\r\n    fixed,\r\n    sticky,\r\n    color,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'navbar', className,\r\n    light ? 'navbar-light' : 'navbar-dark',\r\n    {\r\n      [`navbar-expand${expandable===true ? '': `-${expandable}`}`]: expandable,\r\n      [`bg-${color}`]: color,\r\n      [`fixed-${fixed}`]: fixed,\r\n      'sticky-top': sticky\r\n    }\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCNavbar.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  light: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  fixed: PropTypes.oneOf(['', 'top', 'bottom']),\r\n  sticky: PropTypes.bool,\r\n  expandable: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n};\r\n\r\nCNavbar.defaultProps = {\r\n  tag: 'nav'\r\n};\r\n\r\nexport default CNavbar;\r\n"}},{"id":"8d9785f3-e04b-52e5-ab98-2f2488d31d4a","name":"CNavbarBrand","fields":{"code":"/* eslint react/prop-types: 0 */\r\nimport React from 'react'\r\nimport CBrand from '../utils/CBrand'\r\n\r\n//component - CoreUI / CNavbarBrand\r\nconst CNavbarBrand = props => {\r\n  return (\r\n    <CBrand {...props} className={['navbar-brand', props.className]}/>\r\n  )\r\n}\r\n\r\nexport default CNavbarBrand"}},{"id":"557a1e2a-132a-546c-a016-ff35ba31bf9e","name":"CNavbarNav","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CNavbarNav\r\n\r\nconst CNavbarNav = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'navbar-nav', className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCNavbarNav.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCNavbarNav.defaultProps = {\r\n  tag: 'ul'\r\n};\r\n\r\nexport default CNavbarNav\r\n"}},{"id":"18682e55-3770-5431-a1fd-31076fbee3a1","name":"CNavbarText","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CNavbarText\r\n\r\nconst CNavbarText = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'navbar-text', className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n}\r\n\r\nCNavbarText.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCNavbarText.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CNavbarText\r\n"}},{"id":"3ca69e4c-ff89-56b6-8cc6-4ed4e20bff74","name":"CPagination","fields":{"code":"import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CLink from '../link/CLink'\r\n\r\n//component - CoreUI / CPagination\r\nconst CPagination = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    addListClass,\r\n    activePage,\r\n    size,\r\n    firstButton,\r\n    previousButton,\r\n    nextButton,\r\n    lastButton,\r\n    dots,\r\n    arrows,\r\n    doubleArrows,\r\n    limit,\r\n    pages,\r\n    align,\r\n    onActivePageChange,\r\n    ...attributes\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    pages < activePage && onActivePageChange(pages, true)\r\n  }, [pages])\r\n\r\n  //render\r\n  const listClasses = classNames(\r\n    'pagination',\r\n    size && 'pagination-' + size,\r\n    'justify-content-' + align,\r\n    addListClass\r\n  )\r\n\r\n  const backArrowsClasses = classNames(\r\n    'page-item',\r\n    activePage === 1 && 'disabled'\r\n  )\r\n\r\n  const nextArrowsClasses = classNames(\r\n    'page-item',\r\n    activePage === pages && 'disabled'\r\n  )\r\n\r\n  const showDots = (() => {\r\n    return dots && limit > 4 && limit < pages\r\n  })()\r\n  const maxPrevItems = (() => {\r\n    return Math.floor((limit - 1) / 2)\r\n  })()\r\n  const maxNextItems = (() => {\r\n    return Math.ceil((limit - 1) / 2)\r\n  })()\r\n  const beforeDots = (() => {\r\n    return showDots && activePage > maxPrevItems + 1\r\n  })()\r\n  const afterDots = (() => {\r\n    return showDots && activePage < pages - maxNextItems\r\n  })()\r\n  const computedLimit = (() => {\r\n    return limit - afterDots - beforeDots\r\n  })()\r\n  const range = (() => {\r\n    return activePage + maxNextItems\r\n  })()\r\n  const lastItem = (() => {\r\n    return range >= pages ? pages : range - afterDots\r\n  })()\r\n  const itemsAmount = (() => {\r\n    return pages < computedLimit ? pages : computedLimit\r\n  })()\r\n  const items = (() => {\r\n    if (activePage - maxPrevItems <= 1) {\r\n      return Array.from({\r\n        length: itemsAmount\r\n      }, (v, i) => i + 1)\r\n    } else {\r\n      return Array.from({\r\n        length: itemsAmount\r\n      }, (v, i) => {\r\n        return lastItem - i\r\n      }).reverse()\r\n    }\r\n  })()\r\n\r\n  const setPage = (number) => {\r\n    if (number !== activePage) {\r\n      onActivePageChange(number)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <nav\r\n      className={className}\r\n      aria-label=\"pagination\"\r\n      {...attributes}\r\n      ref={innerRef}\r\n    >\r\n      <ul className={listClasses}>\r\n        { doubleArrows &&\r\n          <li className={backArrowsClasses}>\r\n            <CLink\r\n              className=\"page-link\"\r\n              onClick={ () => setPage(1)}\r\n              aria-label=\"Go to first page\"\r\n              aria-disabled={activePage === 1}\r\n              disabled={activePage === 1}\r\n            >\r\n              { firstButton }\r\n            </CLink>\r\n          </li>\r\n        }\r\n        { arrows &&\r\n          <li className={backArrowsClasses}>\r\n            <CLink\r\n              className=\"page-link\"\r\n              onClick={ () => setPage(activePage - 1)}\r\n              aria-label=\"Go to previous page\"\r\n              aria-disabled={activePage === 1}\r\n              disabled={activePage === 1}\r\n            >\r\n              { previousButton }\r\n            </CLink>\r\n          </li>\r\n        }\r\n        { beforeDots &&\r\n          <li role=\"separator\" className=\"page-item disabled\">\r\n            <span className=\"page-link\">…</span>\r\n          </li>\r\n        }\r\n        { items.map(i => {\r\n            return (\r\n            <li className={`${activePage===i ? 'active' : ''} page-item`} key={i}>\r\n              <CLink\r\n                className=\"page-link\"\r\n                onClick={(e) => setPage(i, e)}\r\n                aria-label={activePage === i ? `Current page ${i}` : `Go to page ${i}`}\r\n              >{i}</CLink>\r\n            </li>)\r\n          })\r\n        }\r\n        { afterDots &&\r\n          <li role=\"separator\" className=\"page-item disabled\">\r\n            <span className=\"page-link\">…</span>\r\n          </li>\r\n        }\r\n        { arrows &&\r\n          <li className={nextArrowsClasses}>\r\n            <CLink\r\n              className=\"page-link\"\r\n              onClick={ () => setPage(activePage + 1)}\r\n              aria-label=\"Go to next page\"\r\n              aria-disabled={activePage === pages}\r\n              disabled={activePage === pages}\r\n            >\r\n              { nextButton }\r\n            </CLink>\r\n          </li>\r\n        }\r\n        { doubleArrows &&\r\n          <li className={nextArrowsClasses}>\r\n            <CLink\r\n              className=\"page-link\"\r\n              onClick={ () => setPage(pages)}\r\n              aria-label=\"Go to last page\"\r\n              aria-disabled={activePage === pages}\r\n              disabled={activePage === pages}\r\n            >\r\n              { lastButton }\r\n            </CLink>\r\n          </li>\r\n        }\r\n      </ul>\r\n    </nav>\r\n  )\r\n\r\n}\r\n\r\nCPagination.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  activePage: PropTypes.number,\r\n  dots: PropTypes.bool,\r\n  arrows: PropTypes.bool,\r\n  doubleArrows: PropTypes.bool,\r\n  firstButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\r\n  previousButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\r\n  nextButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\r\n  lastButton: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\r\n  size: PropTypes.oneOf(['', 'sm', 'lg']),\r\n  align: PropTypes.oneOf(['start', 'center', 'end']),\r\n  addListClass: PropTypes.string,\r\n  limit: PropTypes.number,\r\n  pages: PropTypes.number,\r\n  onActivePageChange: PropTypes.func.isRequired\r\n};\r\n\r\nCPagination.defaultProps = {\r\n  activePage: 1,\r\n  dots: true,\r\n  arrows: true,\r\n  doubleArrows: true,\r\n  limit: 5,\r\n  firstButton: <React.Fragment>&laquo;</React.Fragment>,\r\n  previousButton: <React.Fragment>&lsaquo;</React.Fragment>,\r\n  nextButton: <React.Fragment>&rsaquo;</React.Fragment>,\r\n  lastButton: <React.Fragment>&raquo;</React.Fragment>,\r\n  align: 'start',\r\n  pages: 10\r\n};\r\n\r\nexport default CPagination\r\n"}},{"id":"6548f368-58bf-5821-8c21-d454eebb97e6","name":"CPopover","fields":{"code":"import React, {useCallback} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport CTooltip from './CTooltip.js'\r\nimport { renderToString } from 'react-dom/server'\r\n\r\n//component - CoreUI / CPopover\r\nconst template = `<h3 class=\"popover-header\">H</h3><div class=\"popover-body\">C</div>`\r\nconst generateContent = (content, header) => {\r\n  return template.replace('H', renderToString(header))\r\n                 .replace('C', renderToString(content))\r\n}\r\n\r\nconst CPopover = props => {\r\n\r\n  let {\r\n    header,\r\n    children,\r\n    content,\r\n    ...config\r\n  } = props\r\n\r\n  const computedContent = useCallback(\r\n    generateContent(content, header),\r\n    [content, header]\r\n  )\r\n\r\n  const advancedOptions = {\r\n    ...(config ? config.advancedOptions || {}: {}),\r\n    theme: 'cpopover'\r\n  }\r\n\r\n  const computedConfig = {\r\n    ...config, \r\n    advancedOptions\r\n  }\r\n\r\n  return (\r\n    <CTooltip content={computedContent} {...computedConfig}>\r\n      {children}\r\n    </CTooltip>\r\n  )\r\n}\r\n\r\nCPopover.propTypes = {\r\n  children: PropTypes.node,\r\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n  header: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\r\n}\r\n\r\nexport default CPopover\r\n"}},{"id":"f1d9bf09-48b8-5aa6-ba67-0a5fd4543bed","name":"CPortal","fields":{"code":"// import {useEffect, useRef} from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import PropTypes from 'prop-types';\r\n// import {canUseDOM} from './utils/helper.js';\r\n\r\n// //component - CoreUI / CPortal\r\n\r\n// const CPortal = props=>{\r\n\r\n//   const fields = useRef({defaultNode: null}).current;\r\n\r\n//   // effect\r\n\r\n//   useEffect(() => {\r\n//     return function cleanup() {\r\n//       if (fields.defaultNode) {\r\n//         document.body.removeChild(fields.defaultNode);\r\n//       }\r\n//       fields.defaultNode = null;\r\n//     };\r\n//   },\r\n//   [fields.defaultNode]);\r\n\r\n//   // render\r\n\r\n//   if (!canUseDOM) {\r\n//     return null;\r\n//   }\r\n\r\n//   if (!props.node && !fields.defaultNode) {\r\n//     fields.defaultNode = document.createElement('div');\r\n//     document.body.appendChild(fields.defaultNode);\r\n//   }\r\n\r\n//   return ReactDOM.createPortal(\r\n//     props.children,\r\n//     props.node || fields.defaultNode\r\n//   );\r\n\r\n// }\r\n\r\n// CPortal.propTypes = {\r\n//   children: PropTypes.node.isRequired,\r\n//   //\r\n//   node: PropTypes.any\r\n// };\r\n\r\n// export default CPortal;\r\n"}},{"id":"1d6a599d-2867-5263-b9c7-5e32d87b6244","name":"CProgress","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CProgressBar from './CProgressBar'\r\n\r\nexport const Context = React.createContext({})\r\n//component - CoreUI / CProgress\r\n\r\nconst CProgress = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    size,\r\n    color,\r\n    striped,\r\n    animated,\r\n    precision,\r\n    showPercentage,\r\n    showValue,\r\n    max,\r\n    value,\r\n    ...attributes\r\n  } = props\r\n\r\n  const inheritedProps = {\r\n    color,\r\n    striped,\r\n    animated,\r\n    precision,\r\n    showPercentage,\r\n    showValue,\r\n    max,\r\n    value\r\n  }\r\n\r\n  const progressClasses = classNames(\r\n    'progress', \r\n    size && 'progress-' + size,\r\n    className\r\n  )\r\n\r\n  // render\r\n  return (\r\n    <div \r\n      className={progressClasses} \r\n      {...attributes} \r\n      ref={innerRef}\r\n    >\r\n      <Context.Provider value={{ inheritedProps }}>\r\n        { children || <CProgressBar/>}\r\n      </Context.Provider>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nCProgress.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  size: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string,PropTypes.number]),\r\n  max: PropTypes.oneOfType([PropTypes.string,PropTypes.number]),\r\n  animated: PropTypes.bool,\r\n  striped: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  precision: PropTypes.number,\r\n  showPercentage: PropTypes.bool,\r\n  showValue: PropTypes.bool\r\n};\r\n\r\nCProgress.defaultProps = {\r\n  value: 0,\r\n  max: 100,\r\n  precision: 0\r\n};\r\n\r\nexport default CProgress\r\n"}},{"id":"d333e2c2-b9c4-54c4-99d8-f696e1800e26","name":"CProgressBar","fields":{"code":"import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { Context } from './CProgress'\r\n//component - CoreUI / CProgressBar\r\n\r\nconst CProgressBar = directProps => {\r\n\r\n  const { inheritedProps } = useContext(Context)\r\n  const props = {...inheritedProps, ...directProps }\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    color,\r\n    striped,\r\n    animated,\r\n    precision,\r\n    showPercentage,\r\n    showValue,\r\n    max,\r\n    value,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n  const progressBarClasses = classNames(\r\n    'progress-bar',\r\n    animated && 'progress-bar-animated',\r\n    (striped || animated) && 'progress-bar-striped',\r\n    color && `bg-${color}`,\r\n    className\r\n  )\r\n\r\n  const valLabel = Number(value).toFixed(precision)\r\n  const percentLabel = Number((value / max) * 100).toFixed(precision) + '%'\r\n\r\n  return (\r\n    <div\r\n      className={progressBarClasses}\r\n      style={{ width: `${(value / max) * 100}%` }}\r\n      role=\"progressbar\"\r\n      aria-valuenow={value}\r\n      aria-valuemin=\"0\"\r\n      aria-valuemax={max}\r\n      {...attributes}\r\n      ref={innerRef}\r\n    >\r\n      { showPercentage ? percentLabel : showValue ? valLabel : children }\r\n    </div>\r\n  )\r\n}\r\n\r\nCProgressBar.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  value: PropTypes.number,\r\n  max: PropTypes.number,\r\n  animated: PropTypes.bool,\r\n  striped: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  precision: PropTypes.number,\r\n  showPercentage: PropTypes.bool,\r\n  showValue: PropTypes.bool\r\n};\r\n\r\nexport default CProgressBar\r\n"}},{"id":"84d54bb2-50d5-50dc-91ea-82fd7d0d666f","name":"CRow","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CRow\r\nconst CRow = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    gutters,\r\n    form,\r\n    alignHorizontal,\r\n    alignVertical,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    !gutters ? 'no-gutters' : null,\r\n    alignHorizontal ? `justify-content-${alignHorizontal}` : null,\r\n    alignVertical ? `align-${alignVertical}` : null,\r\n    form ? 'form-row' : 'row'\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n\r\n}\r\n\r\nCRow.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  gutters: PropTypes.bool,\r\n  form: PropTypes.bool,\r\n  alignHorizontal: PropTypes.string,\r\n  alignVertical: PropTypes.string\r\n};\r\n\r\nCRow.defaultProps = {\r\n  tag: 'div',\r\n  gutters: true\r\n};\r\n\r\nexport default CRow\r\n"}},{"id":"1c1de6a5-d7aa-5582-aabd-7b91e4cd4335","name":"CScrollbar","fields":{"code":"import React, { useState, createRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport PerfectScrollbar from 'perfect-scrollbar'\r\nimport 'perfect-scrollbar/css/perfect-scrollbar.css'\r\nimport './scrollbar.css'\r\n\r\n//component - CoreUI / CScrollbar\r\nconst CScrollbar = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    settings,\r\n    switcher,\r\n    ...attributes\r\n  } = props\r\n\r\n  const [instance, setInstance] = useState()\r\n  const ref = createRef()\r\n  innerRef && innerRef(ref)\r\n\r\n  useEffect(() => {\r\n    switcher ? init() : uninit()\r\n  }, [switcher])\r\n\r\n  useEffect(() => uninit(), [])\r\n\r\n  const init = () => {\r\n    if (!instance) {\r\n      createPerfectScrollbar()\r\n    }\r\n  }\r\n\r\n  const createPerfectScrollbar = () => {\r\n    setInstance(new PerfectScrollbar(ref.current, settings))\r\n  }\r\n\r\n  const uninit = () => {\r\n    if (instance) {\r\n      instance.destroy()\r\n      setInstance(null)\r\n    }\r\n  }\r\n\r\n  // render\r\n  return (\r\n    <Tag \r\n      className={classNames(className)} \r\n      style={{ position: 'relative' }} \r\n      {...attributes} \r\n      ref={ref}\r\n    />\r\n  )\r\n}\r\n\r\nCScrollbar.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  settings: PropTypes.object,\r\n  switcher: PropTypes.bool,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCScrollbar.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CScrollbar\r\n"}},{"id":"fc4bc3b8-691c-5be9-aff0-90824a1bd862","name":"CSidebar","fields":{"code":"import React, { useState, useRef, useMemo, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nexport const Context = React.createContext({})\r\n\r\n//component - CoreUI / CSidebar\r\n\r\nconst CSidebar = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    breakpoint,\r\n    show,\r\n    fixed,\r\n    unfoldable,\r\n    minimize,\r\n    size,\r\n    hideOnMobileClick,\r\n    aside,\r\n    colorScheme,\r\n    overlaid,\r\n    dropdownMode,\r\n    onShowChange,\r\n    onMinimizeChange,\r\n    ...attributes\r\n  } = props\r\n\r\n  const key = useState(Math.random().toString(36).substr(2))[0]\r\n\r\n  const [isOpen, setIsOpen] = useState(show)\r\n  const [openDropdown, setOpenDropdown] = useState()\r\n\r\n  const node = useRef({}).current\r\n  const reference = (r) => {\r\n    node.current = r\r\n    innerRef && innerRef(r)\r\n  }\r\n\r\n\r\n  const [minimized, setIsMinimized] = useState(minimize)\r\n  useMemo(() => {\r\n    setIsMinimized(minimize)\r\n  }, [minimize])\r\n\r\n  const toggleMinimize = () => {\r\n    setIsMinimized(!minimized)\r\n    onMinimizeChange && onMinimizeChange(minimized)\r\n  }\r\n\r\n  // compData.nextRender = true\r\n\r\n  useMemo(() => {\r\n    setIsOpen(show)\r\n  }, [show])\r\n\r\n  useEffect(() => {\r\n    isOpen === true ? createBackdrop() : removeBackdrop()\r\n    return () => removeBackdrop()\r\n  }, [isOpen])\r\n\r\n  //methods\r\n  const sidebarCloseListener = (e) => {\r\n    if (\r\n      document.getElementById(key + 'backdrop') &&\r\n      !node.current.contains(e.target)\r\n    ) {\r\n      closeSidebar()\r\n    }\r\n  }\r\n\r\n  const createBackdrop = () => {\r\n    const backdrop = document.createElement('div')\r\n    if (overlaid) {\r\n      document.addEventListener('click', sidebarCloseListener, true)\r\n    } else {\r\n      backdrop.addEventListener('click', closeSidebar)\r\n    }\r\n    backdrop.className = 'c-sidebar-backdrop c-show'\r\n    backdrop.id = key + 'backdrop'\r\n    document.body.appendChild(backdrop)\r\n  }\r\n\r\n  const removeBackdrop = () => {\r\n    const backdrop = document.getElementById(key + 'backdrop')\r\n    if (backdrop) {\r\n      document.removeEventListener('click', sidebarCloseListener)\r\n      backdrop.removeEventListener('click', closeSidebar)\r\n      document.body.removeChild(backdrop)\r\n    }\r\n  }\r\n\r\n  const closeSidebar = () => {\r\n    onShowChange && onShowChange(overlaid ? false : 'responsive')\r\n    setIsOpen(overlaid ? false : 'responsive')\r\n  }\r\n\r\n  const isOnMobile = ()=>{\r\n    return Boolean(getComputedStyle(node.current).getPropertyValue('--is-mobile'))\r\n  }\r\n\r\n  const onSidebarClick = (e)=>{\r\n    const hiddingElementClicked = e.target.className.includes && e.target.className.includes('c-sidebar-nav-link')\r\n    if (\r\n      hiddingElementClicked &&\r\n      hideOnMobileClick &&\r\n      isOnMobile()\r\n    ) {\r\n      closeSidebar()\r\n    }\r\n  }\r\n\r\n  // render\r\n\r\n  const haveResponsiveClass = breakpoint && isOpen === 'responsive'\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar',\r\n    colorScheme ? `c-sidebar-${colorScheme}` : null,\r\n    isOpen===true ? 'c-sidebar-show' : null,\r\n    haveResponsiveClass ? `c-sidebar-${breakpoint}-show` : null,\r\n    fixed && !overlaid ? 'c-sidebar-fixed' : null,\r\n    aside ? 'c-sidebar-right' : null,\r\n    minimized && !unfoldable ? 'c-sidebar-minimized' : null,\r\n    minimized && unfoldable ? 'c-sidebar-unfoldable' : null,\r\n    overlaid ? 'c-sidebar-overlaid' : null,\r\n    size ? `c-sidebar-${size}` : null\r\n  )\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      dropdownMode,\r\n      scrollbarExist: !minimized || unfoldable,\r\n      toggleMinimize,\r\n      openDropdown, \r\n      setOpenDropdown\r\n    }}>\r\n      <div\r\n        {...attributes}\r\n        className={classes}\r\n        ref={reference}\r\n        onClick={onSidebarClick}\r\n      >\r\n        {children}\r\n      </div>\r\n    </Context.Provider>\r\n  )\r\n\r\n}\r\n\r\nCSidebar.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fixed: PropTypes.bool,\r\n  unfoldable: PropTypes.bool,\r\n  overlaid: PropTypes.bool,\r\n  breakpoint: PropTypes.oneOf([false, '', 'sm', 'md', 'lg', 'xl']),\r\n  minimize: PropTypes.bool,\r\n  show: PropTypes.oneOf(['', true, false, 'responsive']),\r\n  size: PropTypes.oneOf(['', 'sm', 'lg', 'xl']),\r\n  hideOnMobileClick: PropTypes.bool,\r\n  aside: PropTypes.bool,\r\n  colorScheme: PropTypes.string,\r\n  dropdownMode: PropTypes.oneOf([\r\n    '', 'openActive', 'close', 'closeInactive', 'noAction'\r\n  ]),\r\n  onShowChange: PropTypes.func,\r\n  onMinimizeChange: PropTypes.func\r\n}\r\n\r\nCSidebar.defaultProps = {\r\n  fixed: true,\r\n  breakpoint: 'lg',\r\n  show: 'responsive',\r\n  hideOnMobileClick: true,\r\n  colorScheme: 'dark',\r\n}\r\n\r\nexport default CSidebar\r\n"}},{"id":"2690e555-39ae-5b9e-8a84-6b3ec3c7f00e","name":"CSidebarBrand","fields":{"code":"/* eslint react/prop-types: 0 */\r\nimport React from 'react'\r\nimport CBrand from '../utils/CBrand'\r\n\r\n//component - CoreUI / CSidebarBrand\r\nconst CSidebarBrand = props => {\r\n  return (\r\n    <CBrand {...props} className={['c-sidebar-brand', props.className]}/>\r\n  )\r\n}\r\n\r\nexport default CSidebarBrand\r\n"}},{"id":"e782799a-fedc-5a0b-9375-8651933fd990","name":"CSidebarClose","fields":{"code":"import React from 'react'\r\nimport CButtonClose from '../button/CButtonClose'\r\n\r\n//component - CoreUI / CSidebarClose\r\n\r\nconst CSidebarClose = props => {\r\n  return (\r\n    <CButtonClose {...props} buttonClass={'c-sidebar-close'}>\r\n      <svg className=\"c-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n        <title>x</title>\r\n        <path d=\"M20.030 5.030l-1.061-1.061-6.97 6.97-6.97-6.97-1.061 1.061 6.97 6.97-6.97 6.97 1.061 1.061 6.97-6.97 6.97 6.97 1.061-1.061-6.97-6.97 6.97-6.97z\"></path>\r\n      </svg>\r\n    </CButtonClose>\r\n  )\r\n}\r\n\r\nexport default CSidebarClose\r\n"}},{"id":"4128611b-002d-505d-b13d-a27e93b35b27","name":"CSidebarFooter","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CSidebarFooter\r\n\r\nconst CSidebarFooter = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n  const classes = classNames('c-sidebar-footer', className)\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCSidebarFooter.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarFooter.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSidebarFooter\r\n"}},{"id":"11adb4d0-90dd-557e-b1bb-8ff1067bea1f","name":"CSidebarForm","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CSidebarForm\r\n\r\nconst CSidebarForm = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames('c-sidebar-form', className)\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCSidebarForm.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarForm.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSidebarForm\r\n"}},{"id":"28a00a21-ae5e-5b56-afd9-19b277124e4c","name":"CSidebarHeader","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CSidebarHeader\r\n\r\nconst CSidebarHeader = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames('c-sidebar-header', className)\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCSidebarHeader.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarHeader.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSidebarHeader\r\n"}},{"id":"fe45372e-5c2e-55f7-9876-c37d93150977","name":"CSidebarMinimizer","fields":{"code":"import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { Context } from './CSidebar'\r\n\r\n//component - CoreUI / CSidebarMinimizer\r\n\r\nconst CSidebarMinimizer = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  const { toggleMinimize } = useContext(Context)\r\n  //render\r\n\r\n  const classes = classNames('c-sidebar-minimizer', className)\r\n  return (\r\n    <button \r\n      className={classes} \r\n      type=\"button\" \r\n      {...attributes}\r\n      onClick={toggleMinimize}\r\n      ref={innerRef}\r\n    />\r\n  )\r\n}\r\n\r\nCSidebarMinimizer.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nexport default CSidebarMinimizer\r\n"}},{"id":"42386d3d-4183-5ff3-a00e-e7f04a7859fa","name":"CSidebarNav","fields":{"code":"import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CScrollbar from './CScrollbar'\r\nimport { Context } from './CSidebar'\r\n\r\n//component - CoreUI / CSidebarNav\r\nconst CSidebarNav = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const { scrollbarExist } = useContext(Context)\r\n\r\n  const navClasses = classNames('c-sidebar-nav', 'h-100', className)\r\n\r\n  //state\r\n\r\n  const isRtl = getComputedStyle(document.querySelector('html')).direction === 'rtl'\r\n  return <CScrollbar\r\n    settings={{ suppressScrollX: !isRtl }} \r\n    className={navClasses} \r\n    innerRef={innerRef}\r\n    switcher={scrollbarExist}\r\n    tag=\"ul\" \r\n    {...attributes}\r\n  />\r\n}\r\n\r\nCSidebarNav.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nexport default CSidebarNav\r\n"}},{"id":"5eb81ce2-9da5-5d1c-810d-41a675396988","name":"CSidebarNavDivider","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CSidebarNavDivider\r\n\r\nconst CSidebarNavDivider = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    'c-sidebar-nav-divider',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <li className={classes} {...attributes} ref={innerRef} />\r\n  )\r\n\r\n}\r\n\r\nCSidebarNavDivider.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\n\r\nexport default CSidebarNavDivider\r\n"}},{"id":"1b8169af-d2ab-51a3-82e1-7a8e6d6ce182","name":"CSidebarNavDropdown","fields":{"code":"import React, {\r\n  useState,\r\n  useContext,\r\n  useEffect,\r\n  createRef\r\n} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport { Context } from './CSidebar'\r\n\r\nexport const iconProps = (icon) => {\r\n  if (typeof icon === 'object') {\r\n    const key = icon.size ? 'className' : 'customClasses'\r\n    return {\r\n      ...icon,\r\n      [`${key}`]: icon.customClasses || `c-sidebar-nav-icon ${icon.className}`\r\n    }\r\n  } else {\r\n    return {\r\n      customClasses: 'c-sidebar-nav-icon',\r\n      name: icon\r\n    }\r\n  }\r\n}\r\n\r\n//component - CoreUI / CSidebarNavDropdown\r\nconst CSidebarNavDropdown = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    icon,\r\n    fontIcon,\r\n    name,\r\n    show,\r\n    route,\r\n    ...attributes\r\n  } = props\r\n\r\n  const ref = createRef()\r\n  innerRef && innerRef(ref)\r\n\r\n  const { dropdownMode, openDropdown, setOpenDropdown } = useContext(Context)\r\n\r\n  const [isOpen, setIsOpen] = useState(show)\r\n  useEffect(() => {\r\n    setIsOpen(show)\r\n  }, [show])\r\n\r\n  useEffect(() => {\r\n    !dropdownMode && (!openDropdown || !ref.current.contains(openDropdown)) && setIsOpen(false)\r\n  }, [openDropdown])\r\n\r\n  const toggle = () => {\r\n    !dropdownMode && setOpenDropdown(\r\n      isOpen ? ref.current.parentNode.closest('.c-sidebar-nav-dropdown') : ref.current\r\n    )\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  let path = ''\r\n  try {\r\n    path = useLocation().pathname\r\n  } catch (e) {\r\n    console.warn(e)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (dropdownMode === 'close') {\r\n      setIsOpen(false)\r\n    } else if (dropdownMode === 'closeInactive' && route) {\r\n      setIsOpen(path.includes(route))\r\n    } else if ((!dropdownMode || dropdownMode !== 'noAction') && !isOpen && route) {\r\n      setIsOpen(path.includes(route))\r\n    }\r\n  }, [path])\r\n\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'c-sidebar-nav-dropdown',\r\n    isOpen && 'c-show',\r\n    className\r\n  )\r\n      \r\n  const iconClasses = classNames(\r\n    'c-sidebar-nav-icon',\r\n    fontIcon\r\n  )\r\n\r\n  return (\r\n    <li \r\n      className={classes} \r\n      {...attributes} \r\n      ref={ref}\r\n    >\r\n      <a className=\"c-sidebar-nav-dropdown-toggle\" onClick={toggle} >\r\n        { icon && <CIcon {...iconProps(icon)} /> }\r\n        { fontIcon && <i className={iconClasses}/> }\r\n        { name }\r\n      </a>\r\n      <ul className=\"c-sidebar-nav-dropdown-items\">\r\n        {children}\r\n      </ul>\r\n    </li>\r\n  )\r\n}\r\n\r\nCSidebarNavDropdown.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  name: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  fontIcon: PropTypes.string,\r\n  show: PropTypes.bool,\r\n  route: PropTypes.string\r\n};\r\n\r\n\r\nexport default CSidebarNavDropdown\r\n"}},{"id":"31bdc7b2-c1be-5cda-bdbc-38e0f1212eda","name":"CSidebarNavItem","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { CLink, CBadge } from '../index'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { iconProps } from './CSidebarNavDropdown'\r\n\r\n//component - CoreUI / CSidebarNavItem\r\nconst CSidebarNavItem = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    name,\r\n    icon,\r\n    fontIcon,\r\n    badge,\r\n    addLinkClass,\r\n    label,\r\n    color,\r\n    ...rest\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'c-sidebar-nav-item',\r\n    className\r\n  )\r\n\r\n  const linkClasses = classNames(\r\n    label ? 'c-sidebar-nav-label' : 'c-sidebar-nav-link',\r\n    color && `c-sidebar-nav-link-${color}`,\r\n    addLinkClass\r\n  )\r\n\r\n  const routerLinkProps = rest.to && { exact: true, activeClassName: 'c-active'}\r\n  return (\r\n    <li className={classes} ref={innerRef}>\r\n      { children || \r\n        <CLink\r\n          className={linkClasses}\r\n          {...routerLinkProps}\r\n          {...rest}\r\n        >\r\n          { icon && <CIcon {...iconProps(icon)}/>}\r\n          { fontIcon && <i className={`c-sidebar-nav-icon ${fontIcon}`}/>}\r\n          {name}\r\n          { badge && <CBadge {...{...badge, text: null}}>{badge.text}</CBadge>}\r\n        </CLink>\r\n      }\r\n  </li>\r\n  )\r\n}\r\n\r\nCSidebarNavItem.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  fontIcon: PropTypes.string,\r\n  badge: PropTypes.object,\r\n  addLinkClass: PropTypes.string,\r\n  label: PropTypes.bool,\r\n  name: PropTypes.string,\r\n  color: PropTypes.string\r\n}\r\n\r\nexport default CSidebarNavItem\r\n"}},{"id":"988a106b-78c8-544b-8989-3a656033ee60","name":"CSidebarNavTitle","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CSidebarNavTitle\r\n\r\nconst CSidebarNavTitle = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'c-sidebar-nav-title',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <li className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCSidebarNavTitle.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\n\r\nexport default CSidebarNavTitle\r\n"}},{"id":"45d3acb8-0894-5943-8056-1f27e5988987","name":"CSpinner","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CSpinner\r\n\r\nconst CSpinner = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    grow,\r\n    size,\r\n    color,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const type = grow ? 'grow' : 'border'\r\n\r\n  const classes = classNames(\r\n    `spinner-${type}`,\r\n    size && `spinner-${type}-${size}`,\r\n    color && `text-${color}`,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <Tag \r\n      className={classes} \r\n      aria-hidden=\"false\" \r\n      aria-label=\"Loading\" \r\n      role=\"status\" \r\n      {...attributes}\r\n      ref={innerRef}\r\n    />\r\n  )\r\n}\r\n\r\nCSpinner.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  grow: PropTypes.bool,\r\n  size: PropTypes.string,\r\n  color: PropTypes.string\r\n};\r\n\r\nCSpinner.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSpinner\r\n"}},{"id":"cbf6a406-7b02-5ea2-a2a4-f4e5b623570f","name":"CSubheader","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CSubheader\r\nconst CSubheader = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'c-subheader',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCSubheader.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSubheader.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSubheader\r\n"}},{"id":"ebe58fb7-e4df-5075-97dc-5fa3544826f8","name":"CSwitch","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CSwitch\r\nconst CSwitch = props => {\r\n\r\n  let {\r\n    className,\r\n    //\r\n    innerRef,\r\n    size,\r\n    color,\r\n    labelOn,\r\n    labelOff,\r\n    variant,\r\n    shape,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'c-switch form-check-label',\r\n    (labelOn || labelOff) && 'c-switch-label',\r\n    size && `c-switch-${size}`,\r\n    shape && `c-switch-${shape}`,\r\n    color && `c-switch${variant ? `-${variant}` : ''}-${color}`,\r\n    className\r\n  )\r\n\r\n  const inputClasses = classNames(\r\n    'c-switch-input',\r\n    'c-form-check-input'\r\n  )\r\n\r\n  return (\r\n    <label className={classes}>\r\n      <input \r\n        className={inputClasses} \r\n        type=\"checkbox\" \r\n        {...attributes}\r\n        ref={innerRef}\r\n      />\r\n      <span \r\n        className=\"c-switch-slider\"\r\n        data-checked={labelOn}\r\n        data-unchecked={labelOff}\r\n      />\r\n    </label>\r\n  )\r\n}\r\n\r\nCSwitch.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  size: PropTypes.oneOf(['', 'lg', 'sm']),\r\n  shape: PropTypes.oneOf(['', 'pill', 'square']),\r\n  variant: PropTypes.oneOf(['', '3d', 'opposite', 'outline']),\r\n  color: PropTypes.string,\r\n  labelOn: PropTypes.string,\r\n  labelOff: PropTypes.string,\r\n}\r\n\r\nexport default CSwitch\r\n"}},{"id":"2119619a-31e4-5b9b-8316-03eb935797d6","name":"CTabContent","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n//component - CoreUI / CTabContent\r\nexport const Context = React.createContext()\r\n\r\nconst CTabContent = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    fade,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n  const classes = classNames('tab-content',className)\r\n\r\n  return (\r\n    <Context.Provider value={fade}>\r\n      <div className={classes} {...attributes} ref={innerRef}/>\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nCTabContent.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fade: PropTypes.bool\r\n}\r\n\r\nCTabContent.defaultProps = {\r\n  fade: true\r\n}\r\n\r\nexport default CTabContent\r\n"}},{"id":"b1a3736d-20ca-5384-aca4-f6f3c30b6890","name":"CTabPane","fields":{"code":"import React, { useState, useContext, createRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CFade from '../fade/CFade'\r\nimport { omitByKeys } from '@coreui/utils/src'\r\nimport { CFadeProps } from '../utils/helper.js'\r\n\r\nimport { Context } from './CTabs.js'\r\nimport { Context as FadeContext } from './CTabContent.js'\r\n\r\n//component - CoreUI / CTabPane\r\nconst getIndex = (el) => Array.from(el.parentNode.children).indexOf(el)\r\n\r\nconst getState = r => r.current.dataset.tab || getIndex(r.current)\r\n\r\nconst CTabPane = props => {\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    active,\r\n    ...attributes\r\n  } = props\r\n\r\n  const context = useContext(Context)\r\n  const fade = useContext(FadeContext)\r\n  const act = (context || {}).active\r\n  const ref = createRef()\r\n  innerRef && innerRef(ref)\r\n  const [isActive, setIsActive] = useState(active)\r\n\r\n  useEffect(() => {\r\n    setIsActive(active !== undefined ? active : act === getState(ref))\r\n  }, [act, active])\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'tab-pane',\r\n    { 'active': isActive },\r\n    className\r\n  )\r\n\r\n  const attrs = omitByKeys(attributes, CFadeProps)\r\n\r\n  return (\r\n    <CFade\r\n      in={isActive}\r\n      baseClass={fade ? 'fade' : ''}\r\n      className={classes} \r\n      {...attrs} \r\n      innerRef={ref}\r\n    />\r\n  )\r\n}\r\n\r\nCTabPane.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  active: PropTypes.bool,\r\n}\r\n\r\nexport default CTabPane\r\n"}},{"id":"61fbd8f8-e75f-52b5-8c35-ba6ebfb604ff","name":"CTabs","fields":{"code":"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//component - CoreUI / CTabPane\r\nexport const Context = React.createContext()\r\n\r\nconst CTabs = props => {\r\n  const {\r\n    children,\r\n    activeTab,\r\n    onActiveTabChange\r\n  } = props\r\n\r\n  const [active, setActive] = useState()\r\n  useEffect(() => setActive(activeTab), [activeTab])\r\n\r\n  const setActiveTab = (tab) => {\r\n    onActiveTabChange && onActiveTabChange(tab)\r\n    setActive(tab)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Context.Provider value={{active, setActiveTab}}>\r\n        {children}\r\n      </Context.Provider>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nCTabs.propTypes = {\r\n  children: PropTypes.node,\r\n  activeTab: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  onActiveTabChange: PropTypes.func,\r\n}\r\n\r\nCTabs.defaultProps = {\r\n  activeTab: 0\r\n}\r\n\r\nexport default CTabs\r\n"}},{"id":"d4aceacd-fbfe-58c1-890d-1721d670a0c0","name":"CToast","fields":{"code":"import React, { useState, useRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CFade from '../fade/CFade'\r\nimport { omitByKeys } from '@coreui/utils/src'\r\nimport { CFadeProps } from '../utils/helper.js'\r\nimport './CToast.css'\r\n\r\nexport const Context = React.createContext({})\r\n\r\n//component - CoreUI / CToast\r\nconst CToast = props => {\r\n\r\n  const {\r\n    className,\r\n    children,\r\n    //\r\n    innerRef,\r\n    show,\r\n    autohide,\r\n    fade,\r\n    onStateChange,\r\n    ...attributes\r\n  } = props\r\n\r\n  const [state, setState] = useState(show)\r\n  const timeout = useRef()\r\n\r\n  useEffect(() => {\r\n    setState(show)\r\n  }, [show])\r\n\r\n  //triggered on mount and destroy\r\n  useEffect(() => () => clearTimeout(timeout.current), [])\r\n\r\n  useEffect(() => {\r\n    if (state === true && autohide) {\r\n      setAutohide()\r\n    }\r\n    onStateChange && onStateChange(state)\r\n  }, [state])\r\n\r\n  const setAutohide = () => {\r\n    clearTimeout(timeout.current)\r\n    timeout.current = setTimeout(() => {\r\n      startAutohide()\r\n    }, autohide)\r\n  }\r\n\r\n  const onMouseOver = () => {\r\n    if (state !== 'closing') {\r\n      state !== true && setState(true)\r\n      clearTimeout(timeout.current)\r\n    }\r\n  }\r\n\r\n  const onMouseOut = () => {\r\n    if (autohide && state !== 'closing') {\r\n      setAutohide()\r\n    }\r\n  }\r\n\r\n  const startAutohide = () => {\r\n    if (!fade) {\r\n      return setState(false)\r\n    }\r\n    setState('hiding')\r\n    clearTimeout(timeout.current)\r\n    timeout.current = setTimeout(() => {\r\n      setState(false)\r\n    }, 2000)\r\n  }\r\n\r\n  const close = () => {\r\n    if (!fade) {\r\n      return setState(false)\r\n    }\r\n    setState('closing')\r\n    clearTimeout(timeout.current)\r\n    timeout.current = setTimeout(() => {\r\n      setState(false)\r\n    }, 500)\r\n  }\r\n\r\n  // render\r\n  const classes = classNames('toast', className)\r\n\r\n  const fadeClasses = classNames(\r\n    fade && (state === 'hiding' ? 'toast-fade-slow' : 'toast-fade')\r\n  )\r\n\r\n  const attrs = omitByKeys(attributes, CFadeProps)\r\n  return (\r\n    <Context.Provider value={{ close }}>\r\n      {\r\n        state && <CFade\r\n          className={classes}   \r\n          role=\"alert\"\r\n          aria-live=\"assertive\"\r\n          aria-atomic=\"true\"\r\n          in={state === true}\r\n          onMouseOver={onMouseOver}\r\n          onMouseOut={onMouseOut}\r\n          baseClass={fadeClasses}\r\n          innerRef={innerRef}\r\n          {...attrs}\r\n        >\r\n          {children}\r\n        </CFade>\r\n      }  \r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nCToast.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  show: PropTypes.bool,\r\n  autohide: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\r\n  fade: PropTypes.bool,\r\n  onStateChange: PropTypes.func\r\n};\r\n\r\nCToast.defaultProps = {\r\n  fade: true\r\n};\r\n\r\nexport default CToast\r\n"}},{"id":"015d5290-1308-5342-8e33-7e95fe1b5d3b","name":"CToastBody","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CToastBody\r\n\r\nconst CToastBody = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props\r\n\r\n  //render\r\n  const classes = classNames(\r\n    'toast-body', className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCToastBody.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default CToastBody\r\n"}},{"id":"f4c84a66-63b6-578e-8642-6d90cfdf617a","name":"CToastHeader","fields":{"code":"import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CButtonClose from '../button/CButtonClose'\r\n\r\nimport { Context } from './CToast'\r\n\r\n//component - CoreUI / CToastHeader\r\nconst CToastHeader = props => {\r\n\r\n  const {\r\n    className,\r\n    children,\r\n    //\r\n    innerRef,\r\n    closeButton,\r\n    ...attributes\r\n  } = props\r\n\r\n  const { close } = useContext(Context)\r\n  \r\n  //render\r\n  const classes = classNames(\r\n    'toast-header', className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}>\r\n      { children }\r\n      { closeButton && \r\n        <CButtonClose className=\"ml-auto\" onClick={close}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nCToastHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  closeButton: PropTypes.bool\r\n};\r\n\r\nCToastHeader.defaultProps = {\r\n  closeButton: true\r\n};\r\n\r\nexport default CToastHeader\r\n"}},{"id":"653bc527-7b45-5056-a926-256404e513ab","name":"CToaster","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CToaster\r\n\r\nconst CToaster = props => {\r\n\r\n  const {\r\n    className,\r\n    //\r\n    innerRef,\r\n    position,\r\n    ...attributes\r\n  } = props\r\n\r\n  // inherit closeButton, autohide, fade??\r\n  // render\r\n  const classes = classNames(\r\n    'toaster',\r\n    position && position !== 'static' && 'toaster-' + position,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}/>\r\n  )\r\n}\r\n\r\nCToaster.propTypes = {\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  position: PropTypes.oneOf([\r\n    '', 'static', 'top-right', 'top-left', 'top-center', 'top-full',\r\n    'bottom-right', 'bottom-left', 'bottom-center', 'bottom-full'\r\n  ])\r\n};\r\n\r\nCToaster.defaultProps = {\r\n  position: 'top-right'\r\n};\r\n\r\nexport default CToaster\r\n"}},{"id":"d1bbb437-3e86-552f-8650-9b25a449249f","name":"CToggler","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { tagPropType } from '../utils/helper.js'\r\n\r\n//component - CoreUI / CToggler\r\n\r\nconst CToggler = props => {\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    inHeader,\r\n    inNavbar,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const typeAttr = Tag === 'button' ? { type: 'button' } : null\r\n  const type = inNavbar ? 'navbar' : inHeader ? 'c-header' : null \r\n  const togglerClass = type ? `${type}-toggler` : ''\r\n  const iconClass = type ? `${togglerClass}-icon` : ''\r\n\r\n  //render\r\n  const classes = classNames(\r\n    togglerClass, className,\r\n  )\r\n\r\n  return (\r\n    <Tag className={classes} {...typeAttr} {...attributes} ref={innerRef}>\r\n      {children || <span className={iconClass}/>}\r\n    </Tag>\r\n  )\r\n\r\n}\r\n\r\nCToggler.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  inHeader: PropTypes.bool,\r\n  inNavbar: PropTypes.bool,\r\n};\r\n\r\nCToggler.defaultProps = {\r\n  tag: 'button'\r\n};\r\n\r\nexport default CToggler\r\n"}},{"id":"f3b019b0-1b17-50a8-8458-c64fb8e6a0fb","name":"CTooltip","fields":{"code":"import React, {useState, useEffect, useRef, useCallback} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport tippy from 'tippy.js'\r\nimport 'tippy.js/dist/tippy.css'\r\nimport { renderToString } from 'react-dom/server'\r\n\r\n//component - CoreUI / CTooltip\r\nconst CTooltip = props=>{\r\n\r\n  let {\r\n    //\r\n    children,\r\n    content,\r\n    interactive,\r\n    placement,\r\n    trigger,\r\n    advancedOptions\r\n  } = props\r\n\r\n  const computedContent = useCallback(\r\n    () => typeof content === 'string' ? content : renderToString(content),\r\n    [content]\r\n  )\r\n\r\n  const config = {\r\n    allowHTML: true,\r\n    content: computedContent,\r\n    interactive,\r\n    placement,\r\n    trigger,\r\n    ...advancedOptions\r\n  }\r\n\r\n  const key = useState(Math.random().toString(36).substr(2))[0]\r\n  const instance = useRef()\r\n  \r\n  useEffect(() => {\r\n    if (instance.current) {\r\n      instance.current.setProps(config)\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    const node = document.querySelector(`[data-tooltip=\"${key}\"]`)\r\n    instance.current = tippy(node, config)\r\n    return () => instance.current.destroy()\r\n  }, [key])\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        React.cloneElement(children, {\r\n          'data-tooltip': key\r\n        })\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nCTooltip.propTypes = {\r\n  children: PropTypes.node,\r\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n  interactive: PropTypes.bool,\r\n  placement: PropTypes.oneOf([\r\n    '', 'top-end', 'top', 'top-start',\r\n    'bottom-end', 'bottom', 'bottom-start',\r\n    'right-start', 'right', 'right-end',\r\n    'left-start', 'left', 'left-end'\r\n  ]),\r\n  trigger: PropTypes.string,\r\n  advancedOptions: PropTypes.object\r\n}\r\n\r\nCTooltip.defaultProps = {\r\n  content: '',\r\n  interactive: false,\r\n  placement: 'top',\r\n  trigger: 'mouseenter focus',\r\n  advancedOptions: {}\r\n}\r\n\r\nexport default CTooltip\r\n"}},{"id":"7c263678-d5f7-5531-8646-bb0aab5b3ad9","name":"CWidgetBrand","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CWidgetBrand\r\n\r\nconst CWidgetBrand = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    color,\r\n    rightHeader,\r\n    rightFooter,\r\n    leftHeader,\r\n    leftFooter,\r\n    addHeaderClasses,\r\n    bodySlot,\r\n    ...attributes\r\n  } = props\r\n\r\n  // render\r\n\r\n  const headerClasses = classNames(\r\n      'card-header content-center text-white p-0',\r\n      color && `bg-${color}`,\r\n      addHeaderClasses\r\n  )\r\n\r\n  return (\r\n    <div className={`card ${className}`} {...attributes}>\r\n      <div className={headerClasses}>\r\n        {children}\r\n      </div>\r\n      { bodySlot ||\r\n        <div className=\"card-body row text-center\">\r\n          <div className=\"col\">\r\n            {\r\n              rightHeader && <div className=\"text-value-lg\">{rightHeader}</div>\r\n            }\r\n            {\r\n              rightFooter && \r\n              <div className=\"text-uppercase text-muted small\">\r\n                {rightFooter}\r\n              </div>\r\n            }\r\n          </div>\r\n          <div className=\"c-vr\"></div>\r\n          <div className=\"col\">\r\n            {\r\n              leftHeader && <div className=\"text-value-lg\">{leftHeader}</div>\r\n            }\r\n            {\r\n              leftFooter && <div className=\"text-uppercase text-muted small\">\r\n                {leftFooter}\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nCWidgetBrand.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string,\r\n  rightHeader: PropTypes.string,\r\n  rightFooter: PropTypes.string,\r\n  leftHeader: PropTypes.string,\r\n  leftFooter: PropTypes.string,\r\n  addHeaderClasses: PropTypes.oneOfType([String, Array, Object]),\r\n  bodySlot: PropTypes.node\r\n};\r\n\r\nexport default CWidgetBrand\r\n"}},{"id":"69882aec-57e9-5a5b-88d2-96776fc98cfc","name":"CWidgetDropdown","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CWidgetDropdown\r\n\r\nconst CWidgetDropdown = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    header,\r\n    color,\r\n    footerSlot,\r\n    text,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    'card text-white', color && `bg-${color}`, className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes}>\r\n      <div className=\"card-body pb-0 d-flex justify-content-between\">\r\n        <div>\r\n          { header && <div className=\"text-value-lg\">{header}</div>}\r\n          { text && <div>{text}</div>}\r\n        </div>\r\n        { children }\r\n      </div>\r\n      { footerSlot }\r\n    </div>\r\n  )\r\n}\r\n\r\nCWidgetDropdown.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  color: PropTypes.string,\r\n  footerSlot: PropTypes.node,\r\n  text: PropTypes.string,\r\n};\r\n\r\nexport default CWidgetDropdown\r\n"}},{"id":"f9fef0a3-237c-5920-8e35-cb09555ba6e3","name":"CWidgetIcon","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CWidgetIcon\r\n\r\nconst CWidgetIcon = props => {\r\n\r\n  const {\r\n    className,\r\n    children,\r\n    //\r\n    header,\r\n    text,\r\n    iconPadding,\r\n    color,\r\n    footerSlot,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    'card', color, className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes}>\r\n      <div className={`card-body d-flex align-items-center ${iconPadding ? 'p-3' : 'p-0'}`}>\r\n        <div className={`mr-3 text-white bg-${color} ${iconPadding ? 'p-3' : 'p-4'}`}>\r\n          {children}\r\n        </div>\r\n        <div>\r\n          {header && <div className={`text-value text-${color}`}>{header}</div>}\r\n          {text && <div className=\"text-muted text-uppercase font-weight-bold small\">\r\n            {text}</div>}\r\n        </div>\r\n      </div>\r\n      { footerSlot }\r\n    </div>\r\n  )\r\n}\r\n\r\nCWidgetIcon.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  text: PropTypes.string,\r\n  iconPadding: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  footerSlot: PropTypes.node\r\n};\r\n\r\nCWidgetIcon.defaultProps = {\r\n  iconPadding: true\r\n};\r\n\r\nexport default CWidgetIcon\r\n"}},{"id":"a6d67bb6-0a55-5ce9-b573-1b9069ff6bbb","name":"CWidgetProgress","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CProgress from '../progress/CProgress'\r\n\r\n//component - CoreUI / CWidgetProgress\r\nconst CWidgetProgress = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    header,\r\n    text,\r\n    footer,\r\n    color,\r\n    value,\r\n    inverse,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    'card', \r\n    inverse ? [color && `bg-${color}`, 'text-white'] : '',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes}>\r\n      <div className=\"card-body\">\r\n        { header && <div className=\"h4 m-0\">{header}</div>}\r\n        { text && <div>{text}</div>}\r\n        {\r\n          children || <CProgress\r\n            color={!inverse ? color : ''}\r\n            value={value}\r\n            className={`progress-xs my-3 mb-0 ${inverse ? 'progress-white' : ''}`}\r\n          />\r\n        }\r\n        { footer && <small className=\"text-muted\">{footer}</small>}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nCWidgetProgress.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  text: PropTypes.string,\r\n  footer: PropTypes.string,\r\n  color: PropTypes.string,\r\n  value: PropTypes.number,\r\n  inverse: PropTypes.bool,\r\n};\r\n\r\nCWidgetProgress.defaultProps = {\r\n  value: 25\r\n};\r\n\r\nexport default CWidgetProgress;\r\n"}},{"id":"52edb6c0-18e2-50ca-bcb1-4394ab45eace","name":"CWidgetProgressIcon","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport CProgress from '../progress/CProgress'\r\n\r\n//component - CoreUI / CWidgetProgressIcon\r\nconst CWidgetProgressIcon = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    header,\r\n    text,\r\n    value,\r\n    color,\r\n    inverse,\r\n    progressSlot,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    'card',\r\n    inverse ? [color && `bg-${color}`, 'text-white'] : '',\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes}>\r\n      <div className=\"card-body\">\r\n        { children && <div className=\"h1 text-muted text-right mb-4\">{children}</div>}\r\n        { header && <div className=\"h4 m-0\">{header}</div>}\r\n        { text && <small className=\"text-muted text-uppercase font-weight-bold\">\r\n          {text}</small>}\r\n        {\r\n          progressSlot || < CProgress\r\n            color={!inverse ? color : ''}\r\n            value={value}\r\n            className={`progress-xs my-3 mb-0 ${inverse ? 'progress-white' : ''}`}\r\n          />\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCWidgetProgressIcon.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  text: PropTypes.string,\r\n  color: PropTypes.string,\r\n  value: PropTypes.number,\r\n  inverse: PropTypes.bool,\r\n  progressSlot: PropTypes.node\r\n};\r\n\r\nCWidgetProgressIcon.defaultProps = {\r\n  value: 25\r\n};\r\n\r\nexport default CWidgetProgressIcon\r\n"}},{"id":"5191d1d8-a888-59a6-882b-57ee6bfb5da4","name":"CWidgetSimple","fields":{"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n//component - CoreUI / CWidgetSimple\r\nconst CWidgetSimple = props => {\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    //\r\n    header,\r\n    text,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    'card', className\r\n  )\r\n\r\n  return (\r\n    <div className={classes} {...attributes}>\r\n      <div className=\"card-body text-center\">\r\n        { header && <div className=\"text-muted small text-uppercase font-weight-bold\">\r\n          {header}</div>}\r\n        { text && <div className=\"h2 py-3\">{text}</div>}\r\n        { children }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCWidgetSimple.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default CWidgetSimple\r\n"}},{"id":"80f8218a-b18d-52dd-868f-91b28888839f","name":"helper","fields":{"code":"import PropTypes from 'prop-types'\r\n\r\n// Duplicated Transition.propType keys to ensure that Reactstrap builds\r\n// for distribution properly exclude these keys for nested child HTML attributes\r\n// since `react-transition-group` removes propTypes in production builds.\r\nexport const TransitionPropTypeKeys = [\r\n  'in',\r\n  'mountOnEnter',\r\n  'unmountOnExit',\r\n  'appear',\r\n  'enter',\r\n  'exit',\r\n  'timeout',\r\n  'onEnter',\r\n  'onEntering',\r\n  'onEntered',\r\n  'onExit',\r\n  'onExiting',\r\n  'onExited'\r\n];\r\n\r\nexport const CFadeProps = [\r\n  ...TransitionPropTypeKeys,\r\n  'baseClass',\r\n  'baseClassActive',\r\n  'tag'\r\n]\r\n\r\nexport const canUseDOM = !!(\r\n  typeof window !== 'undefined' &&\r\n  window.document &&\r\n  window.document.createElement\r\n);\r\n\r\nexport const targetPropType = PropTypes.oneOfType([\r\n  PropTypes.string,\r\n  PropTypes.func,\r\n  DOMElement,\r\n  PropTypes.shape({ current: PropTypes.any }),\r\n]);\r\n\r\nexport const tagPropType = PropTypes.oneOfType([\r\n  PropTypes.func,\r\n  PropTypes.string,\r\n  PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\r\n  PropTypes.arrayOf(PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.string,\r\n    PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\r\n  ]))\r\n]);\r\n\r\n\r\nexport function DOMElement(props, propName, componentName) {\r\n  if (!(props[propName] instanceof Element)) {\r\n    return new Error(\r\n      'Invalid prop `' +\r\n        propName +\r\n        '` supplied to `' +\r\n        componentName +\r\n        '`. Expected prop to be an instance of Element. Validation failed.'\r\n    );\r\n  }\r\n}\r\n\r\nexport function deprecated(propType, explanation) {\r\n  return function validate(props, propName, componentName, ...rest) {\r\n    if (props[propName] !== null && typeof props[propName] !== 'undefined') {\r\n      console.error(\r\n        `\"${propName}\" property of \"${componentName}\" has been deprecated.\\n${explanation}`\r\n      )\r\n    }\r\n    return propType(props, propName, componentName, ...rest);\r\n  }\r\n}"}},{"id":"66044656-401d-50f5-b247-2fedf3ca1578","name":"index","fields":{"code":"export {default as CAlert} from './alert/CAlert';\r\nexport {default as CBadge} from './badge/CBadge';\r\nexport {default as CButton} from './button/CButton';\r\nexport {default as CButtonClose} from './button/CButtonClose';\r\nexport {default as CButtonGroup} from './button/CButtonGroup';\r\nexport {default as CButtonToolbar} from './button/CButtonToolbar';\r\nexport {default as CBreadcrumb} from './breadcrumb/CBreadcrumb';\r\nexport {default as CBreadcrumbRouter} from './breadcrumb/CBreadcrumbRouter';\r\nexport {default as CBreadcrumbItem} from './breadcrumb/CBreadcrumbItem';\r\nexport {default as CCallout} from './callout/CCallout';\r\nexport {default as CCard} from './card/CCard';\r\nexport {default as CCardBody} from './card/CCardBody';\r\nexport {default as CCardHeader} from './card/CCardHeader';\r\nexport {default as CCardFooter} from './card/CCardFooter';\r\nexport {default as CCardGroup} from './card/CCardGroup';\r\nexport {default as CCardImg} from './card/CCardImg';\r\nexport {default as CCardImgOverlay} from './card/CCardImgOverlay';\r\nexport {default as CCardLink} from './card/CCardLink';\r\nexport {default as CCardTitle} from './card/CCardTitle';\r\nexport {default as CCardSubtitle} from './card/CCardSubtitle';\r\nexport {default as CCardText} from './card/CCardText';\r\nexport {default as CCarousel} from './carousel/CCarousel';\r\nexport {default as CCarouselItem} from './carousel/CCarouselItem';\r\nexport {default as CCarouselControl} from './carousel/CCarouselControl';\r\nexport {default as CCarouselIndicators} from './carousel/CCarouselIndicators';\r\nexport {default as CCarouselCaption} from './carousel/CCarouselCaption';\r\nexport {default as CCarouselInner} from './carousel/CCarouselInner';\r\nexport {default as CCollapse} from './collapse/CCollapse';\r\nexport {default as CCreateElement} from './create-element/CCreateElement';\r\nexport {default as CDropdown} from './dropdown/CDropdown';\r\nexport {default as CDropdownDivider} from './dropdown/CDropdownDivider';\r\nexport {default as CDropdownHeader} from './dropdown/CDropdownHeader';\r\nexport {default as CDropdownItem} from './dropdown/CDropdownItem';\r\nexport {default as CDropdownMenu} from './dropdown/CDropdownMenu';\r\nexport {default as CDropdownToggle} from './dropdown/CDropdownToggle';\r\nexport {default as CElementCover} from './element-cover/CElementCover';\r\nexport {default as CEmbed} from './embed/CEmbed';\r\nexport {default as CEmbedItem} from './embed/CEmbedItem';\r\nexport {default as CFade} from './fade/CFade';\r\nexport {default as CForm} from './form/CForm';\r\nexport { CValidFeedback, CInvalidFeedback } from './form/CFormFeedback';\r\nexport {default as CLabel} from './form/CLabel';\r\nexport {default as CFormGroup} from './form/CFormGroup';\r\nexport {default as CFormText} from './form/CFormText';\r\nexport {\r\n  CTextarea,\r\n  CInput,\r\n  CInputFile,\r\n  CInputCheckbox,\r\n  CInputRadio,\r\n  CSelect\r\n}\r\nfrom './form/CInput';\r\nexport {default as CInputGroup} from './form/CInputGroup';\r\nexport {CInputGroupPrepend} from './form/CInputGroupAddon';\r\nexport {CInputGroupAppend} from './form/CInputGroupAddon';\r\nexport {default as CInputGroupText} from './form/CInputGroupText';\r\nexport {default as CRow} from './grid/CRow';\r\nexport {default as CCol} from './grid/CCol';\r\nexport {default as CContainer} from './grid/CContainer';\r\nexport {default as CImg} from './image/CImg';\r\nexport {default as CJumbotron} from './jumbotron/CJumbotron';\r\nexport {default as CLink} from './link/CLink';\r\nexport {default as CListGroup} from './list-group/CListGroup';\r\nexport {default as CListGroupItem} from './list-group/CListGroupItem';\r\nimport React from 'react'\r\nconst wrapper = props => {\r\n  console.warn('CListGroupItemText component is deprecated, please use div tag instead')\r\n  return <div {...props}></div>\r\n}\r\nconst heading = props => {\r\n  console.warn('CListGroupItemHeading component is deprecated, please use h5 tag instead')\r\n  return <h5 {...props}></h5>\r\n}\r\nexport { wrapper as CListGroupItemText};\r\nexport { heading as CListGroupItemHeading};\r\nexport {default as CMedia} from './media/CMedia';\r\nexport {default as CMediaBody} from './media/CMediaBody';\r\nexport {default as CModal} from './modal/CModal';\r\nexport {default as CModalBody} from './modal/CModalBody';\r\nexport {default as CModalHeader} from './modal/CModalHeader';\r\nexport {default as CModalFooter} from './modal/CModalFooter';\r\nexport {default as CModalTitle} from './modal/CModalTitle';\r\nexport {default as CNav} from './nav/CNav';\r\nexport {default as CNavItem} from './nav/CNavItem';\r\nexport {default as CNavLink} from './nav/CNavLink';\r\nexport {default as CNavbarBrand} from './navbar/CNavbarBrand';\r\nexport {default as CNavbar} from './navbar/CNavbar';\r\nexport {default as CNavbarNav} from './navbar/CNavbarNav';\r\nexport {default as CNavbarText} from './navbar/CNavbarText';\r\nexport {default as CPagination} from './pagination/CPagination';\r\nexport {default as CProgress} from './progress/CProgress';\r\nexport {default as CProgressBar} from './progress/CProgressBar';\r\nexport {default as CSpinner} from './spinner/CSpinner';\r\nexport {default as CSwitch} from './switch/CSwitch';\r\nexport {default as CDataTable} from './table/CDataTable';\r\nexport {default as CTabs} from './tabs/CTabs';\r\nexport {default as CTabPane} from './tabs/CTabPane';\r\nexport {default as CTabContent} from './tabs/CTabContent';\r\nexport {default as CFooter} from './template/CFooter';\r\nexport {default as CHeader} from './template/CHeader';\r\nexport {default as CHeaderNav} from './template/CHeaderNav';\r\nexport {default as CHeaderNavItem} from './template/CHeaderNavItem';\r\nexport {default as CHeaderNavLink} from './template/CHeaderNavLink';\r\nexport {default as CHeaderBrand} from './template/CHeaderBrand';\r\nexport {default as CSubheader} from './template/CSubheader';\r\nexport {default as CSidebar} from './template/CSidebar';\r\nexport {default as CSidebarBrand} from './template/CSidebarBrand';\r\nexport {default as CSidebarNavDivider} from './template/CSidebarNavDivider';\r\nexport {default as CSidebarNavTitle} from './template/CSidebarNavTitle';\r\nexport {default as CSidebarNavItem} from './template/CSidebarNavItem';\r\nexport {default as CSidebarNavDropdown} from './template/CSidebarNavDropdown';\r\nexport {default as CSidebarFooter} from './template/CSidebarFooter';\r\nexport {default as CSidebarForm} from './template/CSidebarForm';\r\nexport {default as CSidebarHeader} from './template/CSidebarHeader';\r\nexport {default as CSidebarMinimizer} from './template/CSidebarMinimizer';\r\nexport {default as CSidebarNav} from './template/CSidebarNav';\r\nexport {default as CSidebarClose} from './template/CSidebarClose';\r\nexport {default as CToast} from './toast/CToast';\r\nexport {default as CToastHeader} from './toast/CToastHeader';\r\nexport {default as CToastBody} from './toast/CToastBody';\r\nexport {default as CToaster} from './toast/CToaster';\r\nexport {default as CToggler} from './toggler/CToggler';\r\nexport {default as CTooltip} from './tooltip/CTooltip';\r\nexport {default as CPopover} from './tooltip/CPopover';\r\n// export {default as CPortal} from './portal/CPortal';\r\nexport {default as CWidgetProgress} from './widgets/CWidgetProgress';\r\nexport {default as CWidgetIcon} from './widgets/CWidgetIcon';\r\nexport {default as CWidgetBrand} from './widgets/CWidgetBrand';\r\nexport {default as CWidgetProgressIcon} from './widgets/CWidgetProgressIcon';\r\nexport {default as CWidgetDropdown} from './widgets/CWidgetDropdown';\r\nexport {default as CWidgetSimple} from './widgets/CWidgetSimple';\r\n"}},{"id":"322a6755-5f76-515b-b38c-1b8d26c25c0d","name":"index","fields":{"code":"import {default as CIcon, CIconWarn} from './CIcon'\r\n\r\nexport default CIcon \r\n\r\nexport {\r\n  CIconWarn as CIcon,\r\n  CIconWarn as CIconRaw\r\n}\r\n"}},{"id":"9ddadd9c-5545-5fb5-902a-d714257b02b5","name":"index","fields":{"code":"import {\r\n  CChart,\r\n  CCharts,\r\n  CChartBar,\r\n  CChartHorizontalBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea,\r\n} from './CChart'\r\n\r\nexport {\r\n  CChart,\r\n  CCharts,\r\n  CChartBar,\r\n  CChartHorizontalBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n}"}}]},"allExamples":{"nodes":[{"id":"b14cd7f9-6984-560b-aade-c1f85549f0a4","name":"CAlert","fields":{"code":"import React from 'react';\r\nimport {CAlert} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  return (\r\n    <div className=\"mt-2\">\r\n      <CAlert color=\"primary\">CAlert</CAlert>\r\n      <CAlert color=\"secondary\">CAlert</CAlert>\r\n      <CAlert color=\"info\" closeButton>\r\n        I am an dismissible alert!\r\n      </CAlert>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n\r\n}\r\n"}},{"id":"98952a75-9734-59c4-a6d1-5bae4879c169","name":"CBadge","fields":{"code":"import React from 'react';\r\nimport {CBadge} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CBadge color=\"primary\"> Primary color badge</CBadge>\r\n      <CBadge color=\"success\"> success color badge</CBadge>\r\n      <CBadge color=\"warning\"> warning color badge</CBadge>\r\n      <CBadge color=\"danger\"> danger color badge</CBadge>\r\n      <CBadge color=\"secondary\"> secondary color badge</CBadge>\r\n      <CBadge>Raw badge</CBadge>\r\n      <CBadge color=\"primary\" shape=\"pill\">Pill badge</CBadge>\r\n      <CBadge color=\"info\" href=\"https://coreui.io/\">\r\n        Link Badge\r\n      </CBadge>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"21a88e9e-14d1-50cc-a9ba-3e9f2b4601ff","name":"CBreadcrumb","fields":{"code":"import React from 'react';\r\nimport {CBreadcrumb, CBreadcrumbItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CBreadcrumb>\r\n      {/*eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Home</a></CBreadcrumbItem>\r\n      {/* eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Library</a></CBreadcrumbItem>\r\n      <CBreadcrumbItem active>Data</CBreadcrumbItem>\r\n    </CBreadcrumb>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"75d6a66e-17bd-5c67-81fe-179f09347ff9","name":"CBreadcrumbRouter","fields":{"code":"import React from 'react';\r\nimport {CBreadcrumb, CBreadcrumbItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CBreadcrumb>\r\n      {/*eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Home</a></CBreadcrumbItem>\r\n      {/* eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Library</a></CBreadcrumbItem>\r\n      <CBreadcrumbItem active>Data</CBreadcrumbItem>\r\n    </CBreadcrumb>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"47a8e04b-244a-567e-a6ba-b1c9e6cda69f","name":"CButton","fields":{"code":"import React from 'react';\r\nimport {CButton, CRow} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      Sizes:\r\n      {['sm', '', 'lg'].map((size, rowKey)=>{\r\n        return (\r\n          <CRow key={rowKey + 'sizes'} className=\"d-flex justify-content-between\">\r\n            {\r\n              ['success', 'primary', 'info', 'warning', 'danger'].map((color, key)=>{\r\n                return (\r\n                  <CButton\r\n                  key={color + size}\r\n                  color={color}\r\n                  size={size}\r\n                  className=\"m-2\"\r\n                >\r\n                  {color}\r\n                </CButton>\r\n              )})\r\n            }\r\n          </CRow>\r\n        )})}\r\n        Styles:\r\n        {[{ shape: 'square' }, { shape: 'pill' }, { variant: 'ghost' }, { variant: 'outline' }].map((style, rowKey)=>{\r\n          return (\r\n            <CRow key={rowKey + 'sizes'} className=\"d-flex justify-content-between\">\r\n              {\r\n                ['success', 'primary', 'info', 'warning', 'danger'].map((color, key)=>{\r\n                  return (\r\n                    <CButton\r\n                    key={key}\r\n                    color={color}\r\n                    {...style}\r\n                    className=\"m-2\"\r\n                  >\r\n                    {color}\r\n                  </CButton>\r\n                )})\r\n              }\r\n            </CRow>\r\n          )})}\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"09934864-648d-5b23-b40a-6ee12b522310","name":"CButtonClose","fields":{"code":"import React from 'react';\r\nimport {CButtonClose, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CRow>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-primary close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-info close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-success close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-warning close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-danger close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-primary close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-info close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-success close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-danger close\"/>\r\n      </CCol>\r\n\r\n      <CCol cols=\"2\">\r\n        <CButtonClose buttonClasses=\"text-white close bg-primary p-1\">\r\n          Close\r\n        </CButtonClose>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"259bedc1-c1f3-5f17-ba08-4f59ec8a0502","name":"CButtonGroup","fields":{"code":"import React from 'react';\r\nimport {CButtonGroup, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CButtonGroup>\r\n        <CButton color=\"success\">Button</CButton>\r\n        <CButton color=\"info\">Button</CButton>\r\n        <CButton color=\"primary\">Button</CButton>\r\n      </CButtonGroup>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d80f8a39-01eb-591f-a312-8b0804fd30b1","name":"CButtonToolbar","fields":{"code":"import React from 'react';\r\nimport {CButtonToolbar, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      Standard toolbar:\r\n      <CButtonToolbar>\r\n        <CButton color=\"success\">Button</CButton>\r\n        <CButton color=\"info\">Button</CButton>\r\n        <CButton color=\"primary\">Button</CButton>\r\n      </CButtonToolbar>\r\n      <br />\r\n      Justified toolbar:\r\n      <CButtonToolbar justify=\"between\">\r\n        <CButton color=\"success\">Button</CButton>\r\n        <CButton color=\"info\">Button</CButton>\r\n        <CButton color=\"primary\">Button</CButton>\r\n      </CButtonToolbar>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"83caaf44-e608-5c98-91c4-0fcc966f8e7a","name":"CCallout","fields":{"code":"import React from 'react';\r\nimport {CCallout, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n         <CCol col=\"12\" sm=\"6\">\r\n           <CCallout color=\"info\" className={'bg-secondary'}>\r\n             <small className=\"text-muted\">New Clients</small><br />\r\n             <strong className=\"h4\">9,123</strong>\r\n           </CCallout>\r\n         </CCol>\r\n         <CCol col=\"12\" sm=\"6\">\r\n           <CCallout color=\"danger\" className={'bg-white'}>\r\n             <small className=\"text-muted\">Recurring Clients</small><br />\r\n             <strong className=\"h4\">22,643</strong>\r\n           </CCallout>\r\n         </CCol>\r\n       </CRow>\r\n     </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"5b42ca89-6843-581e-b736-16c88ddf0aa9","name":"CCard","fields":{"code":"import React from 'react';\r\nimport {CCard, CCardHeader, CCardBody, CCardFooter, CContainer, CRow, CCol, CCardTitle, CCardSubtitle, CCardText} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer fluid>\r\n    <CRow>\r\n      <CCol sm=\"6\">\r\n        <CCard>\r\n          <CCardHeader>\r\n            Header\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            Body.\r\n          </CCardBody>\r\n          <CCardFooter>\r\n            Footer.\r\n          </CCardFooter>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol sm=\"6\">\r\n        <CCard>\r\n          <CCardHeader>\r\n            Header\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CCardTitle>\r\n              Title.\r\n            </CCardTitle>\r\n            <CCardSubtitle>\r\n              Subtitle.\r\n            </CCardSubtitle>\r\n            <CCardText>\r\n              Text text text text text text text text.\r\n            </CCardText>\r\n          </CCardBody>\r\n          <CCardFooter>\r\n            Footer.\r\n          </CCardFooter>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2b981e22-2d67-5d35-be54-1d3bf08fb77c","name":"CCarousel","fields":{"code":"import React, { useState } from \"react\";\r\nimport {CCarousel, CCarouselIndicators, CCarouselInner, CCarouselItem, CCarouselCaption, CCarouselControl, CRow, CCol, CCard, CCardBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  const slides = [\r\n    'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1607923e7e2%20text%20%7B%20fill%3A%23555%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1607923e7e2%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.9296875%22%20y%3D%22217.75625%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\r\n    'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa20%20text%20%7B%20fill%3A%23444%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa20%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23666%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22247.3203125%22%20y%3D%22218.3%22%3ESecond%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\r\n    'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa21%20text%20%7B%20fill%3A%23333%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa21%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23555%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22277%22%20y%3D%22218.3%22%3EThird%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\r\n  ]\r\n  /*example start: script*/\r\n  //slides=[]...\r\n  const [activeIndex, setActiveIndex] = useState(0)\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol sm={12}>\r\n          <CCarousel activeIndex={activeIndex}>\r\n            <CCarouselIndicators/>\r\n            <CCarouselInner>\r\n              <CCarouselItem>\r\n                <img className=\"d-block w-100\" src={slides[0]} alt=\"slide 1\"/>\r\n                <CCarouselCaption><h3>Slide 1</h3><p>Slide 1</p></CCarouselCaption>\r\n              </CCarouselItem>\r\n              <CCarouselItem>\r\n                <img className=\"d-block w-100\" src={slides[1]} alt=\"slide 2\"/>\r\n                <CCarouselCaption><h3>Slide 2</h3><p>Slide 2</p></CCarouselCaption>\r\n              </CCarouselItem>\r\n              <CCarouselItem>\r\n                <img className=\"d-block w-100\" src={slides[2]} alt=\"slide 3\"/>\r\n                <CCarouselCaption><h3>Slide 3</h3><p>Slide 3</p></CCarouselCaption>\r\n              </CCarouselItem>\r\n            </CCarouselInner>\r\n            <CCarouselControl direction=\"prev\"/>\r\n            <CCarouselControl direction=\"next\"/>\r\n          </CCarousel>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"1eeaaf16-3b00-5bed-b170-52220098e4b4","name":"CCharts","fields":{"code":"import React from 'react';\r\nimport { CChart } from '@coreui/react-chartjs';\r\n//import { Bar, Doughnut, Line, Pie, Polar, Radar } from 'react-chartjs-2';\r\n//import { customTooltips } from '@coreui/chartjs';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const line = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n      {\r\n        label: 'My First dataset',\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: [65, 59, 80, 81, 56, 55, 40],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const bar = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n      {\r\n        label: 'My First dataset',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: [65, 59, 80, 81, 56, 55, 40],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const doughnut = {\r\n  labels: [\r\n    'Red',\r\n    'Green',\r\n    'Yellow',\r\n  ],\r\n  datasets: [\r\n    {\r\n      data: [300, 50, 100],\r\n      backgroundColor: [\r\n        '#FF6384',\r\n        '#36A2EB',\r\n        '#FFCE56',\r\n      ],\r\n      hoverBackgroundColor: [\r\n        '#FF6384',\r\n        '#36A2EB',\r\n        '#FFCE56',\r\n      ],\r\n    }],\r\n  };\r\n\r\n  const radar = {\r\n    labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n    datasets: [\r\n      {\r\n        label: 'My First dataset',\r\n        backgroundColor: 'rgba(179,181,198,0.2)',\r\n        borderColor: 'rgba(179,181,198,1)',\r\n        pointBackgroundColor: 'rgba(179,181,198,1)',\r\n        pointBorderColor: '#fff',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n        data: [65, 59, 90, 81, 56, 55, 40],\r\n      },\r\n      {\r\n        label: 'My Second dataset',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        pointBackgroundColor: 'rgba(255,99,132,1)',\r\n        pointBorderColor: '#fff',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: [28, 48, 40, 19, 96, 27, 100],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const pie = {\r\n    labels: [\r\n      'Red',\r\n      'Green',\r\n      'Yellow',\r\n    ],\r\n    datasets: [\r\n      {\r\n        data: [300, 50, 100],\r\n        backgroundColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n        ],\r\n        hoverBackgroundColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n        ],\r\n      }],\r\n  };\r\n\r\n  const polar = {\r\n    datasets: [\r\n      {\r\n        data: [\r\n          11,\r\n          16,\r\n          7,\r\n          3,\r\n          14,\r\n        ],\r\n        backgroundColor: [\r\n          '#FF6384',\r\n          '#4BC0C0',\r\n          '#FFCE56',\r\n          '#E7E9ED',\r\n          '#36A2EB',\r\n        ],\r\n        label: 'My dataset' // for legend\r\n      }],\r\n    labels: [\r\n      'Red',\r\n      'Green',\r\n      'Yellow',\r\n      'Grey',\r\n      'Blue',\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    // tooltips: {\r\n    //   enabled: false,\r\n    //   custom: customTooltips\r\n    // },\r\n    maintainAspectRatio: false\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <h4>Line</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"line\" datasets={line.datasets} options={options} />\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Bar</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"bar\" datasets={bar.datasets} options={options} labels=\"months\"/>\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n      <h4>Doughnut</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"doughnut\" datasets={doughnut.datasets} labels={doughnut.labels}/>\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Radar</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"radar\" datasets={radar.datasets} labels={radar.labels}/>\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Pie</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"pie\" datasets={pie.datasets} labels={pie.labels} />\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Polar</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart\r\n            type=\"polarArea\"\r\n            datasets={polar.datasets}\r\n            options={{\r\n              maintainAspectRatio: true,\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n            labels={polar.labels}\r\n          />\r\n        </div>\r\n        <hr />\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"cca93e51-ede5-5410-84c8-f702b347f9b1","name":"CCollapse","fields":{"code":"import React, { useState } from \"react\";\r\nimport {CCard, CButton, CCollapse, CCardBody, CCardFooter} from '@coreui/react';\r\n\r\nexport default () => {\r\n  /*example start: script*/\r\n  const [collapse, setCollapse] = useState(false);\r\n  const [collapse2, setCollapse2] = useState(false);\r\n\r\n  const onEntering = () => {};\r\n  const onEntered = () => {};\r\n  const onExiting = () => {};\r\n  const onExited = () => {};\r\n\r\n  const toggle = (e)=>{\r\n    setCollapse(!collapse);\r\n    e.preventDefault();\r\n  }\r\n\r\n  // inner\r\n  const toggle2 = (e)=>{\r\n    setCollapse2(!collapse2);\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <CCard>\r\n      <CCollapse\r\n        show={collapse}\r\n        onEntering={onEntering}\r\n        onEntered={onEntered}\r\n        onExiting={onExiting}\r\n        onExited={onExited}\r\n      >\r\n        <CCardBody>\r\n          <p>\r\n            Anim pariatur cliche reprehenderit,\r\n            enim eiusmod high life accusamus terry richardson ad squid. Nihil\r\n            anim keffiyeh helvetica, craft beer labore wes anderson cred\r\n            nesciunt sapiente ea proident.\r\n          </p>\r\n\r\n          <CCard>\r\n            <CCollapse\r\n              show={collapse2}\r\n            >\r\n              <CCardBody>\r\n                <p>\r\n                  Anim pariatur cliche reprehenderit,\r\n                  enim eiusmod high life accusamus terry richardson ad squid. Nihil\r\n                  anim keffiyeh helvetica, craft beer labore wes anderson cred\r\n                  nesciunt sapiente ea proident.\r\n                </p>\r\n              </CCardBody>\r\n            </CCollapse>\r\n            <CCardFooter>\r\n              <CButton\r\n                onClick={toggle2}\r\n                className={'mb-1'}\r\n              >\r\n                Toggle Inner Collapse\r\n              </CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n\r\n        </CCardBody>\r\n      </CCollapse>\r\n      <CCardFooter>\r\n        <CButton\r\n          color=\"primary\"\r\n          onClick={toggle}\r\n          className={'mb-1'}\r\n        >\r\n          Toggle Collapse\r\n        </CButton>\r\n      </CCardFooter>\r\n    </CCard>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3f08d818-2877-5a2e-970b-d91682286a57","name":"CContainer","fields":{"code":"import React from 'react';\r\nimport {CContainer, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer>\r\n      <CRow>\r\n        <CCol lg=\"5\" className=\"bg-success py-3\">\r\n          col-lg-5\r\n        </CCol>\r\n        <CCol md=\"4\" className=\"bg-warning py-3\">\r\n          col-md-4\r\n        </CCol>\r\n        <CCol sm=\"3\" className=\"bg-danger py-3\">\r\n          col-sm-3\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"f1372e60-54fa-508c-89cf-3e4fbd4725d6","name":"CCustomInput","fields":{"code":"import React, { useState } from 'react';\r\nimport {CInputCheckbox, CForm, CFormGroup, CLabel, CInvalidFeedback, CValidFeedback} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const [checked, setChecked] = useState(false)\r\n\r\n  return (\r\n    <div>\r\n      <CForm>\r\n        <CFormGroup variant=\"custom-checkbox\" className=\"form-group\">\r\n          <CInputCheckbox\r\n            custom\r\n            id=\"accept\"\r\n            required\r\n            valid={checked}\r\n            invalid={!checked}\r\n            onChange={() => setChecked(!checked)}\r\n          >\r\n          </CInputCheckbox>\r\n          <CLabel variant=\"custom-checkbox\" htmlFor=\"accept\">I accept the terms of use</CLabel>\r\n          <CInvalidFeedback className=\"help-block\">\r\n            Please check the agreement\r\n          </CInvalidFeedback>\r\n          <CValidFeedback className=\"help-block\">Terms accepted</CValidFeedback>\r\n        </CFormGroup>\r\n      </CForm>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"85f9894c-be2c-5f54-a62a-225202bade02","name":"CDataTable","fields":{"code":"import React, {useState} from 'react';\r\nimport {CDataTable, CBadge, CButton, CCollapse, CCardBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const usersData = [\r\n    {id: 0, name: 'John Doe', registered: '2018/01/01', role: 'Guest', status: 'Pending'},\r\n    {id: 1, name: 'Samppa Nori', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 2, name: 'Estavan Lykos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 3, name: 'Chetan Mohamed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 4, name: 'Derick Maximinus', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 5, name: 'Friderik Dávid', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 6, name: 'Yiorgos Avraamu', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 7, name: 'Avram Tarasios', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 8, name: 'Quintin Ed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 9, name: 'Enéas Kwadwo', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 10, name: 'Agapetus Tadeáš', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 11, name: 'Carwyn Fachtna', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 12, name: 'Nehemiah Tatius', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 13, name: 'Ebbe Gemariah', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 14, name: 'Eustorgios Amulius', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 15, name: 'Leopold Gáspár', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 16, name: 'Pompeius René', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 17, name: 'Paĉjo Jadon', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 18, name: 'Micheal Mercurius', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 19, name: 'Ganesha Dubhghall', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 20, name: 'Hiroto Šimun', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 21, name: 'Vishnu Serghei', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 22, name: 'Zbyněk Phoibos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 23, name: 'Aulus Agmundr', registered: '2018/01/01', role: 'Member', status: 'Pending'},\r\n    {id: 42, name: 'Ford Prefect', registered: '2001/05/25', role: 'Alien', status: 'Don\\'t panic!'}\r\n  ]\r\n\r\n  const [details, setDetails] = useState([])\r\n  // const [items, setItems] = useState(usersData)\r\n\r\n  const toggleDetails = (index) => {\r\n    const position = details.indexOf(index)\r\n    let newDetails = details.slice()\r\n    if (position !== -1) {\r\n      newDetails.splice(position, 1)\r\n    } else {\r\n      newDetails = [...details, index]\r\n    }\r\n    setDetails(newDetails)\r\n  }\r\n\r\n\r\n  const fields = [\r\n    { key: 'name', _style: { width: '40%'} },\r\n    'registered',\r\n    { key: 'role', _style: { width: '20%'} },\r\n    { key: 'status', _style: { width: '20%'} },\r\n    {\r\n      key: 'show_details',\r\n      label: '',\r\n      _style: { width: '1%' },\r\n      sorter: false,\r\n      filter: false\r\n    }\r\n  ]\r\n\r\n  const getBadge = (status)=>{\r\n    switch (status) {\r\n      case 'Active': return 'success'\r\n      case 'Inactive': return 'secondary'\r\n      case 'Pending': return 'warning'\r\n      case 'Banned': return 'danger'\r\n      default: return 'primary'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CDataTable\r\n      items={usersData}\r\n      fields={fields}\r\n      columnFilter\r\n      tableFilter\r\n      footer\r\n      itemsPerPageSelect\r\n      itemsPerPage={5}\r\n      hover\r\n      sorter\r\n      pagination\r\n      scopedSlots = {{\r\n        'status':\r\n          (item)=>(\r\n            <td>\r\n              <CBadge color={getBadge(item.status)}>\r\n                {item.status}\r\n              </CBadge>\r\n            </td>\r\n          ),\r\n        'show_details':\r\n          (item, index)=>{\r\n            return (\r\n              <td className=\"py-2\">\r\n                <CButton\r\n                  color=\"primary\"\r\n                  variant=\"outline\"\r\n                  shape=\"square\"\r\n                  size=\"sm\"\r\n                  onClick={()=>{toggleDetails(index)}}\r\n                >\r\n                  {details.includes(index) ? 'Hide' : 'Show'}\r\n                </CButton>\r\n              </td>\r\n              )\r\n          },\r\n        'details':\r\n            (item, index)=>{\r\n              return (\r\n              <CCollapse show={details.includes(index)}>\r\n                <CCardBody>\r\n                  <h4>\r\n                    {item.username}\r\n                  </h4>\r\n                  <p className=\"text-muted\">User since: {item.registered}</p>\r\n                  <CButton size=\"sm\" color=\"info\">\r\n                    User Settings\r\n                  </CButton>\r\n                  <CButton size=\"sm\" color=\"danger\" className=\"ml-1\">\r\n                    Delete\r\n                  </CButton>\r\n                </CCardBody>\r\n              </CCollapse>\r\n            )\r\n          }\r\n      }}\r\n    />\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2f69ecd8-1613-542d-9316-2664e540248f","name":"CDropdown","fields":{"code":"import React from 'react';\r\nimport {CDropdown, CDropdownMenu, CDropdownToggle, CDropdownItem } from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CDropdown className=\"mt-2\">\r\n        <CDropdownToggle caret color=\"info\">\r\n          Dropdown button\r\n        </CDropdownToggle>\r\n        <CDropdownMenu>\r\n          <CDropdownItem header>Header</CDropdownItem>\r\n          <CDropdownItem disabled>Action Disabled</CDropdownItem>\r\n          <CDropdownItem>Action</CDropdownItem>\r\n          <CDropdownItem divider />\r\n          <CDropdownItem>Another Action</CDropdownItem>\r\n        </CDropdownMenu>\r\n      </CDropdown>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"1e2b1884-b43f-5644-b4e3-f6284be52d28","name":"CEmbed","fields":{"code":"import React from 'react';\r\nimport {CEmbed, CImg} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CEmbed\r\n      ratio=\"16by9\"\r\n    >\r\n      <iframe src=\"https://www.youtube.com/embed/ctV1-yIzZzU\" />\r\n    </CEmbed>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2219ea91-2c27-5603-b2bc-f13d6b7b8e0f","name":"CForm","fields":{"code":"import React from 'react';\r\nimport {CContainer, CRow, CCol, CInput, CForm, CFormGroup, CLabel, CFormText} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer fluid>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CForm action=\"\" method=\"post\">\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-email\">Email</CLabel>\r\n              <CInput\r\n                type=\"email\"\r\n                id=\"nf-email\"\r\n                name=\"nf-email\"\r\n                placeholder=\"Enter Email..\"\r\n                autoComplete=\"email\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your email</CFormText>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-password\">Password</CLabel>\r\n              <CInput\r\n                type=\"password\"\r\n                id=\"nf-password\"\r\n                name=\"nf-password\"\r\n                placeholder=\"Enter Password..\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your password</CFormText>\r\n            </CFormGroup>\r\n          </CForm>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3e67de52-7143-58ad-b4e4-521d24beaafa","name":"CIcon","fields":{"code":"import React from 'react';\r\nimport {CIcon} from '@coreui/icons-react'\r\nimport {cilUser, cilSettings} from '@coreui/icons';\r\nReact.icons = {cilUser, cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CIcon size={'sm'} name={'cilSettings'} />\r\n      <CIcon name={'cilSettings'} />\r\n      <CIcon size={'lg'} name={'cilSettings'} />\r\n      <CIcon size={'xl'} name={'cilSettings'} />\r\n      <CIcon size={'2xl'} name={'cilSettings'} />\r\n      <CIcon size={'3xl'} name={'cilSettings'} />\r\n      <CIcon size={'4xl'} name={'cilSettings'} />\r\n      <CIcon size={'5xl'} name={'cilSettings'} />\r\n      <CIcon size={'6xl'} name={'cilSettings'} />\r\n      <CIcon size={'7xl'} name={'cilSettings'} />\r\n      <CIcon size={'8xl'} name={'cilSettings'} />\r\n      <CIcon size={'9xl'} name={'cilSettings'} />\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n\r\n}\r\n"}},{"id":"69b3a9d6-fffb-5749-a189-4c97f9e84771","name":"CIconRaw","fields":{"code":"import React from 'react';\r\nimport {CIconRaw} from '@coreui/icons-react'\r\nimport {cilUser, cilSettings} from '@coreui/icons';\r\nReact.icons = {cilUser, cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CIconRaw width=\"48\" name={'cilUser'} />\r\n      <CIconRaw width=\"72\" name={'cilSettings'} />\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"c7d6e130-bffe-5101-83ec-5ca5ebff70e1","name":"CImg","fields":{"code":"import React from 'react';\r\nimport {CImg} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CImg\r\n      src=\"https://picsum.photos/1024/480/?image=54\"\r\n      fluid\r\n      className=\"mb-2\"\r\n    />\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"83cdd233-3e28-55c5-b52c-2475c5f62cfb","name":"CInput","fields":{"code":"import React from 'react';\r\nimport {CContainer, CRow, CCol, CInput, CForm, CFormGroup, CLabel, CFormText} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CForm action=\"\" method=\"post\">\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-email\">Email</CLabel>\r\n              <CInput\r\n                type=\"email\"\r\n                id=\"nf-email\"\r\n                name=\"nf-email\"\r\n                placeholder=\"Enter Email..\"\r\n                autoComplete=\"email\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your email</CFormText>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-password\">Password</CLabel>\r\n              <CInput\r\n                type=\"password\"\r\n                id=\"nf-password\"\r\n                name=\"nf-password\"\r\n                placeholder=\"Enter Password..\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your password</CFormText>\r\n            </CFormGroup>\r\n          </CForm>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d2868ca7-4dd8-54c4-a4fd-f330856bb098","name":"CInputGroup","fields":{"code":"import React from 'react';\r\nimport {CForm, CFormGroup, CFormText, CInputGroup, CInputGroupPrepend, CInputGroupText, CInput, CInputGroupAppend, CLabel} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilUser} from '@coreui/icons';\r\nReact.icons = {cilUser, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'mt-2 col-6'}>\r\n      <CInputGroup>\r\n        <CInputGroupPrepend>\r\n          <CInputGroupText className={'bg-info text-white'}>\r\n            Username\r\n          </CInputGroupText>\r\n        </CInputGroupPrepend>\r\n        <CInput type=\"email\" id=\"username\" name=\"username\" autoComplete=\"name\"/>\r\n        <CInputGroupAppend>\r\n          <CInputGroupText className={'bg-info text-white'}>\r\n            <CIcon name={'cilUser'}/>\r\n          </CInputGroupText>\r\n        </CInputGroupAppend>\r\n      </CInputGroup>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"52aa34a4-2796-5145-9c8b-14837c82717f","name":"CJumbotron","fields":{"code":"import React from 'react';\r\nimport {CJumbotron, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CJumbotron>\r\n      <h1 className=\"display-3\">Bootstrap 4</h1>\r\n      <p className=\"lead\">Bootstrap 4 Components for React</p>\r\n      <p>For more information visit website</p>\r\n      <CButton color=\"primary\" href=\"https://coreui.io/\" target=\"_blank\">More Info</CButton>\r\n    </CJumbotron>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"e3e6ff63-577c-56ca-9dc7-e86a1e5aad63","name":"CLabel","fields":{"code":"import React from 'react';\r\nimport {CInput, CFormGroup, CLabel} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CFormGroup>\r\n        <CLabel htmlFor=\"name\">Name</CLabel>\r\n        <CInput id=\"name\" placeholder=\"Enter your name\" required />\r\n      </CFormGroup>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3e0c3b6e-1e31-5028-8671-257599690585","name":"CLink","fields":{"code":"import React from 'react';\r\nimport {CLink, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol>\r\n          <CLink\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Normal external link.\r\n          </CLink>\r\n          <br />\r\n          <CLink disabled>\r\n            Disabled link without action\r\n          </CLink>\r\n          <br />\r\n          <CLink\r\n            className=\"text-white bg-info px-2\"\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Custom link.\r\n          </CLink>\r\n\r\n          <CLink\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Normal external link\r\n          </CLink>\r\n          <br />\r\n          <CLink disabled>\r\n            Disabled link without action\r\n          </CLink>\r\n          <br />\r\n          <CLink\r\n            className=\"text-white bg-info px-2\"\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Custom link\r\n          </CLink>\r\n\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"fa7f93dd-56c0-56a7-8166-0bc82cbf9801","name":"CListGroup","fields":{"code":"import React from 'react';\r\nimport {CListGroup, CListGroupItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CListGroup>\r\n      <CListGroupItem href=\"#\">\r\n        This is a default list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"primary\">\r\n        This is a primary list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"secondary\">\r\n        This is a secondary list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"success\">\r\n        This is a success list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"danger\">\r\n        This is a danger list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"warning\">\r\n        This is a warning list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"info\">\r\n        This is a info list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"light\">\r\n        This is a light list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"dark\">\r\n        This is a dark list group item\r\n      </CListGroupItem>\r\n    </CListGroup>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"7ca5fe91-f5ca-5f37-97c7-0c2038dcc0fe","name":"CMedia","fields":{"code":"import React from 'react';\r\nimport {CMedia, CMediaBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CMedia>\r\n      <img src=\"https://picsum.photos/1024/480/?image=54\" height=\"50\"/>\r\n      <CMediaBody>\r\n        <h5 className=\"mt-0\">Media Title</h5>\r\n        <p>\r\n          Cras sit amet nibh libero, in gravida nulla.\r\n        </p>\r\n      </CMediaBody>\r\n    </CMedia>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"1625485c-f28a-52ae-ac46-8ac145afc077","name":"CModal","fields":{"code":"import React, {useState} from 'react';\r\nimport {CModal, CModalHeader, CModalBody, CModalFooter, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = ()=>{\r\n    setModal(!modal);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CButton\r\n        onClick={toggle}\r\n        className=\"mr-1\"\r\n      >Launch demo modal</CButton>\r\n      <CModal\r\n        show={modal}\r\n        onClose={toggle}\r\n      >\r\n        <CModalHeader closeButton>Modal title</CModalHeader>\r\n        <CModalBody>\r\n          Lorem ipsum dolor...\r\n        </CModalBody>\r\n        <CModalFooter>\r\n          <CButton color=\"primary\">Do Something</CButton>{' '}\r\n          <CButton\r\n            color=\"secondary\"\r\n            onClick={toggle}\r\n          >Cancel</CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"cd7f92cc-9004-5067-a09d-0f4794574f7e","name":"CNav","fields":{"code":"import React from 'react';\r\nimport {CNav, CNavItem, CNavLink} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CNav variant=\"pills\">\r\n      <CNavItem>\r\n        <CNavLink active>Link</CNavLink>\r\n      </CNavItem>\r\n      <CNavItem>\r\n        <CNavLink>Link</CNavLink>\r\n      </CNavItem>\r\n      <CNavItem>\r\n        <CNavLink>Link</CNavLink>\r\n      </CNavItem>\r\n      <CNavItem>\r\n        <CNavLink disabled>Disabled</CNavLink>\r\n      </CNavItem>\r\n    </CNav>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"c6735556-ed9d-51f3-9c23-a655b8072951","name":"CNavbar","fields":{"code":"import React, {useState} from 'react';\r\nimport {CNavbar, CToggler, CNavbarBrand, CCollapse, CNavLink, CNavbarNav, CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownToggle,\r\n  CDropdownItem,\r\n  CForm,\r\n  CInput,\r\n  CButton\r\n} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <CNavbar expandable=\"sm\" color=\"info\" >\r\n        <CToggler inNavbar onClick={() => setIsOpen(!isOpen)}/>\r\n        <CNavbarBrand>\r\n          NavbarBrand\r\n        </CNavbarBrand>\r\n        <CCollapse show={isOpen} navbar>\r\n          <CNavbarNav>\r\n            <CNavLink>Home</CNavLink>\r\n            <CNavLink>Link</CNavLink>\r\n          </CNavbarNav>\r\n          <CNavbarNav className=\"ml-auto\">\r\n            <CForm inline>\r\n              <CInput\r\n                className=\"mr-sm-2\"\r\n                placeholder=\"Search\"\r\n                size=\"sm\"\r\n              />\r\n              <CButton color=\"light\" className=\"my-2 my-sm-0\" type=\"submit\">Search</CButton>\r\n            </CForm>\r\n            <CDropdown\r\n              inNav\r\n            >\r\n              <CDropdownToggle color=\"primary\">\r\n                Lang\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>EN</CDropdownItem>\r\n                <CDropdownItem>ES</CDropdownItem>\r\n                <CDropdownItem>RU</CDropdownItem>\r\n                <CDropdownItem>FA</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n            <CDropdown\r\n              inNav\r\n            >\r\n              <CDropdownToggle color=\"primary\">\r\n                User\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>Account</CDropdownItem>\r\n                <CDropdownItem>Settings</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n          </CNavbarNav>\r\n        </CCollapse>\r\n      </CNavbar>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d49d55c9-6271-50f3-88a4-7529d0c64e60","name":"CPagination","fields":{"code":"import React, { useState } from 'react';\r\nimport {CPagination} from '@coreui/react';\r\n\r\nexport default () => {\r\n\r\n  /*example start: script*/\r\n  const [currentPage, setActivePage] = useState(2)\r\n\r\n  return (\r\n    <div className={'mt-2'} >\r\n      <CPagination\r\n        activePage={currentPage}\r\n        pages={10}\r\n        onActivePageChange={(i) => setActivePage(i)}\r\n      ></CPagination>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d424b862-cd8a-589f-9af0-c1d5ad83530d","name":"CPopover","fields":{"code":"import React from 'react';\r\nimport {CPopover} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CPopover header=\"Popover header\" content=\"Popover text\">\r\n        <a href=\"#\"> Popover example </a>\r\n      </CPopover>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"88a6b328-3e49-53d5-ad28-552dd6eae32b","name":"CProgress","fields":{"code":"import React from 'react';\r\nimport {CProgress, CProgressBar} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  let counter = 86;\r\n\r\n  return (\r\n    <div className={'mt-2'}>\r\n      <CProgress\r\n        color=\"dark\"\r\n        value={42}\r\n        showValue\r\n        className=\"mb-1 bg-white\"\r\n      />\r\n      <CProgress\r\n        value={counter}\r\n        showValue\r\n        className=\"mb-1 bg-white\"\r\n      />\r\n      <CProgress className=\"mb-1 bg-white\">\r\n        <CProgressBar\r\n          showValue\r\n          value={counter*(6/10)+3}\r\n          color=\"success\"\r\n          height=\"30px\"\r\n        />\r\n        <CProgressBar\r\n          showValue\r\n          value={counter*(2.5/10)+3}\r\n          color=\"warning\"\r\n        />\r\n        <CProgressBar\r\n          showValue\r\n          value={counter*(1.5/10)+3}\r\n          color=\"danger\"\r\n        />\r\n      </CProgress>\r\n      <hr/>\r\n      <CProgress striped value={2 * 5} className=\"mb-1 bg-white\" />\r\n      <CProgress striped color=\"success\" value={25} className=\"mb-1 bg-white\" />\r\n      <CProgress animated striped showValue color=\"info\" value={50} className=\"mb-1 bg-white\" />\r\n      <CProgress animated striped showValue color=\"warning\" value={75} className=\"mb-1 bg-white\" />\r\n      <CProgress animated striped color=\"danger\" value={100} className=\"mb-1 bg-white\" />\r\n      <hr/>\r\n      <CProgress size=\"xs\" value={2 * 5} className=\"mb-1 bg-white\" />\r\n      <CProgress size=\"sm\" color=\"success\" value={25} className=\"mb-1 bg-white\" />\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"b6fb551e-b3d5-58cc-9d69-f433fbe0bf78","name":"CSpinner","fields":{"code":"import React from 'react';\r\nimport {CSpinner} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className=\"d-flex justify-content-between align-items-center\">\r\n      <CSpinner color=\"success\" size=\"sm\" />\r\n      <CSpinner color=\"info\" />\r\n      <CSpinner\r\n        color=\"primary\"\r\n        style={{width:'4rem', height:'4rem'}}\r\n      />\r\n      <CSpinner size=\"sm\" variant=\"grow\" />\r\n      <CSpinner color=\"warning\" variant=\"grow\" />\r\n      <CSpinner\r\n        style={{width:'4rem', height:'4rem'}}\r\n        color=\"danger\"\r\n        variant=\"grow\"\r\n      />\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2a85b8f7-c12a-5992-86a1-cb1d073ba463","name":"CSwitch","fields":{"code":"import React from 'react';\r\nimport {CLink, CSwitch} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const modes = [\r\n        {},\r\n        { size: 'sm'},\r\n        { size: 'lg'},\r\n        { variant: '3d' },\r\n        { shape: 'pill' },\r\n        { variant: 'opposite' },\r\n        { variant: 'outline', shape:'pill' }\r\n      ];\r\n  const colors = ['primary', 'success', 'warning', 'danger', 'info', 'dark', 'light', 'secondary'];\r\n\r\n  return (\r\n    <>\r\n      {modes.map((mode, index)=>{\r\n        return (\r\n          <div className=\"d-flex justify-content-between my-4\" key={index}>\r\n            Passed props: {JSON.stringify(mode)}\r\n            {\r\n              colors.map((color, key)=>{\r\n                return (\r\n                  <CSwitch\r\n                    key={key}\r\n                    color={color}\r\n                    checked\r\n                    value={color}\r\n                    {...mode}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n\r\n  /*\r\n  <template v-for=\"(mode, index) in modes\">\r\n    Passed props: {{mode}}\r\n    <div class=\"d-flex justify-content-between my-4\" :key=\"index\">\r\n      <CSwitch\r\n        :key=\"key\"\r\n        :color=\"color\"\r\n        v-bind=\"mode\"\r\n        checked\r\n        :value=\"color\"\r\n        v-for=\"(color, key) in colors\"\r\n      />\r\n    </div>\r\n  </template>\r\n  */\r\n\r\n}\r\n"}},{"id":"1d02cee2-e308-5b77-b787-31fe118fcae4","name":"CTableCustom","fields":{"code":"import React from 'react';\r\nimport {CTableCustom} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CTableCustom>\r\n        CTable\r\n      </CTableCustom>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"ebf08063-2597-560b-9e08-ccffaa2bf79d","name":"CTabs","fields":{"code":"import React from 'react';\r\nimport {CTabs, CNav, CNavItem, CNavLink, CTabContent, CTabPane} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CTabs activeTab=\"home\">\r\n      <CNav variant=\"tabs\">\r\n        <CNavItem>\r\n          <CNavLink data-tab=\"home\">\r\n            Home\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink data-tab=\"profile\">\r\n            Profile\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink data-tab=\"messages\">\r\n            Messages\r\n          </CNavLink>\r\n        </CNavItem>\r\n      </CNav>\r\n      <CTabContent>\r\n        <CTabPane data-tab=\"home\">\r\n          123\r\n        </CTabPane>\r\n        <CTabPane data-tab=\"profile\">\r\n          456\r\n        </CTabPane>\r\n        <CTabPane data-tab=\"messages\">\r\n          789\r\n        </CTabPane>\r\n      </CTabContent>\r\n    </CTabs>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"ff81117f-19fb-553e-a54d-a9b8beb8f639","name":"CToast","fields":{"code":"import React from 'react';\r\nimport {CToaster, CToast, CToastHeader, CToastBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  let toasts = [\r\n    { position: 'static'},\r\n    { position: 'static'},\r\n    { position: 'top-right', autohide: 3000 }\r\n  ];\r\n  let toasters = (()=>{\r\n    return toasts.reduce((toasters, toast) => {\r\n      toasters[toast.position] = toasters[toast.position] || []\r\n      toasters[toast.position].push(toast)\r\n      return toasters\r\n    }, {})\r\n  })();\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(toasters).map((toasterKey) => (\r\n        <CToaster\r\n          position={toasterKey}\r\n          key={'toaster' + toasterKey}\r\n        >\r\n          {\r\n          toasters[toasterKey].map((toast, key)=>{\r\n            return(\r\n              <CToast\r\n                key={'toast' + key}\r\n                show={true}\r\n                autohide={toast.autohide}\r\n                fade={toast.fade}\r\n              >\r\n                <CToastHeader closeButton={toast.closeButton}>\r\n                  Toast title\r\n                </CToastHeader>\r\n                <CToastBody>\r\n                  {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\r\n                </CToastBody>\r\n              </CToast>\r\n            )\r\n          })\r\n          }\r\n        </CToaster>\r\n      ))}\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3bbd89a5-f8c8-5942-8b1b-5c6ff5c0a432","name":"CTooltip","fields":{"code":"import React from 'react';\r\nimport {CTooltip} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CTooltip content=\"Tooltip text\">\r\n        <a href=\"#\"> Hello world! A tooltip example. </a>\r\n      </CTooltip>\r\n      <CTooltip content=\"Tooltip text\" placement=\"right-end\">\r\n        <a href=\"#\"> Hello world! A right-end tooltip example. </a>\r\n      </CTooltip>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3f7e7e9e-2dba-501c-97ef-9e8d3c72d061","name":"CWidgetBrand","fields":{"code":"import React from 'react';\r\nimport {CWidgetBrand} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport { cibTwitter } from \"@coreui/icons\";\r\nReact.icons = {cibTwitter, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetBrand\r\n          color=\"twitter\"\r\n          rightHeader=\"973k\"\r\n          rightFooter=\"followers\"\r\n          leftHeader=\"1.792\"\r\n          leftFooter=\"tweets\"\r\n        >\r\n          <CIcon\r\n            name=\"cibTwitter\"\r\n            height=\"52\"\r\n            className=\"my-4\"\r\n          />\r\n        </CWidgetBrand>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"997d7e73-d6dd-50ef-9cef-e636f148dcf1","name":"CWidgetDropdown","fields":{"code":"import React from 'react';\r\nimport {CWidgetDropdown, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilSettings} from '@coreui/icons';\r\nReact.icons = {cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetDropdown\r\n          color=\"gradient-warning\"\r\n          header=\"9.823\"\r\n          text=\"Members online\"\r\n          footerSlot={\r\n            <div\r\n              className={'text-center'}\r\n              style={{ height: '100px' }}\r\n            >\r\n              (Chart)\r\n            </div>\r\n          }\r\n        >\r\n          <CDropdown>\r\n            <CDropdownToggle color=\"transparent\">\r\n              <CIcon name={'cilSettings'} size={'md'}/>\r\n            </CDropdownToggle>\r\n            <CDropdownMenu className=\"p-0\" placement=\"bottom-end\">\r\n              <CDropdownItem>Action</CDropdownItem>\r\n              <CDropdownItem>Another action</CDropdownItem>\r\n              <CDropdownItem>Something else here...</CDropdownItem>\r\n            </CDropdownMenu>\r\n          </CDropdown>\r\n        </CWidgetDropdown>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n\r\n}\r\n"}},{"id":"5c510fd5-cd60-5951-8e46-7f0854025663","name":"CWidgetIcon","fields":{"code":"import React from 'react';\r\nimport {CWidgetIcon} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilSettings} from '@coreui/icons';\r\nReact.icons = {cilSettings, ...React.icons}\r\n//import ChartLineSimple from '../Charts/ChartLineSimple';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetIcon text=\"income\" header=\"$1.999,50\" color=\"primary\">\r\n          <CIcon name={'cilSettings'} size={'xl'}/>\r\n        </CWidgetIcon>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"9b0df055-51f9-5622-9bdf-af616d53d895","name":"CWidgetProgress","fields":{"code":"import React from 'react';\r\nimport {CWidgetProgress} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetProgress\r\n          color=\"success\"\r\n          header=\"89.9%\"\r\n          text=\"Lorem ipsum...\"\r\n          footer=\"Lorem ipsum dolor sit amet enim.\"\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"0047c6d2-47c0-553c-8c79-ddafd7866325","name":"CWidgetProgressIcon","fields":{"code":"import React from 'react';\r\nimport { CWidgetProgressIcon } from \"@coreui/react\";\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilSettings} from '@coreui/icons';\r\nReact.icons = {cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetProgressIcon\r\n          header=\"87.500\"\r\n          text=\"Visitors\"\r\n          color=\"gradient-info\"\r\n        >\r\n          <CIcon name=\"cilSettings\" size=\"xl\"/>\r\n        </CWidgetProgressIcon>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"6ef9901a-04d6-54d3-93a5-f5ebd5a2dc07","name":"CWidgetSimple","fields":{"code":"import React from 'react';\r\nimport {CWidgetSimple} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetSimple header=\"title\" text=\"1,123\">\r\n          (Chart)\r\n        </CWidgetSimple>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"bf3f01b2-5228-5c8a-aeb7-05f52b129067","name":"index","fields":{"code":"export {default as CAlertExample} from './CAlert';\r\nexport {default as CBadgeExample} from './CBadge';\r\nexport {default as CBreadcrumbExample} from './CBreadcrumb';\r\nexport {default as CBreadcrumbRouterExample} from './CBreadcrumbRouter';\r\nexport {default as CButtonExample} from './CButton';\r\nexport {default as CButtonCloseExample} from './CButtonClose';\r\nexport {default as CButtonGroupExample} from './CButtonGroup';\r\nexport {default as CButtonToolbarExample} from './CButtonToolbar';\r\nexport {default as CCalloutExample} from './CCallout';\r\nexport {default as CCardExample} from './CCard';\r\nexport {default as CCarouselExample} from './CCarousel';\r\n\r\nexport {default as CCustomInputExample} from './CCustomInput';\r\nexport {default as CDataTableExample} from './CDataTable';\r\nexport {default as CInputExample} from './CInput';\r\nexport {default as CLabelExample} from './CLabel';\r\nexport {default as CInputGroupExample} from './CInputGroup';\r\nexport {default as CModalExample} from './CModal';\r\nexport {default as CNavbarExample} from './CNavbar';\r\n\r\nexport {default as CTabsExample} from './CTabs';\r\nexport {default as CToastExample} from './CToast';\r\nexport {default as CWidgetBrandExample} from './CWidgetBrand';\r\nexport {default as CWidgetIconExample} from './CWidgetIcon';\r\nexport {default as CWidgetProgressExample} from './CWidgetProgress';\r\nexport {default as CWidgetProgressIconExample} from './CWidgetProgressIcon';\r\nexport {default as CWidgetSimpleExample} from './CWidgetSimple';\r\nexport {default as CWidgetDropdownExample} from './CWidgetDropdown';\r\n\r\nexport {default as CChartsExample} from './CCharts';\r\nexport {default as CIconExample} from './CIcon';\r\n\r\nexport {default as CCollapseExample} from './CCollapse';\r\nexport {default as CContainerExample} from './CContainer';\r\nexport {default as CDropdownExample} from './CDropdown';\r\nexport {default as CEmbedExample} from './CEmbed';\r\nexport {default as CFormExample} from './CForm';\r\nexport {default as CImgExample} from './CImg';\r\nexport {default as CJumbotronExample} from './CJumbotron';\r\nexport {default as CLinkExample} from './CLink';\r\nexport {default as CListGroupExample} from './CListGroup';\r\nexport {default as CMediaExample} from './CMedia';\r\nexport {default as CNavExample} from './CNav';\r\nexport {default as CPaginationExample} from './CPagination';\r\nexport {default as CProgressExample} from './CProgress';\r\nexport {default as CSpinnerExample} from './CSpinner';\r\nexport {default as CSwitchExample} from './CSwitch';\r\nexport {default as CPopoverExample} from './CPopover';\r\nexport {default as CTooltipExample} from './CTooltip';\r\n"}}]},"index":{"edges":[{"node":{"name":"-Button","base":"-Button.md"}},{"node":{"name":"-Grid","base":"-Grid.md"}},{"node":{"name":"-Input","base":"-Input.md"}},{"node":{"name":"-Layout","base":"-Layout.md"}},{"node":{"name":"-Toast","base":"-Toast.md"}},{"node":{"name":"-Widget","base":"-Widget.md"}},{"node":{"name":"CAlert","base":"CAlert.md"}},{"node":{"name":"CBadge","base":"CBadge.md"}},{"node":{"name":"CBreadcrumb","base":"CBreadcrumb.md"}},{"node":{"name":"CCallout","base":"CCallout.md"}},{"node":{"name":"CCard","base":"CCard.md"}},{"node":{"name":"CCarousel","base":"CCarousel.md"}},{"node":{"name":"CCharts","base":"CCharts.md"}},{"node":{"name":"CCollapse","base":"CCollapse.md"}},{"node":{"name":"CCreateElement","base":"CCreateElement.md"}},{"node":{"name":"CDataTable","base":"CDataTable.md"}},{"node":{"name":"CDropdown","base":"CDropdown.md"}},{"node":{"name":"CElementCover","base":"CElementCover.md"}},{"node":{"name":"CEmbed","base":"CEmbed.md"}},{"node":{"name":"CFade","base":"CFade.md"}},{"node":{"name":"CForm","base":"CForm.md"}},{"node":{"name":"CIcon","base":"CIcon.md"}},{"node":{"name":"CImg","base":"CImg.md"}},{"node":{"name":"CJumbotron","base":"CJumbotron.md"}},{"node":{"name":"CLink","base":"CLink.md"}},{"node":{"name":"CListGroup","base":"CListGroup.md"}},{"node":{"name":"CMedia","base":"CMedia.md"}},{"node":{"name":"CModal","base":"CModal.md"}},{"node":{"name":"CNav","base":"CNav.md"}},{"node":{"name":"CNavbar","base":"CNavbar.md"}},{"node":{"name":"CPagination","base":"CPagination.md"}},{"node":{"name":"CPopover","base":"CPopover.md"}},{"node":{"name":"CProgress","base":"CProgress.md"}},{"node":{"name":"CSpinner","base":"CSpinner.md"}},{"node":{"name":"CSwitch","base":"CSwitch.md"}},{"node":{"name":"CTabs","base":"CTabs.md"}},{"node":{"name":"CToggler","base":"CToggler.md"}},{"node":{"name":"CTooltip","base":"CTooltip.md"}}]},"allMarkdownRemark":{"nodes":[{"html":"<h2>CoreUI React 3</h2>\n<p>Welcome to CoreUI 3 Doc.</p>","parent":{"__typename":"File","name":"index","sourceInstanceName":"page"}},{"html":"<h2>Introduction</h2>\n<p><a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/badge/@coreui%20-react-lightgrey.svg?style=flat-square\" alt=\"@coreui react\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/v/@coreui/react.png?style=flat-square\" alt=\"npm package\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/dm/@coreui/react.svg?style=flat-square\" alt=\"NPM downloads\"></a></p>\n<h3><a href=\"https://coreui.io/react\">CoreUI v3 for React</a> components library features</h3>\n<ul>\n<li>All components are React hook components (functional components)</li>\n<li>New context api used</li>\n<li>CoreUI doesn't use Reactstrap anymore</li>\n<li>One naming convention across all components (for beta version - 90% coverage)</li>\n<li>TypeScript type definitions</li>\n</ul>\n<p>More:</p>\n<ul>\n<li>InnerRef prop is available for all components</li>\n<li>\n<p>For complex components you can use additional parameters like for example for link sub component:</p>\n<ul>\n<li>some components have additional props inherited from linkProps</li>\n</ul>\n</li>\n</ul>\n<h3>Demo</h3>\n<p><a href=\"https://coreui.io/react/demo/\">CoreUI Pro for React - Demo</a></p>\n<h3>DOM communication</h3>\n<ul>\n<li>No</li>\n</ul>\n<h3>SSR</h3>\n<ul>\n<li>Compatible</li>\n</ul>\n<hr>\n<h4>Helper functions</h4>\n<p>You have access to a list of helper functions.</p>","parent":{"__typename":"File","name":"introduction","sourceInstanceName":"page"}},{"html":"","parent":{"__typename":"File","name":"CElementCover","sourceInstanceName":"partCommon"}},{"html":"<p>Versatile button component.</p>","parent":{"__typename":"File","name":"-Button","sourceInstanceName":"partCommon"}},{"html":"<p>Grid components.</p>","parent":{"__typename":"File","name":"-Grid","sourceInstanceName":"partCommon"}},{"html":"<p>Input components.</p>","parent":{"__typename":"File","name":"-Input","sourceInstanceName":"partCommon"}},{"html":"<p>Set of widgets.</p>","parent":{"__typename":"File","name":"-Widget","sourceInstanceName":"partCommon"}},{"html":"<p>CoreUI grid components.</p>","parent":{"__typename":"File","name":"-Layout","sourceInstanceName":"partCommon"}},{"html":"<p>Notification components.</p>","parent":{"__typename":"File","name":"-Toast","sourceInstanceName":"partCommon"}},{"html":"<p>React alerts give contextual feedback information for common user operations. Component is delivered with a bunch of usable and adjustable alert messages.</p>","parent":{"__typename":"File","name":"CAlert","sourceInstanceName":"partCommon"}},{"html":"<p>React badges are small count and labeling components.</p>","parent":{"__typename":"File","name":"CBadge","sourceInstanceName":"partCommon"}},{"html":"<p>Simple callout component.</p>","parent":{"__typename":"File","name":"CCallout","sourceInstanceName":"partCommon"}},{"html":"<p>React carousel is a slideshow component for cycling through elements.</p>","parent":{"__typename":"File","name":"CCarousel","sourceInstanceName":"partCommon"}},{"html":"<p>React cards component provide a flexible and extensible container for displaying content. React cards are delivered with a bunch of variants and options.</p>","parent":{"__typename":"File","name":"CCard","sourceInstanceName":"partCommon"}},{"html":"<p>Library: @coreui/react-chartjs</p>","parent":{"__typename":"File","name":"CCharts","sourceInstanceName":"partCommon"}},{"html":"<p>Render html based on information from an array of objects.</p>","parent":{"__typename":"File","name":"CCreateElement","sourceInstanceName":"partCommon"}},{"html":"<p>React collapse component toggles the visibility of content across your project with a few classes and some scripts. Useful for a large amount of content.</p>","parent":{"__typename":"File","name":"CCollapse","sourceInstanceName":"partCommon"}},{"html":"<p>React breadcrumb navigation component which indicates the current location within a navigational hierarchy that automatically adds separators.</p>","parent":{"__typename":"File","name":"CBreadcrumb","sourceInstanceName":"partCommon"}},{"html":"<p>Advanced data table.</p>","parent":{"__typename":"File","name":"CDataTable","sourceInstanceName":"partCommon"}},{"html":"<p>React dropdown component allows you to toggle contextual overlays for displaying lists, links, and more html elements.</p>","parent":{"__typename":"File","name":"CDropdown","sourceInstanceName":"partCommon"}},{"html":"<p>Create responsive video or slideshow embeds based on the width of the parent by creating an intrinsic ratio that scales on any device.</p>","parent":{"__typename":"File","name":"CEmbed","sourceInstanceName":"partCommon"}},{"html":"<p>Fade effect component.</p>","parent":{"__typename":"File","name":"CFade","sourceInstanceName":"partCommon"}},{"html":"<p>React forms support the following form controls: input, textarea, button, checkbox, radio, and select. Learn how to build various types of form layouts such as vertical form, horizontal form and inline from quickly and easily with the CoreUI.</p>","parent":{"__typename":"File","name":"CForm","sourceInstanceName":"partCommon"}},{"html":"<p>Library: @coreui/icons-react</p>\n<p>Component used to implement CoreUI svg icons.</p>","parent":{"__typename":"File","name":"CIcon","sourceInstanceName":"partCommon"}},{"html":"<p>Image component.</p>","parent":{"__typename":"File","name":"CImg","sourceInstanceName":"partCommon"}},{"html":"<p>React Jumbotron component indicates a big grey box for showcasing hero unit style content.\nA lightweight, flexible React component that can optionally reach the entire viewport to showcase essential marketing information on your site.</p>","parent":{"__typename":"File","name":"CJumbotron","sourceInstanceName":"partCommon"}},{"html":"<p>React link component (a or NavLink).</p>","parent":{"__typename":"File","name":"CLink","sourceInstanceName":"partCommon"}},{"html":"<p>React List Groups allows displaying are a series of content.</p>","parent":{"__typename":"File","name":"CListGroup","sourceInstanceName":"partCommon"}},{"html":"<p>Documentation and examples for React's media object to construct highly repetitive components like blog comments, tweets, and the like.</p>","parent":{"__typename":"File","name":"CMedia","sourceInstanceName":"partCommon"}},{"html":"<p>Modal window component.</p>","parent":{"__typename":"File","name":"CModal","sourceInstanceName":"partCommon"}},{"html":"<p>React Nav component allows to create simple navigation. Learn how to use React Nav to quickly and easily create elegant and flexible navs.</p>","parent":{"__typename":"File","name":"CNav","sourceInstanceName":"partCommon"}},{"html":"<p>Documentation and examples for React's powerful, responsive navigation header, the navbar. Includes support for branding, navigation, and more, including support for our collapse plugin.</p>","parent":{"__typename":"File","name":"CNavbar","sourceInstanceName":"partCommon"}},{"html":"<p>React pagination component consists of button-like styled links, that are arranged side by side in a horizontal list. Learn how to create nice looking pagination to navigate through pages easily.</p>","parent":{"__typename":"File","name":"CPagination","sourceInstanceName":"partCommon"}},{"html":"<p>React popovers component to adding iPhone and iPad like popovers to any element on your page. </p>","parent":{"__typename":"File","name":"CPopover","sourceInstanceName":"partCommon"}},{"html":"<p>Progress bars component can be used for showing the progress of a task or action to the users. Progress supports for stacked bars, animated backgrounds, and text labels.</p>","parent":{"__typename":"File","name":"CProgress","sourceInstanceName":"partCommon"}},{"html":"<p>Indicate the loading state of a component or page with React spinners.</p>","parent":{"__typename":"File","name":"CSpinner","sourceInstanceName":"partCommon"}},{"html":"<p>React switch component.</p>","parent":{"__typename":"File","name":"CSwitch","sourceInstanceName":"partCommon"}},{"html":"<p>Tabs components.</p>","parent":{"__typename":"File","name":"CTabs","sourceInstanceName":"partCommon"}},{"html":"<p>Wrapper component for toggling button. Use 'inNavbar'/'inHeader' styling or pass your custom styling.</p>","parent":{"__typename":"File","name":"CToggler","sourceInstanceName":"partCommon"}},{"html":"<p>CTooltip is directive, which display tooltip over element, built on top of tooltip.js (popper.js) library. Tooltip is triggered on hover.</p>","parent":{"__typename":"File","name":"CTooltip","sourceInstanceName":"partCommon"}},{"html":"","parent":{"__typename":"File","name":"CBreadcrumbItem","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CButton","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CCallout","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CCol","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CContainer","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CFade","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CFooter","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CForm","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CCharts","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CIconRaw","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CInputCheckbox","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CInputFile","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CInputRadio","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CNavbar","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CPopover","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CPopperContent","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CPopperTargetHelper","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CRow","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CTable","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CTextarea","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CToast","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CToggler","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CWidgets","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Temporary or constant visibility</li>\n<li>Optionally dismissible by user</li>\n<li>Optional fading effect</li>\n<li>When visible temporary timer can be tracked and displayed (i.e. via Progress component)</li>\n</ul>","parent":{"__typename":"File","name":"CAlert","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Styling determined by color property</li>\n<li>Optional pill shape</li>\n<li>If 'to' or 'href' prop is passed Badge gain behavior of link (is rendered as badge CLink) and gains all props and options of CLink component</li>\n</ul>","parent":{"__typename":"File","name":"CBadge","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Optional customization of styles</li>\n<li>Ready to implement React-router based</li>\n</ul>","parent":{"__typename":"File","name":"CBreadcrumb","sourceInstanceName":"partReact"}},{"html":"<p>This is the wrapper component for CBreadcrumb. It will render breadcrumb items based on current React-router route. Props are the same as in CBreadcrumb, except you cannot pass items.</p>","parent":{"__typename":"File","name":"CBreadcrumbRouter","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component for button groups.</p>","parent":{"__typename":"File","name":"CButtonGroup","sourceInstanceName":"partReact"}},{"html":"<p>Simple button toolbar component.</p>","parent":{"__typename":"File","name":"CButtonToolbar","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Wrapper components covering bootstrap card components</li>\n<li>Style components easily by props</li>\n<li>Custom card-accents styling</li>\n</ul>","parent":{"__typename":"File","name":"CCard","sourceInstanceName":"partReact"}},{"html":"<p>Component for card grouping.</p>","parent":{"__typename":"File","name":"CCardGroup","sourceInstanceName":"partReact"}},{"html":"<p>Component for placing image in card. Component inherits functionality from the CImg component.</p>","parent":{"__typename":"File","name":"CCardImg","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-img-overlay' class.</p>","parent":{"__typename":"File","name":"CCardImgOverlay","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-subtitle' class.</p>","parent":{"__typename":"File","name":"CCardSubtitle","sourceInstanceName":"partReact"}},{"html":"<p>CCardLink is CLink component with additional 'card-link' class.</p>","parent":{"__typename":"File","name":"CCardLink","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-title' class.</p>","parent":{"__typename":"File","name":"CCardTitle","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-text' class.</p>","parent":{"__typename":"File","name":"CCardText","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Slides to next item in intervals</li>\n<li>Item could be an image or other content</li>\n<li>Controlled by arrows and indicators</li>\n</ul>","parent":{"__typename":"File","name":"CCarousel","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Collapse animation</li>\n<li>Optional duration and transition effect</li>\n<li>Adapted to use in navbars</li>\n</ul>","parent":{"__typename":"File","name":"CCollapse","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<p>All features are optional:</p>\n<ul>\n<li>Filter items by one or all columns</li>\n<li>Sort items by column</li>\n<li>Integrated with CPagination component by default</li>\n<li>Customize style of specific rows, columns and cells,</li>\n<li>Customize display of columns (headers, filter, and items separately) by scoped slots</li>\n<li>Load with initial filters and sorter state</li>\n<li>Loading state visualization</li>\n</ul>","parent":{"__typename":"File","name":"CDataTable","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Popper.js based toggleable menu</li>\n<li>Toggling mechanism managed by default</li>\n<li>Fully customizable toggler and menu</li>\n</ul>","parent":{"__typename":"File","name":"CDropdown","sourceInstanceName":"partReact"}},{"html":"<p>Render divider variant of CDropdownItem.</p>","parent":{"__typename":"File","name":"CDropdownDivider","sourceInstanceName":"partReact"}},{"html":"<p>Render header variant of CDropdownItem.</p>","parent":{"__typename":"File","name":"CDropdownHeader","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Simple wrapper for external source videos</li>\n<li>Optional aspect ratios</li>\n</ul>","parent":{"__typename":"File","name":"CEmbed","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Building standard bootstrap grid structure</li>\n</ul>","parent":{"__typename":"File","name":"CGrid","sourceInstanceName":"partReact"}},{"html":"<h2>Full Description</h2>\n<ul>\n<li><a href=\"/react/docs/3.3/components/CHeader\">CHeader</a></li>\n</ul>","parent":{"__typename":"File","name":"CHeader","sourceInstanceName":"partReact"}},{"html":"<h1>Features</h1>\n<ul>\n<li>Can load icons stored globally, directly passed or by source link,</li>\n<li>Can significantly reduce bundle size due to JavaScript named icons import,</li>\n<li>Full functionality of svg html tag,</li>\n<li>Clean API</li>\n</ul>","parent":{"__typename":"File","name":"CIcon","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Easy styling</li>\n<li>Show coloured or transparent blank image (svg) if source of image is not defined. Component can be used as blank svg image permanently or until source of image is passed</li>\n</ul>","parent":{"__typename":"File","name":"CImg","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>All-in-one input components</li>\n<li>Components share similar API</li>\n<li>Use as basic or advanced customized inputs</li>\n</ul>","parent":{"__typename":"File","name":"CInput","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Easily customizable styles</li>\n</ul>","parent":{"__typename":"File","name":"CJumbotron","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Linking to external sources or router-links</li>\n<li>If link is empty, component prevents scrolling up the page after clicking</li>\n</ul>\n<p>To turn link into router-link just pass address in 'to' prop instead of 'href'. Then component will become router link extended by base 'CLink' props.</p>","parent":{"__typename":"File","name":"CLink","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Automically detect if item is actionable</li>\n<li>If 'to' or 'href' prop is passed to CListGroupItem it gains functionality of CLink component - it gains all props and options of CLink component</li>\n</ul>","parent":{"__typename":"File","name":"CListGroup","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Aside element on the left or right side</li>\n<li>Aside element have CImg component functionality by default</li>\n</ul>","parent":{"__typename":"File","name":"CMedia","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Many customization options</li>\n<li>Easily manage modal visibility</li>\n</ul>\n<p>Modal is hidding after click on one of following triggers:</p>\n<ul>\n<li>Close button in the default header</li>\n<li>'OK' and 'Cancel' buttons in the footer</li>\n<li>Backdrop (when closeOnBackdrop prop is true)</li>\n</ul>","parent":{"__typename":"File","name":"CModal","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Easily customizable</li>\n<li>Compatible with CDropdown component</li>\n</ul>","parent":{"__typename":"File","name":"CNav","sourceInstanceName":"partReact"}},{"html":"<p>Render CBrand with navbar class.</p>","parent":{"__typename":"File","name":"CNavbarBrand","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Determine behavior, style and functionality of pagination</li>\n<li>Smart automatic items generation</li>\n</ul>","parent":{"__typename":"File","name":"CPagination","sourceInstanceName":"partReact"}},{"html":"<p>Use as a child component of CProgress when you want to split progress bar into multiple bars. </p>","parent":{"__typename":"File","name":"CProgressBar","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Single or splitted progress bar</li>\n<li>Diffrent widths heights and styles available</li>\n<li>Concise syntax for single bar</li>\n</ul>","parent":{"__typename":"File","name":"CProgress","sourceInstanceName":"partReact"}},{"html":"<p>Render CBrand version for sidebar component.</p>","parent":{"__typename":"File","name":"CSidebarBrand","sourceInstanceName":"partReact"}},{"html":"<h2>Full Description</h2>\n<ul>\n<li><a href=\"/react/docs/3.3/components/CSidebar\">CSidebar</a></li>\n</ul>","parent":{"__typename":"File","name":"CSidebar","sourceInstanceName":"partReact"}},{"html":"<p>Render CButtonClose version for sidebar component.</p>","parent":{"__typename":"File","name":"CSidebarClose","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Spinning and grow effect</li>\n<li>Fully customizable size</li>\n<li>Screen readers friendly</li>\n</ul>","parent":{"__typename":"File","name":"CSpinner","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Many styles and sizes</li>\n<li>Checkbox or radio input mode</li>\n</ul>","parent":{"__typename":"File","name":"CSwitch","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Simple to use</li>\n<li>Customizable styling</li>\n<li>Optional fading effect when switching the active tab</li>\n</ul>\n<p>CTab... and CTabs components are tightly coupled which means you using them together is required, for component to work.</p>","parent":{"__typename":"File","name":"CTabs","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Simplified implementation of tooltip</li>\n<li>Bootstrap tooltip styling</li>\n</ul>","parent":{"__typename":"File","name":"CTooltip","sourceInstanceName":"partReact"}},{"html":"<h2>@coreui/react v3 for <a href=\"https://coreui.io/react/\">CoreUI 3 for React</a></h2>\n<p><a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/v/@coreui/react.png?style=flat-square\" alt=\"npm package\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/v/@coreui/react/next.png?style=flat-square\" alt=\"npm next\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/dm/@coreui/react.svg?style=flat-square\" alt=\"NPM downloads\"></a></p>\n<pre><code class=\"language-bash\">npm install @coreui/react@next\n</code></pre>","parent":{"__typename":"File","name":"README","sourceInstanceName":"js"}},{"html":"","parent":{"__typename":"File","name":"README","sourceInstanceName":"js"}}]}},"pageContext":{"slug":"/CModal/"}}}