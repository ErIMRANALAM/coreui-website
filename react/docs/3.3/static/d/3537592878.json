{"data":{"site":{"siteMetadata":{"ver":"3.0"}},"allFile":{"nodes":[{"id":"5415ed19-5ab2-55b2-9c26-ab3e23924f6a","name":"CChart","fields":{"code":"import React, { useState, useEffect, useRef, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Chart from 'chart.js'\r\nimport { customTooltips as cuiCustomTooltips } from '@coreui/chartjs'\r\nimport '@coreui/chartjs/dist/css/coreui-chartjs.css'\r\n\r\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\nconst key = () => Math.random().toString(36).replace('0.', '')\r\n\r\n//component - CoreUI / CChart\r\nconst CChart = props => {\r\n  const {\r\n    innerRef,\r\n    datasets,\r\n    labels,\r\n    options,\r\n    plugins,\r\n    type,\r\n    ...attributes\r\n  } = props\r\n\r\n  const compData = useRef({ firstRun: true }).current\r\n  const [chart, setChart] = useState()\r\n  const ref = useRef()\r\n  const safeId = useState('safe_id_' + key())[0]\r\n\r\n  // methods\r\n  const renderChart = () => {\r\n    destroyChart()\r\n    setChart(new Chart(\r\n      ref.current.getContext('2d'),\r\n      chartConfig\r\n    ))\r\n  }\r\n\r\n  const updateChart = () => {\r\n    Object.assign(chart, chartConfig)\r\n    chart.update()\r\n  }\r\n\r\n  const destroyChart = () => chart && chart.destroy()\r\n\r\n  const dataset = (datasets && datasets[0] && datasets[0].data) || []\r\n\r\n  const computedLabels = useMemo(() => {\r\n    if (labels && typeof labels !== 'string') {\r\n      return labels\r\n    }\r\n    const emptyLabels = Array(dataset.length).fill('')\r\n    if (labels === 'indexes') {\r\n      return emptyLabels.map((u, i) => i + 1)\r\n    } else if (labels === 'months') {\r\n      return emptyLabels.map((u, i) => months[i % 12])\r\n    }\r\n    return emptyLabels\r\n  }, [JSON.stringify(labels), dataset.length])\r\n\r\n\r\n  const customTooltips = (() => {\r\n    if (options && options.tooltips) {\r\n      return\r\n    }\r\n    return {\r\n      tooltips: {\r\n        enabled: false,\r\n        custom: cuiCustomTooltips,\r\n        intersect: true,\r\n        mode: 'index',\r\n        position: 'nearest',\r\n        callbacks: {\r\n          labelColor(tooltipItem, chart) {\r\n            function getValue(prop) {\r\n              return typeof prop === 'object' ? prop[tooltipItem.index] : prop\r\n            }\r\n\r\n            const dataset = chart.data.datasets[tooltipItem.datasetIndex]\r\n            //tooltipLabelColor is coreUI custom prop used only here\r\n            const backgroundColor = getValue(\r\n              dataset.tooltipLabelColor ||\r\n              dataset.pointHoverBackgroundColor ||\r\n              dataset.borderColor ||\r\n              dataset.backgroundColor\r\n            )\r\n            return {\r\n              backgroundColor\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return Object.assign({}, options, customTooltips || {})\r\n  })()\r\n\r\n  const chartConfig = {\r\n    type,\r\n    data: {\r\n      datasets,\r\n      labels: computedLabels\r\n    },\r\n    options: computedOptions,\r\n    plugins\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (compData.firstRun) return\r\n    updateChart()\r\n  }, [chartConfig])\r\n\r\n  useEffect(() => {\r\n    renderChart()\r\n    compData.firstRun = false\r\n    return () => destroyChart()\r\n  }, [])\r\n\r\n  return (\r\n    <div {...attributes} ref={innerRef}>\r\n      <canvas id={safeId} ref={ref} />\r\n    </div>\r\n  )\r\n}\r\n\r\nCChart.propTypes = {\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  datasets: PropTypes.array,\r\n  labels: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\r\n  options: PropTypes.object,\r\n  plugins: PropTypes.array,\r\n  type: PropTypes.string\r\n}\r\n\r\nconst CChartBar = props => <CChart {...props} type=\"bar\"/>\r\nconst CChartHorizontalBar = props => <CChart {...props} type=\"horizontalBar\"/>\r\nconst CChartLine = props => <CChart {...props} type=\"line\"/>\r\nconst CChartDoughnut = props => <CChart {...props} type=\"doughnut\"/>\r\nconst CChartRadar = props => <CChart {...props} type=\"radar\"/>\r\nconst CChartPie = props => <CChart {...props} type=\"pie\"/>\r\nconst CChartPolarArea = props => <CChart {...props} type=\"polarArea\"/>\r\nconst CCharts = props => {\r\n  console.warn(\r\n    '<CCharts> component has been deprecated. Use <CChart> or <CChart{type}> instead'\r\n  )\r\n  return <CChart {...props}/>\r\n}\r\n\r\nexport {\r\n  CChart,\r\n  CCharts,\r\n  CChartBar,\r\n  CChartHorizontalBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n}\r\n\r\n"}},{"id":"819e736a-b0e4-505b-8ac0-64129c8f5086","name":"CIcon","fields":{"code":"import React, { useMemo, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport './CIcon.css'\r\n\r\nconst colog = (...args) => {\r\n  if (process && process.env && process.env.NODE_ENV === 'development') {\r\n    console.warn(...args)\r\n  }\r\n}\r\n\r\nconst toCamelCase = (str) => {\r\n  return str.replace(/([-_][a-z0-9])/ig, ($1) => {\r\n    return $1.toUpperCase()\r\n  }).replace(/-/ig, '')\r\n}\r\n\r\n//component - CoreUI / CIcon\r\nconst CIcon = props => {\r\n\r\n  const {\r\n    className,\r\n    name,\r\n    content,\r\n    customClasses,\r\n    size,\r\n    src,\r\n    title,\r\n    use,\r\n    ...attributes\r\n  } = props\r\n\r\n  const [change, setChange] = useState(0)\r\n\r\n  useMemo(() => setChange(change + 1), [name, JSON.stringify[content]])\r\n\r\n  const iconName = useMemo(()=>{\r\n    const iconNameIsKebabCase = name && name.includes('-')\r\n    return iconNameIsKebabCase ? toCamelCase(name) : name\r\n  }, [change])\r\n\r\n  const titleCode = title ? `<title>${title}</title>` : ''\r\n\r\n  const code = useMemo(() => {\r\n    if (content) {\r\n      return content\r\n    } else if (name && React.icons) {\r\n      return React.icons[iconName] ? React.icons[iconName] :\r\n        colog('Not existing icon: '+ iconName + ' in React.icons object')\r\n    }\r\n  }, [change])\r\n\r\n  const iconCode = useMemo(()=>{\r\n    return Array.isArray(code) ? code[1] || code[0] : code\r\n  }, [change])\r\n\r\n  const scale = (()=>{\r\n    return Array.isArray(code) && code.length > 1 ? code[0] : '64 64'\r\n  })()\r\n\r\n  const viewBox = (()=>{\r\n    return attributes.viewBox || `0 0 ${scale}`\r\n  })()\r\n\r\n  const computedSize = (()=>{\r\n    const addCustom = !size && (attributes.width || attributes.height)\r\n    return size === 'custom' || addCustom ? 'custom-size' : size\r\n  })()\r\n\r\n  //render\r\n  const computedClasses = classNames(\r\n    'c-icon',\r\n    computedSize && `c-icon-${computedSize}`,\r\n    className\r\n  )\r\n\r\n  const classes = customClasses || computedClasses\r\n\r\n  return (\r\n    <React.Fragment>\r\n      { !src && !use &&\r\n        <svg\r\n          {...attributes}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox={viewBox}\r\n          className={classes}\r\n          role=\"img\"\r\n          dangerouslySetInnerHTML={{__html: titleCode + iconCode}}\r\n        />\r\n      }\r\n      { src && !use &&\r\n        <img\r\n          {...attributes}\r\n          className={className}\r\n          src={src}\r\n          role=\"img\"\r\n        />\r\n      }\r\n      { !src && use &&\r\n        <svg\r\n          {...attributes}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className={classes}\r\n          role=\"img\"\r\n        >\r\n          <use href={use}></use>\r\n        </svg>\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nCIcon.propTypes = {\r\n  className: PropTypes.string,\r\n  name: PropTypes.string,\r\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  size: PropTypes.oneOf([\r\n    'custom', 'custom-size', 'sm', 'lg', 'xl',\r\n    '2xl', '3xl', '4xl', '5xl', '6xl', '7xl', '8xl', '9xl'\r\n  ]),\r\n  customClasses: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\r\n  src: PropTypes.string,\r\n  title: PropTypes.string,\r\n  use: PropTypes.string\r\n}\r\n\r\nexport default CIcon\r\n\r\nexport const CIconWarn = props => {\r\n  colog(\r\n    '@coreui/icons-react: Please use default export since named exports are deprecated'\r\n  )\r\n  return <CIcon {...props}/>\r\n}\r\n"}},{"id":"f1d9bf09-48b8-5aa6-ba67-0a5fd4543bed","name":"CPortal","fields":{"code":"// import {useEffect, useRef} from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import PropTypes from 'prop-types';\r\n// import {canUseDOM} from './utils/helper.js';\r\n\r\n// //component - CoreUI / CPortal\r\n\r\n// const CPortal = props=>{\r\n\r\n//   const fields = useRef({defaultNode: null}).current;\r\n\r\n//   // effect\r\n\r\n//   useEffect(() => {\r\n//     return function cleanup() {\r\n//       if (fields.defaultNode) {\r\n//         document.body.removeChild(fields.defaultNode);\r\n//       }\r\n//       fields.defaultNode = null;\r\n//     };\r\n//   },\r\n//   [fields.defaultNode]);\r\n\r\n//   // render\r\n\r\n//   if (!canUseDOM) {\r\n//     return null;\r\n//   }\r\n\r\n//   if (!props.node && !fields.defaultNode) {\r\n//     fields.defaultNode = document.createElement('div');\r\n//     document.body.appendChild(fields.defaultNode);\r\n//   }\r\n\r\n//   return ReactDOM.createPortal(\r\n//     props.children,\r\n//     props.node || fields.defaultNode\r\n//   );\r\n\r\n// }\r\n\r\n// CPortal.propTypes = {\r\n//   children: PropTypes.node.isRequired,\r\n//   //\r\n//   node: PropTypes.any\r\n// };\r\n\r\n// export default CPortal;\r\n"}},{"id":"66044656-401d-50f5-b247-2fedf3ca1578","name":"index","fields":{"code":"export {default as CAlert} from './alert/CAlert';\r\nexport {default as CBadge} from './badge/CBadge';\r\nexport {default as CButton} from './button/CButton';\r\nexport {default as CButtonClose} from './button/CButtonClose';\r\nexport {default as CButtonGroup} from './button/CButtonGroup';\r\nexport {default as CButtonToolbar} from './button/CButtonToolbar';\r\nexport {default as CBreadcrumb} from './breadcrumb/CBreadcrumb';\r\nexport {default as CBreadcrumbRouter} from './breadcrumb/CBreadcrumbRouter';\r\nexport {default as CBreadcrumbItem} from './breadcrumb/CBreadcrumbItem';\r\nexport {default as CCallout} from './callout/CCallout';\r\nexport {default as CCard} from './card/CCard';\r\nexport {default as CCardBody} from './card/CCardBody';\r\nexport {default as CCardHeader} from './card/CCardHeader';\r\nexport {default as CCardFooter} from './card/CCardFooter';\r\nexport {default as CCardGroup} from './card/CCardGroup';\r\nexport {default as CCardImg} from './card/CCardImg';\r\nexport {default as CCardImgOverlay} from './card/CCardImgOverlay';\r\nexport {default as CCardLink} from './card/CCardLink';\r\nexport {default as CCardTitle} from './card/CCardTitle';\r\nexport {default as CCardSubtitle} from './card/CCardSubtitle';\r\nexport {default as CCardText} from './card/CCardText';\r\nexport {default as CCarousel} from './carousel/CCarousel';\r\nexport {default as CCarouselItem} from './carousel/CCarouselItem';\r\nexport {default as CCarouselControl} from './carousel/CCarouselControl';\r\nexport {default as CCarouselIndicators} from './carousel/CCarouselIndicators';\r\nexport {default as CCarouselCaption} from './carousel/CCarouselCaption';\r\nexport {default as CCarouselInner} from './carousel/CCarouselInner';\r\nexport {default as CCollapse} from './collapse/CCollapse';\r\nexport {default as CCreateElement} from './create-element/CCreateElement';\r\nexport {default as CDropdown} from './dropdown/CDropdown';\r\nexport {default as CDropdownDivider} from './dropdown/CDropdownDivider';\r\nexport {default as CDropdownHeader} from './dropdown/CDropdownHeader';\r\nexport {default as CDropdownItem} from './dropdown/CDropdownItem';\r\nexport {default as CDropdownMenu} from './dropdown/CDropdownMenu';\r\nexport {default as CDropdownToggle} from './dropdown/CDropdownToggle';\r\nexport {default as CElementCover} from './element-cover/CElementCover';\r\nexport {default as CEmbed} from './embed/CEmbed';\r\nexport {default as CEmbedItem} from './embed/CEmbedItem';\r\nexport {default as CFade} from './fade/CFade';\r\nexport {default as CForm} from './form/CForm';\r\nexport { CValidFeedback, CInvalidFeedback } from './form/CFormFeedback';\r\nexport {default as CLabel} from './form/CLabel';\r\nexport {default as CFormGroup} from './form/CFormGroup';\r\nexport {default as CFormText} from './form/CFormText';\r\nexport {\r\n  CTextarea,\r\n  CInput,\r\n  CInputFile,\r\n  CInputCheckbox,\r\n  CInputRadio,\r\n  CSelect\r\n}\r\nfrom './form/CInput';\r\nexport {default as CInputGroup} from './form/CInputGroup';\r\nexport {CInputGroupPrepend} from './form/CInputGroupAddon';\r\nexport {CInputGroupAppend} from './form/CInputGroupAddon';\r\nexport {default as CInputGroupText} from './form/CInputGroupText';\r\nexport {default as CRow} from './grid/CRow';\r\nexport {default as CCol} from './grid/CCol';\r\nexport {default as CContainer} from './grid/CContainer';\r\nexport {default as CImg} from './image/CImg';\r\nexport {default as CJumbotron} from './jumbotron/CJumbotron';\r\nexport {default as CLink} from './link/CLink';\r\nexport {default as CListGroup} from './list-group/CListGroup';\r\nexport {default as CListGroupItem} from './list-group/CListGroupItem';\r\nimport React from 'react'\r\nconst wrapper = props => {\r\n  console.warn('CListGroupItemText component is deprecated, please use div tag instead')\r\n  return <div {...props}></div>\r\n}\r\nconst heading = props => {\r\n  console.warn('CListGroupItemHeading component is deprecated, please use h5 tag instead')\r\n  return <h5 {...props}></h5>\r\n}\r\nexport { wrapper as CListGroupItemText};\r\nexport { heading as CListGroupItemHeading};\r\nexport {default as CMedia} from './media/CMedia';\r\nexport {default as CMediaBody} from './media/CMediaBody';\r\nexport {default as CModal} from './modal/CModal';\r\nexport {default as CModalBody} from './modal/CModalBody';\r\nexport {default as CModalHeader} from './modal/CModalHeader';\r\nexport {default as CModalFooter} from './modal/CModalFooter';\r\nexport {default as CModalTitle} from './modal/CModalTitle';\r\nexport {default as CNav} from './nav/CNav';\r\nexport {default as CNavItem} from './nav/CNavItem';\r\nexport {default as CNavLink} from './nav/CNavLink';\r\nexport {default as CNavbarBrand} from './navbar/CNavbarBrand';\r\nexport {default as CNavbar} from './navbar/CNavbar';\r\nexport {default as CNavbarNav} from './navbar/CNavbarNav';\r\nexport {default as CNavbarText} from './navbar/CNavbarText';\r\nexport {default as CPagination} from './pagination/CPagination';\r\nexport {default as CProgress} from './progress/CProgress';\r\nexport {default as CProgressBar} from './progress/CProgressBar';\r\nexport {default as CSpinner} from './spinner/CSpinner';\r\nexport {default as CSwitch} from './switch/CSwitch';\r\nexport {default as CDataTable} from './table/CDataTable';\r\nexport {default as CTabs} from './tabs/CTabs';\r\nexport {default as CTabPane} from './tabs/CTabPane';\r\nexport {default as CTabContent} from './tabs/CTabContent';\r\nexport {default as CFooter} from './template/CFooter';\r\nexport {default as CHeader} from './template/CHeader';\r\nexport {default as CHeaderNav} from './template/CHeaderNav';\r\nexport {default as CHeaderNavItem} from './template/CHeaderNavItem';\r\nexport {default as CHeaderNavLink} from './template/CHeaderNavLink';\r\nexport {default as CHeaderBrand} from './template/CHeaderBrand';\r\nexport {default as CSubheader} from './template/CSubheader';\r\nexport {default as CSidebar} from './template/CSidebar';\r\nexport {default as CSidebarBrand} from './template/CSidebarBrand';\r\nexport {default as CSidebarNavDivider} from './template/CSidebarNavDivider';\r\nexport {default as CSidebarNavTitle} from './template/CSidebarNavTitle';\r\nexport {default as CSidebarNavItem} from './template/CSidebarNavItem';\r\nexport {default as CSidebarNavDropdown} from './template/CSidebarNavDropdown';\r\nexport {default as CSidebarFooter} from './template/CSidebarFooter';\r\nexport {default as CSidebarForm} from './template/CSidebarForm';\r\nexport {default as CSidebarHeader} from './template/CSidebarHeader';\r\nexport {default as CSidebarMinimizer} from './template/CSidebarMinimizer';\r\nexport {default as CSidebarNav} from './template/CSidebarNav';\r\nexport {default as CSidebarClose} from './template/CSidebarClose';\r\nexport {default as CToast} from './toast/CToast';\r\nexport {default as CToastHeader} from './toast/CToastHeader';\r\nexport {default as CToastBody} from './toast/CToastBody';\r\nexport {default as CToaster} from './toast/CToaster';\r\nexport {default as CToggler} from './toggler/CToggler';\r\nexport {default as CTooltip} from './tooltip/CTooltip';\r\nexport {default as CPopover} from './tooltip/CPopover';\r\n// export {default as CPortal} from './portal/CPortal';\r\nexport {default as CWidgetProgress} from './widgets/CWidgetProgress';\r\nexport {default as CWidgetIcon} from './widgets/CWidgetIcon';\r\nexport {default as CWidgetBrand} from './widgets/CWidgetBrand';\r\nexport {default as CWidgetProgressIcon} from './widgets/CWidgetProgressIcon';\r\nexport {default as CWidgetDropdown} from './widgets/CWidgetDropdown';\r\nexport {default as CWidgetSimple} from './widgets/CWidgetSimple';\r\n"}},{"id":"322a6755-5f76-515b-b38c-1b8d26c25c0d","name":"index","fields":{"code":"import {default as CIcon, CIconWarn} from './CIcon'\r\n\r\nexport default CIcon \r\n\r\nexport {\r\n  CIconWarn as CIcon,\r\n  CIconWarn as CIconRaw\r\n}\r\n"}},{"id":"9ddadd9c-5545-5fb5-902a-d714257b02b5","name":"index","fields":{"code":"import {\r\n  CChart,\r\n  CCharts,\r\n  CChartBar,\r\n  CChartHorizontalBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea,\r\n} from './CChart'\r\n\r\nexport {\r\n  CChart,\r\n  CCharts,\r\n  CChartBar,\r\n  CChartHorizontalBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n}"}}]},"allExamples":{"nodes":[{"id":"b14cd7f9-6984-560b-aade-c1f85549f0a4","name":"CAlert","fields":{"code":"import React from 'react';\r\nimport {CAlert} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  return (\r\n    <div className=\"mt-2\">\r\n      <CAlert color=\"primary\">CAlert</CAlert>\r\n      <CAlert color=\"secondary\">CAlert</CAlert>\r\n      <CAlert color=\"info\" closeButton>\r\n        I am an dismissible alert!\r\n      </CAlert>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n\r\n}\r\n"}},{"id":"98952a75-9734-59c4-a6d1-5bae4879c169","name":"CBadge","fields":{"code":"import React from 'react';\r\nimport {CBadge} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CBadge color=\"primary\"> Primary color badge</CBadge>\r\n      <CBadge color=\"success\"> success color badge</CBadge>\r\n      <CBadge color=\"warning\"> warning color badge</CBadge>\r\n      <CBadge color=\"danger\"> danger color badge</CBadge>\r\n      <CBadge color=\"secondary\"> secondary color badge</CBadge>\r\n      <CBadge>Raw badge</CBadge>\r\n      <CBadge color=\"primary\" shape=\"pill\">Pill badge</CBadge>\r\n      <CBadge color=\"info\" href=\"https://coreui.io/\">\r\n        Link Badge\r\n      </CBadge>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"21a88e9e-14d1-50cc-a9ba-3e9f2b4601ff","name":"CBreadcrumb","fields":{"code":"import React from 'react';\r\nimport {CBreadcrumb, CBreadcrumbItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CBreadcrumb>\r\n      {/*eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Home</a></CBreadcrumbItem>\r\n      {/* eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Library</a></CBreadcrumbItem>\r\n      <CBreadcrumbItem active>Data</CBreadcrumbItem>\r\n    </CBreadcrumb>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"75d6a66e-17bd-5c67-81fe-179f09347ff9","name":"CBreadcrumbRouter","fields":{"code":"import React from 'react';\r\nimport {CBreadcrumb, CBreadcrumbItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CBreadcrumb>\r\n      {/*eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Home</a></CBreadcrumbItem>\r\n      {/* eslint-disable-next-line*/}\r\n      <CBreadcrumbItem><a href=\"#\">Library</a></CBreadcrumbItem>\r\n      <CBreadcrumbItem active>Data</CBreadcrumbItem>\r\n    </CBreadcrumb>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"47a8e04b-244a-567e-a6ba-b1c9e6cda69f","name":"CButton","fields":{"code":"import React from 'react';\r\nimport {CButton, CRow} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      Sizes:\r\n      {['sm', '', 'lg'].map((size, rowKey)=>{\r\n        return (\r\n          <CRow key={rowKey + 'sizes'} className=\"d-flex justify-content-between\">\r\n            {\r\n              ['success', 'primary', 'info', 'warning', 'danger'].map((color, key)=>{\r\n                return (\r\n                  <CButton\r\n                  key={color + size}\r\n                  color={color}\r\n                  size={size}\r\n                  className=\"m-2\"\r\n                >\r\n                  {color}\r\n                </CButton>\r\n              )})\r\n            }\r\n          </CRow>\r\n        )})}\r\n        Styles:\r\n        {[{ shape: 'square' }, { shape: 'pill' }, { variant: 'ghost' }, { variant: 'outline' }].map((style, rowKey)=>{\r\n          return (\r\n            <CRow key={rowKey + 'sizes'} className=\"d-flex justify-content-between\">\r\n              {\r\n                ['success', 'primary', 'info', 'warning', 'danger'].map((color, key)=>{\r\n                  return (\r\n                    <CButton\r\n                    key={key}\r\n                    color={color}\r\n                    {...style}\r\n                    className=\"m-2\"\r\n                  >\r\n                    {color}\r\n                  </CButton>\r\n                )})\r\n              }\r\n            </CRow>\r\n          )})}\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"09934864-648d-5b23-b40a-6ee12b522310","name":"CButtonClose","fields":{"code":"import React from 'react';\r\nimport {CButtonClose, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CRow>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-primary close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-info close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-success close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-warning close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"bg-danger close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-primary close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-info close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-success close\"/>\r\n      </CCol>\r\n      <CCol cols=\"1\">\r\n        <CButtonClose buttonClass=\"text-danger close\"/>\r\n      </CCol>\r\n\r\n      <CCol cols=\"2\">\r\n        <CButtonClose buttonClasses=\"text-white close bg-primary p-1\">\r\n          Close\r\n        </CButtonClose>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"259bedc1-c1f3-5f17-ba08-4f59ec8a0502","name":"CButtonGroup","fields":{"code":"import React from 'react';\r\nimport {CButtonGroup, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CButtonGroup>\r\n        <CButton color=\"success\">Button</CButton>\r\n        <CButton color=\"info\">Button</CButton>\r\n        <CButton color=\"primary\">Button</CButton>\r\n      </CButtonGroup>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d80f8a39-01eb-591f-a312-8b0804fd30b1","name":"CButtonToolbar","fields":{"code":"import React from 'react';\r\nimport {CButtonToolbar, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      Standard toolbar:\r\n      <CButtonToolbar>\r\n        <CButton color=\"success\">Button</CButton>\r\n        <CButton color=\"info\">Button</CButton>\r\n        <CButton color=\"primary\">Button</CButton>\r\n      </CButtonToolbar>\r\n      <br />\r\n      Justified toolbar:\r\n      <CButtonToolbar justify=\"between\">\r\n        <CButton color=\"success\">Button</CButton>\r\n        <CButton color=\"info\">Button</CButton>\r\n        <CButton color=\"primary\">Button</CButton>\r\n      </CButtonToolbar>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"83caaf44-e608-5c98-91c4-0fcc966f8e7a","name":"CCallout","fields":{"code":"import React from 'react';\r\nimport {CCallout, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n         <CCol col=\"12\" sm=\"6\">\r\n           <CCallout color=\"info\" className={'bg-secondary'}>\r\n             <small className=\"text-muted\">New Clients</small><br />\r\n             <strong className=\"h4\">9,123</strong>\r\n           </CCallout>\r\n         </CCol>\r\n         <CCol col=\"12\" sm=\"6\">\r\n           <CCallout color=\"danger\" className={'bg-white'}>\r\n             <small className=\"text-muted\">Recurring Clients</small><br />\r\n             <strong className=\"h4\">22,643</strong>\r\n           </CCallout>\r\n         </CCol>\r\n       </CRow>\r\n     </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"5b42ca89-6843-581e-b736-16c88ddf0aa9","name":"CCard","fields":{"code":"import React from 'react';\r\nimport {CCard, CCardHeader, CCardBody, CCardFooter, CContainer, CRow, CCol, CCardTitle, CCardSubtitle, CCardText} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer fluid>\r\n    <CRow>\r\n      <CCol sm=\"6\">\r\n        <CCard>\r\n          <CCardHeader>\r\n            Header\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            Body.\r\n          </CCardBody>\r\n          <CCardFooter>\r\n            Footer.\r\n          </CCardFooter>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol sm=\"6\">\r\n        <CCard>\r\n          <CCardHeader>\r\n            Header\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CCardTitle>\r\n              Title.\r\n            </CCardTitle>\r\n            <CCardSubtitle>\r\n              Subtitle.\r\n            </CCardSubtitle>\r\n            <CCardText>\r\n              Text text text text text text text text.\r\n            </CCardText>\r\n          </CCardBody>\r\n          <CCardFooter>\r\n            Footer.\r\n          </CCardFooter>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2b981e22-2d67-5d35-be54-1d3bf08fb77c","name":"CCarousel","fields":{"code":"import React, { useState } from \"react\";\r\nimport {CCarousel, CCarouselIndicators, CCarouselInner, CCarouselItem, CCarouselCaption, CCarouselControl, CRow, CCol, CCard, CCardBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  const slides = [\r\n    'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1607923e7e2%20text%20%7B%20fill%3A%23555%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1607923e7e2%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.9296875%22%20y%3D%22217.75625%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\r\n    'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa20%20text%20%7B%20fill%3A%23444%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa20%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23666%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22247.3203125%22%20y%3D%22218.3%22%3ESecond%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\r\n    'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa21%20text%20%7B%20fill%3A%23333%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa21%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23555%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22277%22%20y%3D%22218.3%22%3EThird%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\r\n  ]\r\n  /*example start: script*/\r\n  //slides=[]...\r\n  const [activeIndex, setActiveIndex] = useState(0)\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol sm={12}>\r\n          <CCarousel activeIndex={activeIndex}>\r\n            <CCarouselIndicators/>\r\n            <CCarouselInner>\r\n              <CCarouselItem>\r\n                <img className=\"d-block w-100\" src={slides[0]} alt=\"slide 1\"/>\r\n                <CCarouselCaption><h3>Slide 1</h3><p>Slide 1</p></CCarouselCaption>\r\n              </CCarouselItem>\r\n              <CCarouselItem>\r\n                <img className=\"d-block w-100\" src={slides[1]} alt=\"slide 2\"/>\r\n                <CCarouselCaption><h3>Slide 2</h3><p>Slide 2</p></CCarouselCaption>\r\n              </CCarouselItem>\r\n              <CCarouselItem>\r\n                <img className=\"d-block w-100\" src={slides[2]} alt=\"slide 3\"/>\r\n                <CCarouselCaption><h3>Slide 3</h3><p>Slide 3</p></CCarouselCaption>\r\n              </CCarouselItem>\r\n            </CCarouselInner>\r\n            <CCarouselControl direction=\"prev\"/>\r\n            <CCarouselControl direction=\"next\"/>\r\n          </CCarousel>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"1eeaaf16-3b00-5bed-b170-52220098e4b4","name":"CCharts","fields":{"code":"import React from 'react';\r\nimport { CChart } from '@coreui/react-chartjs';\r\n//import { Bar, Doughnut, Line, Pie, Polar, Radar } from 'react-chartjs-2';\r\n//import { customTooltips } from '@coreui/chartjs';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const line = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n      {\r\n        label: 'My First dataset',\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: [65, 59, 80, 81, 56, 55, 40],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const bar = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n      {\r\n        label: 'My First dataset',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: [65, 59, 80, 81, 56, 55, 40],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const doughnut = {\r\n  labels: [\r\n    'Red',\r\n    'Green',\r\n    'Yellow',\r\n  ],\r\n  datasets: [\r\n    {\r\n      data: [300, 50, 100],\r\n      backgroundColor: [\r\n        '#FF6384',\r\n        '#36A2EB',\r\n        '#FFCE56',\r\n      ],\r\n      hoverBackgroundColor: [\r\n        '#FF6384',\r\n        '#36A2EB',\r\n        '#FFCE56',\r\n      ],\r\n    }],\r\n  };\r\n\r\n  const radar = {\r\n    labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n    datasets: [\r\n      {\r\n        label: 'My First dataset',\r\n        backgroundColor: 'rgba(179,181,198,0.2)',\r\n        borderColor: 'rgba(179,181,198,1)',\r\n        pointBackgroundColor: 'rgba(179,181,198,1)',\r\n        pointBorderColor: '#fff',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n        data: [65, 59, 90, 81, 56, 55, 40],\r\n      },\r\n      {\r\n        label: 'My Second dataset',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        pointBackgroundColor: 'rgba(255,99,132,1)',\r\n        pointBorderColor: '#fff',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: [28, 48, 40, 19, 96, 27, 100],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const pie = {\r\n    labels: [\r\n      'Red',\r\n      'Green',\r\n      'Yellow',\r\n    ],\r\n    datasets: [\r\n      {\r\n        data: [300, 50, 100],\r\n        backgroundColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n        ],\r\n        hoverBackgroundColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n        ],\r\n      }],\r\n  };\r\n\r\n  const polar = {\r\n    datasets: [\r\n      {\r\n        data: [\r\n          11,\r\n          16,\r\n          7,\r\n          3,\r\n          14,\r\n        ],\r\n        backgroundColor: [\r\n          '#FF6384',\r\n          '#4BC0C0',\r\n          '#FFCE56',\r\n          '#E7E9ED',\r\n          '#36A2EB',\r\n        ],\r\n        label: 'My dataset' // for legend\r\n      }],\r\n    labels: [\r\n      'Red',\r\n      'Green',\r\n      'Yellow',\r\n      'Grey',\r\n      'Blue',\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    // tooltips: {\r\n    //   enabled: false,\r\n    //   custom: customTooltips\r\n    // },\r\n    maintainAspectRatio: false\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <h4>Line</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"line\" datasets={line.datasets} options={options} />\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Bar</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"bar\" datasets={bar.datasets} options={options} labels=\"months\"/>\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n      <h4>Doughnut</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"doughnut\" datasets={doughnut.datasets} labels={doughnut.labels}/>\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Radar</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"radar\" datasets={radar.datasets} labels={radar.labels}/>\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Pie</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart type=\"pie\" datasets={pie.datasets} labels={pie.labels} />\r\n        </div>\r\n        <hr />\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Polar</h4>\r\n        <div className=\"chart-wrapper\">\r\n          <CChart\r\n            type=\"polarArea\"\r\n            datasets={polar.datasets}\r\n            options={{\r\n              maintainAspectRatio: true,\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n            labels={polar.labels}\r\n          />\r\n        </div>\r\n        <hr />\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"cca93e51-ede5-5410-84c8-f702b347f9b1","name":"CCollapse","fields":{"code":"import React, { useState } from \"react\";\r\nimport {CCard, CButton, CCollapse, CCardBody, CCardFooter} from '@coreui/react';\r\n\r\nexport default () => {\r\n  /*example start: script*/\r\n  const [collapse, setCollapse] = useState(false);\r\n  const [collapse2, setCollapse2] = useState(false);\r\n\r\n  const onEntering = () => {};\r\n  const onEntered = () => {};\r\n  const onExiting = () => {};\r\n  const onExited = () => {};\r\n\r\n  const toggle = (e)=>{\r\n    setCollapse(!collapse);\r\n    e.preventDefault();\r\n  }\r\n\r\n  // inner\r\n  const toggle2 = (e)=>{\r\n    setCollapse2(!collapse2);\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <CCard>\r\n      <CCollapse\r\n        show={collapse}\r\n        onEntering={onEntering}\r\n        onEntered={onEntered}\r\n        onExiting={onExiting}\r\n        onExited={onExited}\r\n      >\r\n        <CCardBody>\r\n          <p>\r\n            Anim pariatur cliche reprehenderit,\r\n            enim eiusmod high life accusamus terry richardson ad squid. Nihil\r\n            anim keffiyeh helvetica, craft beer labore wes anderson cred\r\n            nesciunt sapiente ea proident.\r\n          </p>\r\n\r\n          <CCard>\r\n            <CCollapse\r\n              show={collapse2}\r\n            >\r\n              <CCardBody>\r\n                <p>\r\n                  Anim pariatur cliche reprehenderit,\r\n                  enim eiusmod high life accusamus terry richardson ad squid. Nihil\r\n                  anim keffiyeh helvetica, craft beer labore wes anderson cred\r\n                  nesciunt sapiente ea proident.\r\n                </p>\r\n              </CCardBody>\r\n            </CCollapse>\r\n            <CCardFooter>\r\n              <CButton\r\n                onClick={toggle2}\r\n                className={'mb-1'}\r\n              >\r\n                Toggle Inner Collapse\r\n              </CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n\r\n        </CCardBody>\r\n      </CCollapse>\r\n      <CCardFooter>\r\n        <CButton\r\n          color=\"primary\"\r\n          onClick={toggle}\r\n          className={'mb-1'}\r\n        >\r\n          Toggle Collapse\r\n        </CButton>\r\n      </CCardFooter>\r\n    </CCard>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3f08d818-2877-5a2e-970b-d91682286a57","name":"CContainer","fields":{"code":"import React from 'react';\r\nimport {CContainer, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer>\r\n      <CRow>\r\n        <CCol lg=\"5\" className=\"bg-success py-3\">\r\n          col-lg-5\r\n        </CCol>\r\n        <CCol md=\"4\" className=\"bg-warning py-3\">\r\n          col-md-4\r\n        </CCol>\r\n        <CCol sm=\"3\" className=\"bg-danger py-3\">\r\n          col-sm-3\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"f1372e60-54fa-508c-89cf-3e4fbd4725d6","name":"CCustomInput","fields":{"code":"import React, { useState } from 'react';\r\nimport {CInputCheckbox, CForm, CFormGroup, CLabel, CInvalidFeedback, CValidFeedback} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const [checked, setChecked] = useState(false)\r\n\r\n  return (\r\n    <div>\r\n      <CForm>\r\n        <CFormGroup variant=\"custom-checkbox\" className=\"form-group\">\r\n          <CInputCheckbox\r\n            custom\r\n            id=\"accept\"\r\n            required\r\n            valid={checked}\r\n            invalid={!checked}\r\n            onChange={() => setChecked(!checked)}\r\n          >\r\n          </CInputCheckbox>\r\n          <CLabel variant=\"custom-checkbox\" htmlFor=\"accept\">I accept the terms of use</CLabel>\r\n          <CInvalidFeedback className=\"help-block\">\r\n            Please check the agreement\r\n          </CInvalidFeedback>\r\n          <CValidFeedback className=\"help-block\">Terms accepted</CValidFeedback>\r\n        </CFormGroup>\r\n      </CForm>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"85f9894c-be2c-5f54-a62a-225202bade02","name":"CDataTable","fields":{"code":"import React, {useState} from 'react';\r\nimport {CDataTable, CBadge, CButton, CCollapse, CCardBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const usersData = [\r\n    {id: 0, name: 'John Doe', registered: '2018/01/01', role: 'Guest', status: 'Pending'},\r\n    {id: 1, name: 'Samppa Nori', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 2, name: 'Estavan Lykos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 3, name: 'Chetan Mohamed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 4, name: 'Derick Maximinus', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 5, name: 'Friderik Dávid', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 6, name: 'Yiorgos Avraamu', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 7, name: 'Avram Tarasios', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 8, name: 'Quintin Ed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 9, name: 'Enéas Kwadwo', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 10, name: 'Agapetus Tadeáš', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 11, name: 'Carwyn Fachtna', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 12, name: 'Nehemiah Tatius', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 13, name: 'Ebbe Gemariah', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 14, name: 'Eustorgios Amulius', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 15, name: 'Leopold Gáspár', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 16, name: 'Pompeius René', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 17, name: 'Paĉjo Jadon', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 18, name: 'Micheal Mercurius', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n    {id: 19, name: 'Ganesha Dubhghall', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n    {id: 20, name: 'Hiroto Šimun', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n    {id: 21, name: 'Vishnu Serghei', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n    {id: 22, name: 'Zbyněk Phoibos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n    {id: 23, name: 'Aulus Agmundr', registered: '2018/01/01', role: 'Member', status: 'Pending'},\r\n    {id: 42, name: 'Ford Prefect', registered: '2001/05/25', role: 'Alien', status: 'Don\\'t panic!'}\r\n  ]\r\n\r\n  const [details, setDetails] = useState([])\r\n  // const [items, setItems] = useState(usersData)\r\n\r\n  const toggleDetails = (index) => {\r\n    const position = details.indexOf(index)\r\n    let newDetails = details.slice()\r\n    if (position !== -1) {\r\n      newDetails.splice(position, 1)\r\n    } else {\r\n      newDetails = [...details, index]\r\n    }\r\n    setDetails(newDetails)\r\n  }\r\n\r\n\r\n  const fields = [\r\n    { key: 'name', _style: { width: '40%'} },\r\n    'registered',\r\n    { key: 'role', _style: { width: '20%'} },\r\n    { key: 'status', _style: { width: '20%'} },\r\n    {\r\n      key: 'show_details',\r\n      label: '',\r\n      _style: { width: '1%' },\r\n      sorter: false,\r\n      filter: false\r\n    }\r\n  ]\r\n\r\n  const getBadge = (status)=>{\r\n    switch (status) {\r\n      case 'Active': return 'success'\r\n      case 'Inactive': return 'secondary'\r\n      case 'Pending': return 'warning'\r\n      case 'Banned': return 'danger'\r\n      default: return 'primary'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CDataTable\r\n      items={usersData}\r\n      fields={fields}\r\n      columnFilter\r\n      tableFilter\r\n      footer\r\n      itemsPerPageSelect\r\n      itemsPerPage={5}\r\n      hover\r\n      sorter\r\n      pagination\r\n      scopedSlots = {{\r\n        'status':\r\n          (item)=>(\r\n            <td>\r\n              <CBadge color={getBadge(item.status)}>\r\n                {item.status}\r\n              </CBadge>\r\n            </td>\r\n          ),\r\n        'show_details':\r\n          (item, index)=>{\r\n            return (\r\n              <td className=\"py-2\">\r\n                <CButton\r\n                  color=\"primary\"\r\n                  variant=\"outline\"\r\n                  shape=\"square\"\r\n                  size=\"sm\"\r\n                  onClick={()=>{toggleDetails(index)}}\r\n                >\r\n                  {details.includes(index) ? 'Hide' : 'Show'}\r\n                </CButton>\r\n              </td>\r\n              )\r\n          },\r\n        'details':\r\n            (item, index)=>{\r\n              return (\r\n              <CCollapse show={details.includes(index)}>\r\n                <CCardBody>\r\n                  <h4>\r\n                    {item.username}\r\n                  </h4>\r\n                  <p className=\"text-muted\">User since: {item.registered}</p>\r\n                  <CButton size=\"sm\" color=\"info\">\r\n                    User Settings\r\n                  </CButton>\r\n                  <CButton size=\"sm\" color=\"danger\" className=\"ml-1\">\r\n                    Delete\r\n                  </CButton>\r\n                </CCardBody>\r\n              </CCollapse>\r\n            )\r\n          }\r\n      }}\r\n    />\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2f69ecd8-1613-542d-9316-2664e540248f","name":"CDropdown","fields":{"code":"import React from 'react';\r\nimport {CDropdown, CDropdownMenu, CDropdownToggle, CDropdownItem } from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CDropdown className=\"mt-2\">\r\n        <CDropdownToggle caret color=\"info\">\r\n          Dropdown button\r\n        </CDropdownToggle>\r\n        <CDropdownMenu>\r\n          <CDropdownItem header>Header</CDropdownItem>\r\n          <CDropdownItem disabled>Action Disabled</CDropdownItem>\r\n          <CDropdownItem>Action</CDropdownItem>\r\n          <CDropdownItem divider />\r\n          <CDropdownItem>Another Action</CDropdownItem>\r\n        </CDropdownMenu>\r\n      </CDropdown>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"1e2b1884-b43f-5644-b4e3-f6284be52d28","name":"CEmbed","fields":{"code":"import React from 'react';\r\nimport {CEmbed, CImg} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CEmbed\r\n      ratio=\"16by9\"\r\n    >\r\n      <iframe src=\"https://www.youtube.com/embed/ctV1-yIzZzU\" />\r\n    </CEmbed>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2219ea91-2c27-5603-b2bc-f13d6b7b8e0f","name":"CForm","fields":{"code":"import React from 'react';\r\nimport {CContainer, CRow, CCol, CInput, CForm, CFormGroup, CLabel, CFormText} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer fluid>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CForm action=\"\" method=\"post\">\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-email\">Email</CLabel>\r\n              <CInput\r\n                type=\"email\"\r\n                id=\"nf-email\"\r\n                name=\"nf-email\"\r\n                placeholder=\"Enter Email..\"\r\n                autoComplete=\"email\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your email</CFormText>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-password\">Password</CLabel>\r\n              <CInput\r\n                type=\"password\"\r\n                id=\"nf-password\"\r\n                name=\"nf-password\"\r\n                placeholder=\"Enter Password..\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your password</CFormText>\r\n            </CFormGroup>\r\n          </CForm>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3e67de52-7143-58ad-b4e4-521d24beaafa","name":"CIcon","fields":{"code":"import React from 'react';\r\nimport {CIcon} from '@coreui/icons-react'\r\nimport {cilUser, cilSettings} from '@coreui/icons';\r\nReact.icons = {cilUser, cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CIcon size={'sm'} name={'cilSettings'} />\r\n      <CIcon name={'cilSettings'} />\r\n      <CIcon size={'lg'} name={'cilSettings'} />\r\n      <CIcon size={'xl'} name={'cilSettings'} />\r\n      <CIcon size={'2xl'} name={'cilSettings'} />\r\n      <CIcon size={'3xl'} name={'cilSettings'} />\r\n      <CIcon size={'4xl'} name={'cilSettings'} />\r\n      <CIcon size={'5xl'} name={'cilSettings'} />\r\n      <CIcon size={'6xl'} name={'cilSettings'} />\r\n      <CIcon size={'7xl'} name={'cilSettings'} />\r\n      <CIcon size={'8xl'} name={'cilSettings'} />\r\n      <CIcon size={'9xl'} name={'cilSettings'} />\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n\r\n}\r\n"}},{"id":"69b3a9d6-fffb-5749-a189-4c97f9e84771","name":"CIconRaw","fields":{"code":"import React from 'react';\r\nimport {CIconRaw} from '@coreui/icons-react'\r\nimport {cilUser, cilSettings} from '@coreui/icons';\r\nReact.icons = {cilUser, cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CIconRaw width=\"48\" name={'cilUser'} />\r\n      <CIconRaw width=\"72\" name={'cilSettings'} />\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"c7d6e130-bffe-5101-83ec-5ca5ebff70e1","name":"CImg","fields":{"code":"import React from 'react';\r\nimport {CImg} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CImg\r\n      src=\"https://picsum.photos/1024/480/?image=54\"\r\n      fluid\r\n      className=\"mb-2\"\r\n    />\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"83cdd233-3e28-55c5-b52c-2475c5f62cfb","name":"CInput","fields":{"code":"import React from 'react';\r\nimport {CContainer, CRow, CCol, CInput, CForm, CFormGroup, CLabel, CFormText} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CContainer>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CForm action=\"\" method=\"post\">\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-email\">Email</CLabel>\r\n              <CInput\r\n                type=\"email\"\r\n                id=\"nf-email\"\r\n                name=\"nf-email\"\r\n                placeholder=\"Enter Email..\"\r\n                autoComplete=\"email\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your email</CFormText>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"nf-password\">Password</CLabel>\r\n              <CInput\r\n                type=\"password\"\r\n                id=\"nf-password\"\r\n                name=\"nf-password\"\r\n                placeholder=\"Enter Password..\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <CFormText className=\"help-block\">Please enter your password</CFormText>\r\n            </CFormGroup>\r\n          </CForm>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d2868ca7-4dd8-54c4-a4fd-f330856bb098","name":"CInputGroup","fields":{"code":"import React from 'react';\r\nimport {CForm, CFormGroup, CFormText, CInputGroup, CInputGroupPrepend, CInputGroupText, CInput, CInputGroupAppend, CLabel} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilUser} from '@coreui/icons';\r\nReact.icons = {cilUser, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'mt-2 col-6'}>\r\n      <CInputGroup>\r\n        <CInputGroupPrepend>\r\n          <CInputGroupText className={'bg-info text-white'}>\r\n            Username\r\n          </CInputGroupText>\r\n        </CInputGroupPrepend>\r\n        <CInput type=\"email\" id=\"username\" name=\"username\" autoComplete=\"name\"/>\r\n        <CInputGroupAppend>\r\n          <CInputGroupText className={'bg-info text-white'}>\r\n            <CIcon name={'cilUser'}/>\r\n          </CInputGroupText>\r\n        </CInputGroupAppend>\r\n      </CInputGroup>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"52aa34a4-2796-5145-9c8b-14837c82717f","name":"CJumbotron","fields":{"code":"import React from 'react';\r\nimport {CJumbotron, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CJumbotron>\r\n      <h1 className=\"display-3\">Bootstrap 4</h1>\r\n      <p className=\"lead\">Bootstrap 4 Components for React</p>\r\n      <p>For more information visit website</p>\r\n      <CButton color=\"primary\" href=\"https://coreui.io/\" target=\"_blank\">More Info</CButton>\r\n    </CJumbotron>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"e3e6ff63-577c-56ca-9dc7-e86a1e5aad63","name":"CLabel","fields":{"code":"import React from 'react';\r\nimport {CInput, CFormGroup, CLabel} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CFormGroup>\r\n        <CLabel htmlFor=\"name\">Name</CLabel>\r\n        <CInput id=\"name\" placeholder=\"Enter your name\" required />\r\n      </CFormGroup>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3e0c3b6e-1e31-5028-8671-257599690585","name":"CLink","fields":{"code":"import React from 'react';\r\nimport {CLink, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol>\r\n          <CLink\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Normal external link.\r\n          </CLink>\r\n          <br />\r\n          <CLink disabled>\r\n            Disabled link without action\r\n          </CLink>\r\n          <br />\r\n          <CLink\r\n            className=\"text-white bg-info px-2\"\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Custom link.\r\n          </CLink>\r\n\r\n          <CLink\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Normal external link\r\n          </CLink>\r\n          <br />\r\n          <CLink disabled>\r\n            Disabled link without action\r\n          </CLink>\r\n          <br />\r\n          <CLink\r\n            className=\"text-white bg-info px-2\"\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Custom link\r\n          </CLink>\r\n\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"fa7f93dd-56c0-56a7-8166-0bc82cbf9801","name":"CListGroup","fields":{"code":"import React from 'react';\r\nimport {CListGroup, CListGroupItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CListGroup>\r\n      <CListGroupItem href=\"#\">\r\n        This is a default list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"primary\">\r\n        This is a primary list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"secondary\">\r\n        This is a secondary list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"success\">\r\n        This is a success list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"danger\">\r\n        This is a danger list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"warning\">\r\n        This is a warning list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"info\">\r\n        This is a info list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"light\">\r\n        This is a light list group item\r\n      </CListGroupItem>\r\n      <CListGroupItem href=\"#\" color=\"dark\">\r\n        This is a dark list group item\r\n      </CListGroupItem>\r\n    </CListGroup>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"7ca5fe91-f5ca-5f37-97c7-0c2038dcc0fe","name":"CMedia","fields":{"code":"import React from 'react';\r\nimport {CMedia, CMediaBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CMedia>\r\n      <img src=\"https://picsum.photos/1024/480/?image=54\" height=\"50\"/>\r\n      <CMediaBody>\r\n        <h5 className=\"mt-0\">Media Title</h5>\r\n        <p>\r\n          Cras sit amet nibh libero, in gravida nulla.\r\n        </p>\r\n      </CMediaBody>\r\n    </CMedia>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"1625485c-f28a-52ae-ac46-8ac145afc077","name":"CModal","fields":{"code":"import React, {useState} from 'react';\r\nimport {CModal, CModalHeader, CModalBody, CModalFooter, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = ()=>{\r\n    setModal(!modal);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CButton\r\n        onClick={toggle}\r\n        className=\"mr-1\"\r\n      >Launch demo modal</CButton>\r\n      <CModal\r\n        show={modal}\r\n        onClose={toggle}\r\n      >\r\n        <CModalHeader closeButton>Modal title</CModalHeader>\r\n        <CModalBody>\r\n          Lorem ipsum dolor...\r\n        </CModalBody>\r\n        <CModalFooter>\r\n          <CButton color=\"primary\">Do Something</CButton>{' '}\r\n          <CButton\r\n            color=\"secondary\"\r\n            onClick={toggle}\r\n          >Cancel</CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"cd7f92cc-9004-5067-a09d-0f4794574f7e","name":"CNav","fields":{"code":"import React from 'react';\r\nimport {CNav, CNavItem, CNavLink} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CNav variant=\"pills\">\r\n      <CNavItem>\r\n        <CNavLink active>Link</CNavLink>\r\n      </CNavItem>\r\n      <CNavItem>\r\n        <CNavLink>Link</CNavLink>\r\n      </CNavItem>\r\n      <CNavItem>\r\n        <CNavLink>Link</CNavLink>\r\n      </CNavItem>\r\n      <CNavItem>\r\n        <CNavLink disabled>Disabled</CNavLink>\r\n      </CNavItem>\r\n    </CNav>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"c6735556-ed9d-51f3-9c23-a655b8072951","name":"CNavbar","fields":{"code":"import React, {useState} from 'react';\r\nimport {CNavbar, CToggler, CNavbarBrand, CCollapse, CNavLink, CNavbarNav, CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownToggle,\r\n  CDropdownItem,\r\n  CForm,\r\n  CInput,\r\n  CButton\r\n} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <CNavbar expandable=\"sm\" color=\"info\" >\r\n        <CToggler inNavbar onClick={() => setIsOpen(!isOpen)}/>\r\n        <CNavbarBrand>\r\n          NavbarBrand\r\n        </CNavbarBrand>\r\n        <CCollapse show={isOpen} navbar>\r\n          <CNavbarNav>\r\n            <CNavLink>Home</CNavLink>\r\n            <CNavLink>Link</CNavLink>\r\n          </CNavbarNav>\r\n          <CNavbarNav className=\"ml-auto\">\r\n            <CForm inline>\r\n              <CInput\r\n                className=\"mr-sm-2\"\r\n                placeholder=\"Search\"\r\n                size=\"sm\"\r\n              />\r\n              <CButton color=\"light\" className=\"my-2 my-sm-0\" type=\"submit\">Search</CButton>\r\n            </CForm>\r\n            <CDropdown\r\n              inNav\r\n            >\r\n              <CDropdownToggle color=\"primary\">\r\n                Lang\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>EN</CDropdownItem>\r\n                <CDropdownItem>ES</CDropdownItem>\r\n                <CDropdownItem>RU</CDropdownItem>\r\n                <CDropdownItem>FA</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n            <CDropdown\r\n              inNav\r\n            >\r\n              <CDropdownToggle color=\"primary\">\r\n                User\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>Account</CDropdownItem>\r\n                <CDropdownItem>Settings</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n          </CNavbarNav>\r\n        </CCollapse>\r\n      </CNavbar>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d49d55c9-6271-50f3-88a4-7529d0c64e60","name":"CPagination","fields":{"code":"import React, { useState } from 'react';\r\nimport {CPagination} from '@coreui/react';\r\n\r\nexport default () => {\r\n\r\n  /*example start: script*/\r\n  const [currentPage, setActivePage] = useState(2)\r\n\r\n  return (\r\n    <div className={'mt-2'} >\r\n      <CPagination\r\n        activePage={currentPage}\r\n        pages={10}\r\n        onActivePageChange={(i) => setActivePage(i)}\r\n      ></CPagination>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"d424b862-cd8a-589f-9af0-c1d5ad83530d","name":"CPopover","fields":{"code":"import React from 'react';\r\nimport {CPopover} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CPopover header=\"Popover header\" content=\"Popover text\">\r\n        <a href=\"#\"> Popover example </a>\r\n      </CPopover>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"88a6b328-3e49-53d5-ad28-552dd6eae32b","name":"CProgress","fields":{"code":"import React from 'react';\r\nimport {CProgress, CProgressBar} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  let counter = 86;\r\n\r\n  return (\r\n    <div className={'mt-2'}>\r\n      <CProgress\r\n        color=\"dark\"\r\n        value={42}\r\n        showValue\r\n        className=\"mb-1 bg-white\"\r\n      />\r\n      <CProgress\r\n        value={counter}\r\n        showValue\r\n        className=\"mb-1 bg-white\"\r\n      />\r\n      <CProgress className=\"mb-1 bg-white\">\r\n        <CProgressBar\r\n          showValue\r\n          value={counter*(6/10)+3}\r\n          color=\"success\"\r\n          height=\"30px\"\r\n        />\r\n        <CProgressBar\r\n          showValue\r\n          value={counter*(2.5/10)+3}\r\n          color=\"warning\"\r\n        />\r\n        <CProgressBar\r\n          showValue\r\n          value={counter*(1.5/10)+3}\r\n          color=\"danger\"\r\n        />\r\n      </CProgress>\r\n      <hr/>\r\n      <CProgress striped value={2 * 5} className=\"mb-1 bg-white\" />\r\n      <CProgress striped color=\"success\" value={25} className=\"mb-1 bg-white\" />\r\n      <CProgress animated striped showValue color=\"info\" value={50} className=\"mb-1 bg-white\" />\r\n      <CProgress animated striped showValue color=\"warning\" value={75} className=\"mb-1 bg-white\" />\r\n      <CProgress animated striped color=\"danger\" value={100} className=\"mb-1 bg-white\" />\r\n      <hr/>\r\n      <CProgress size=\"xs\" value={2 * 5} className=\"mb-1 bg-white\" />\r\n      <CProgress size=\"sm\" color=\"success\" value={25} className=\"mb-1 bg-white\" />\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"b6fb551e-b3d5-58cc-9d69-f433fbe0bf78","name":"CSpinner","fields":{"code":"import React from 'react';\r\nimport {CSpinner} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className=\"d-flex justify-content-between align-items-center\">\r\n      <CSpinner color=\"success\" size=\"sm\" />\r\n      <CSpinner color=\"info\" />\r\n      <CSpinner\r\n        color=\"primary\"\r\n        style={{width:'4rem', height:'4rem'}}\r\n      />\r\n      <CSpinner size=\"sm\" variant=\"grow\" />\r\n      <CSpinner color=\"warning\" variant=\"grow\" />\r\n      <CSpinner\r\n        style={{width:'4rem', height:'4rem'}}\r\n        color=\"danger\"\r\n        variant=\"grow\"\r\n      />\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"2a85b8f7-c12a-5992-86a1-cb1d073ba463","name":"CSwitch","fields":{"code":"import React from 'react';\r\nimport {CLink, CSwitch} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const modes = [\r\n        {},\r\n        { size: 'sm'},\r\n        { size: 'lg'},\r\n        { variant: '3d' },\r\n        { shape: 'pill' },\r\n        { variant: 'opposite' },\r\n        { variant: 'outline', shape:'pill' }\r\n      ];\r\n  const colors = ['primary', 'success', 'warning', 'danger', 'info', 'dark', 'light', 'secondary'];\r\n\r\n  return (\r\n    <>\r\n      {modes.map((mode, index)=>{\r\n        return (\r\n          <div className=\"d-flex justify-content-between my-4\" key={index}>\r\n            Passed props: {JSON.stringify(mode)}\r\n            {\r\n              colors.map((color, key)=>{\r\n                return (\r\n                  <CSwitch\r\n                    key={key}\r\n                    color={color}\r\n                    checked\r\n                    value={color}\r\n                    {...mode}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n\r\n  /*\r\n  <template v-for=\"(mode, index) in modes\">\r\n    Passed props: {{mode}}\r\n    <div class=\"d-flex justify-content-between my-4\" :key=\"index\">\r\n      <CSwitch\r\n        :key=\"key\"\r\n        :color=\"color\"\r\n        v-bind=\"mode\"\r\n        checked\r\n        :value=\"color\"\r\n        v-for=\"(color, key) in colors\"\r\n      />\r\n    </div>\r\n  </template>\r\n  */\r\n\r\n}\r\n"}},{"id":"1d02cee2-e308-5b77-b787-31fe118fcae4","name":"CTableCustom","fields":{"code":"import React from 'react';\r\nimport {CTableCustom} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div>\r\n      <CTableCustom>\r\n        CTable\r\n      </CTableCustom>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"ebf08063-2597-560b-9e08-ccffaa2bf79d","name":"CTabs","fields":{"code":"import React from 'react';\r\nimport {CTabs, CNav, CNavItem, CNavLink, CTabContent, CTabPane} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <CTabs activeTab=\"home\">\r\n      <CNav variant=\"tabs\">\r\n        <CNavItem>\r\n          <CNavLink data-tab=\"home\">\r\n            Home\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink data-tab=\"profile\">\r\n            Profile\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink data-tab=\"messages\">\r\n            Messages\r\n          </CNavLink>\r\n        </CNavItem>\r\n      </CNav>\r\n      <CTabContent>\r\n        <CTabPane data-tab=\"home\">\r\n          123\r\n        </CTabPane>\r\n        <CTabPane data-tab=\"profile\">\r\n          456\r\n        </CTabPane>\r\n        <CTabPane data-tab=\"messages\">\r\n          789\r\n        </CTabPane>\r\n      </CTabContent>\r\n    </CTabs>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"ff81117f-19fb-553e-a54d-a9b8beb8f639","name":"CToast","fields":{"code":"import React from 'react';\r\nimport {CToaster, CToast, CToastHeader, CToastBody} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  let toasts = [\r\n    { position: 'static'},\r\n    { position: 'static'},\r\n    { position: 'top-right', autohide: 3000 }\r\n  ];\r\n  let toasters = (()=>{\r\n    return toasts.reduce((toasters, toast) => {\r\n      toasters[toast.position] = toasters[toast.position] || []\r\n      toasters[toast.position].push(toast)\r\n      return toasters\r\n    }, {})\r\n  })();\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(toasters).map((toasterKey) => (\r\n        <CToaster\r\n          position={toasterKey}\r\n          key={'toaster' + toasterKey}\r\n        >\r\n          {\r\n          toasters[toasterKey].map((toast, key)=>{\r\n            return(\r\n              <CToast\r\n                key={'toast' + key}\r\n                show={true}\r\n                autohide={toast.autohide}\r\n                fade={toast.fade}\r\n              >\r\n                <CToastHeader closeButton={toast.closeButton}>\r\n                  Toast title\r\n                </CToastHeader>\r\n                <CToastBody>\r\n                  {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\r\n                </CToastBody>\r\n              </CToast>\r\n            )\r\n          })\r\n          }\r\n        </CToaster>\r\n      ))}\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3bbd89a5-f8c8-5942-8b1b-5c6ff5c0a432","name":"CTooltip","fields":{"code":"import React from 'react';\r\nimport {CTooltip} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <>\r\n      <CTooltip content=\"Tooltip text\">\r\n        <a href=\"#\"> Hello world! A tooltip example. </a>\r\n      </CTooltip>\r\n      <CTooltip content=\"Tooltip text\" placement=\"right-end\">\r\n        <a href=\"#\"> Hello world! A right-end tooltip example. </a>\r\n      </CTooltip>\r\n    </>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"3f7e7e9e-2dba-501c-97ef-9e8d3c72d061","name":"CWidgetBrand","fields":{"code":"import React from 'react';\r\nimport {CWidgetBrand} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport { cibTwitter } from \"@coreui/icons\";\r\nReact.icons = {cibTwitter, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetBrand\r\n          color=\"twitter\"\r\n          rightHeader=\"973k\"\r\n          rightFooter=\"followers\"\r\n          leftHeader=\"1.792\"\r\n          leftFooter=\"tweets\"\r\n        >\r\n          <CIcon\r\n            name=\"cibTwitter\"\r\n            height=\"52\"\r\n            className=\"my-4\"\r\n          />\r\n        </CWidgetBrand>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"997d7e73-d6dd-50ef-9cef-e636f148dcf1","name":"CWidgetDropdown","fields":{"code":"import React from 'react';\r\nimport {CWidgetDropdown, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilSettings} from '@coreui/icons';\r\nReact.icons = {cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetDropdown\r\n          color=\"gradient-warning\"\r\n          header=\"9.823\"\r\n          text=\"Members online\"\r\n          footerSlot={\r\n            <div\r\n              className={'text-center'}\r\n              style={{ height: '100px' }}\r\n            >\r\n              (Chart)\r\n            </div>\r\n          }\r\n        >\r\n          <CDropdown>\r\n            <CDropdownToggle color=\"transparent\">\r\n              <CIcon name={'cilSettings'} size={'md'}/>\r\n            </CDropdownToggle>\r\n            <CDropdownMenu className=\"p-0\" placement=\"bottom-end\">\r\n              <CDropdownItem>Action</CDropdownItem>\r\n              <CDropdownItem>Another action</CDropdownItem>\r\n              <CDropdownItem>Something else here...</CDropdownItem>\r\n            </CDropdownMenu>\r\n          </CDropdown>\r\n        </CWidgetDropdown>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n\r\n}\r\n"}},{"id":"5c510fd5-cd60-5951-8e46-7f0854025663","name":"CWidgetIcon","fields":{"code":"import React from 'react';\r\nimport {CWidgetIcon} from '@coreui/react';\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilSettings} from '@coreui/icons';\r\nReact.icons = {cilSettings, ...React.icons}\r\n//import ChartLineSimple from '../Charts/ChartLineSimple';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetIcon text=\"income\" header=\"$1.999,50\" color=\"primary\">\r\n          <CIcon name={'cilSettings'} size={'xl'}/>\r\n        </CWidgetIcon>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"9b0df055-51f9-5622-9bdf-af616d53d895","name":"CWidgetProgress","fields":{"code":"import React from 'react';\r\nimport {CWidgetProgress} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetProgress\r\n          color=\"success\"\r\n          header=\"89.9%\"\r\n          text=\"Lorem ipsum...\"\r\n          footer=\"Lorem ipsum dolor sit amet enim.\"\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"0047c6d2-47c0-553c-8c79-ddafd7866325","name":"CWidgetProgressIcon","fields":{"code":"import React from 'react';\r\nimport { CWidgetProgressIcon } from \"@coreui/react\";\r\nimport {CIcon} from '@coreui/icons-react';\r\nimport {cilSettings} from '@coreui/icons';\r\nReact.icons = {cilSettings, ...React.icons}\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetProgressIcon\r\n          header=\"87.500\"\r\n          text=\"Visitors\"\r\n          color=\"gradient-info\"\r\n        >\r\n          <CIcon name=\"cilSettings\" size=\"xl\"/>\r\n        </CWidgetProgressIcon>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"6ef9901a-04d6-54d3-93a5-f5ebd5a2dc07","name":"CWidgetSimple","fields":{"code":"import React from 'react';\r\nimport {CWidgetSimple} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  return (\r\n    <div className={'row mt-2'}>\r\n      <div className={'col-6'}>\r\n        <CWidgetSimple header=\"title\" text=\"1,123\">\r\n          (Chart)\r\n        </CWidgetSimple>\r\n      </div>\r\n    </div>\r\n  )\r\n  /*example end: script*/\r\n}\r\n"}},{"id":"bf3f01b2-5228-5c8a-aeb7-05f52b129067","name":"index","fields":{"code":"export {default as CAlertExample} from './CAlert';\r\nexport {default as CBadgeExample} from './CBadge';\r\nexport {default as CBreadcrumbExample} from './CBreadcrumb';\r\nexport {default as CBreadcrumbRouterExample} from './CBreadcrumbRouter';\r\nexport {default as CButtonExample} from './CButton';\r\nexport {default as CButtonCloseExample} from './CButtonClose';\r\nexport {default as CButtonGroupExample} from './CButtonGroup';\r\nexport {default as CButtonToolbarExample} from './CButtonToolbar';\r\nexport {default as CCalloutExample} from './CCallout';\r\nexport {default as CCardExample} from './CCard';\r\nexport {default as CCarouselExample} from './CCarousel';\r\n\r\nexport {default as CCustomInputExample} from './CCustomInput';\r\nexport {default as CDataTableExample} from './CDataTable';\r\nexport {default as CInputExample} from './CInput';\r\nexport {default as CLabelExample} from './CLabel';\r\nexport {default as CInputGroupExample} from './CInputGroup';\r\nexport {default as CModalExample} from './CModal';\r\nexport {default as CNavbarExample} from './CNavbar';\r\n\r\nexport {default as CTabsExample} from './CTabs';\r\nexport {default as CToastExample} from './CToast';\r\nexport {default as CWidgetBrandExample} from './CWidgetBrand';\r\nexport {default as CWidgetIconExample} from './CWidgetIcon';\r\nexport {default as CWidgetProgressExample} from './CWidgetProgress';\r\nexport {default as CWidgetProgressIconExample} from './CWidgetProgressIcon';\r\nexport {default as CWidgetSimpleExample} from './CWidgetSimple';\r\nexport {default as CWidgetDropdownExample} from './CWidgetDropdown';\r\n\r\nexport {default as CChartsExample} from './CCharts';\r\nexport {default as CIconExample} from './CIcon';\r\n\r\nexport {default as CCollapseExample} from './CCollapse';\r\nexport {default as CContainerExample} from './CContainer';\r\nexport {default as CDropdownExample} from './CDropdown';\r\nexport {default as CEmbedExample} from './CEmbed';\r\nexport {default as CFormExample} from './CForm';\r\nexport {default as CImgExample} from './CImg';\r\nexport {default as CJumbotronExample} from './CJumbotron';\r\nexport {default as CLinkExample} from './CLink';\r\nexport {default as CListGroupExample} from './CListGroup';\r\nexport {default as CMediaExample} from './CMedia';\r\nexport {default as CNavExample} from './CNav';\r\nexport {default as CPaginationExample} from './CPagination';\r\nexport {default as CProgressExample} from './CProgress';\r\nexport {default as CSpinnerExample} from './CSpinner';\r\nexport {default as CSwitchExample} from './CSwitch';\r\nexport {default as CPopoverExample} from './CPopover';\r\nexport {default as CTooltipExample} from './CTooltip';\r\n"}}]},"index":{"edges":[{"node":{"name":"-Button","base":"-Button.md"}},{"node":{"name":"-Grid","base":"-Grid.md"}},{"node":{"name":"-Input","base":"-Input.md"}},{"node":{"name":"-Layout","base":"-Layout.md"}},{"node":{"name":"-Toast","base":"-Toast.md"}},{"node":{"name":"-Widget","base":"-Widget.md"}},{"node":{"name":"CAlert","base":"CAlert.md"}},{"node":{"name":"CBadge","base":"CBadge.md"}},{"node":{"name":"CBreadcrumb","base":"CBreadcrumb.md"}},{"node":{"name":"CCallout","base":"CCallout.md"}},{"node":{"name":"CCard","base":"CCard.md"}},{"node":{"name":"CCarousel","base":"CCarousel.md"}},{"node":{"name":"CCharts","base":"CCharts.md"}},{"node":{"name":"CCollapse","base":"CCollapse.md"}},{"node":{"name":"CCreateElement","base":"CCreateElement.md"}},{"node":{"name":"CDataTable","base":"CDataTable.md"}},{"node":{"name":"CDropdown","base":"CDropdown.md"}},{"node":{"name":"CElementCover","base":"CElementCover.md"}},{"node":{"name":"CEmbed","base":"CEmbed.md"}},{"node":{"name":"CFade","base":"CFade.md"}},{"node":{"name":"CForm","base":"CForm.md"}},{"node":{"name":"CIcon","base":"CIcon.md"}},{"node":{"name":"CImg","base":"CImg.md"}},{"node":{"name":"CJumbotron","base":"CJumbotron.md"}},{"node":{"name":"CLink","base":"CLink.md"}},{"node":{"name":"CListGroup","base":"CListGroup.md"}},{"node":{"name":"CMedia","base":"CMedia.md"}},{"node":{"name":"CModal","base":"CModal.md"}},{"node":{"name":"CNav","base":"CNav.md"}},{"node":{"name":"CNavbar","base":"CNavbar.md"}},{"node":{"name":"CPagination","base":"CPagination.md"}},{"node":{"name":"CPopover","base":"CPopover.md"}},{"node":{"name":"CProgress","base":"CProgress.md"}},{"node":{"name":"CSpinner","base":"CSpinner.md"}},{"node":{"name":"CSwitch","base":"CSwitch.md"}},{"node":{"name":"CTabs","base":"CTabs.md"}},{"node":{"name":"CToggler","base":"CToggler.md"}},{"node":{"name":"CTooltip","base":"CTooltip.md"}}]},"allMarkdownRemark":{"nodes":[{"html":"<h2>CoreUI React 3</h2>\n<p>Welcome to CoreUI 3 Doc.</p>","parent":{"__typename":"File","name":"index","sourceInstanceName":"page"}},{"html":"<h2>Introduction</h2>\n<p><a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/badge/@coreui%20-react-lightgrey.svg?style=flat-square\" alt=\"@coreui react\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/v/@coreui/react.png?style=flat-square\" alt=\"npm package\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/dm/@coreui/react.svg?style=flat-square\" alt=\"NPM downloads\"></a></p>\n<h3><a href=\"https://coreui.io/react\">CoreUI v3 for React</a> components library features</h3>\n<ul>\n<li>All components are React hook components (functional components)</li>\n<li>New context api used</li>\n<li>CoreUI doesn't use Reactstrap anymore</li>\n<li>One naming convention across all components (for beta version - 90% coverage)</li>\n<li>TypeScript type definitions</li>\n</ul>\n<p>More:</p>\n<ul>\n<li>InnerRef prop is available for all components</li>\n<li>\n<p>For complex components you can use additional parameters like for example for link sub component:</p>\n<ul>\n<li>some components have additional props inherited from linkProps</li>\n</ul>\n</li>\n</ul>\n<h3>Demo</h3>\n<p><a href=\"https://coreui.io/react/demo/\">CoreUI Pro for React - Demo</a></p>\n<h3>DOM communication</h3>\n<ul>\n<li>No</li>\n</ul>\n<h3>SSR</h3>\n<ul>\n<li>Compatible</li>\n</ul>\n<hr>\n<h4>Helper functions</h4>\n<p>You have access to a list of helper functions.</p>","parent":{"__typename":"File","name":"introduction","sourceInstanceName":"page"}},{"html":"","parent":{"__typename":"File","name":"CElementCover","sourceInstanceName":"partCommon"}},{"html":"<p>Versatile button component.</p>","parent":{"__typename":"File","name":"-Button","sourceInstanceName":"partCommon"}},{"html":"<p>Grid components.</p>","parent":{"__typename":"File","name":"-Grid","sourceInstanceName":"partCommon"}},{"html":"<p>Input components.</p>","parent":{"__typename":"File","name":"-Input","sourceInstanceName":"partCommon"}},{"html":"<p>Set of widgets.</p>","parent":{"__typename":"File","name":"-Widget","sourceInstanceName":"partCommon"}},{"html":"<p>CoreUI grid components.</p>","parent":{"__typename":"File","name":"-Layout","sourceInstanceName":"partCommon"}},{"html":"<p>Notification components.</p>","parent":{"__typename":"File","name":"-Toast","sourceInstanceName":"partCommon"}},{"html":"<p>React alerts give contextual feedback information for common user operations. Component is delivered with a bunch of usable and adjustable alert messages.</p>","parent":{"__typename":"File","name":"CAlert","sourceInstanceName":"partCommon"}},{"html":"<p>React badges are small count and labeling components.</p>","parent":{"__typename":"File","name":"CBadge","sourceInstanceName":"partCommon"}},{"html":"<p>Simple callout component.</p>","parent":{"__typename":"File","name":"CCallout","sourceInstanceName":"partCommon"}},{"html":"<p>React carousel is a slideshow component for cycling through elements.</p>","parent":{"__typename":"File","name":"CCarousel","sourceInstanceName":"partCommon"}},{"html":"<p>React cards component provide a flexible and extensible container for displaying content. React cards are delivered with a bunch of variants and options.</p>","parent":{"__typename":"File","name":"CCard","sourceInstanceName":"partCommon"}},{"html":"<p>Library: @coreui/react-chartjs</p>","parent":{"__typename":"File","name":"CCharts","sourceInstanceName":"partCommon"}},{"html":"<p>Render html based on information from an array of objects.</p>","parent":{"__typename":"File","name":"CCreateElement","sourceInstanceName":"partCommon"}},{"html":"<p>React collapse component toggles the visibility of content across your project with a few classes and some scripts. Useful for a large amount of content.</p>","parent":{"__typename":"File","name":"CCollapse","sourceInstanceName":"partCommon"}},{"html":"<p>React breadcrumb navigation component which indicates the current location within a navigational hierarchy that automatically adds separators.</p>","parent":{"__typename":"File","name":"CBreadcrumb","sourceInstanceName":"partCommon"}},{"html":"<p>Advanced data table.</p>","parent":{"__typename":"File","name":"CDataTable","sourceInstanceName":"partCommon"}},{"html":"<p>React dropdown component allows you to toggle contextual overlays for displaying lists, links, and more html elements.</p>","parent":{"__typename":"File","name":"CDropdown","sourceInstanceName":"partCommon"}},{"html":"<p>Create responsive video or slideshow embeds based on the width of the parent by creating an intrinsic ratio that scales on any device.</p>","parent":{"__typename":"File","name":"CEmbed","sourceInstanceName":"partCommon"}},{"html":"<p>Fade effect component.</p>","parent":{"__typename":"File","name":"CFade","sourceInstanceName":"partCommon"}},{"html":"<p>React forms support the following form controls: input, textarea, button, checkbox, radio, and select. Learn how to build various types of form layouts such as vertical form, horizontal form and inline from quickly and easily with the CoreUI.</p>","parent":{"__typename":"File","name":"CForm","sourceInstanceName":"partCommon"}},{"html":"<p>Library: @coreui/icons-react</p>\n<p>Component used to implement CoreUI svg icons.</p>","parent":{"__typename":"File","name":"CIcon","sourceInstanceName":"partCommon"}},{"html":"<p>Image component.</p>","parent":{"__typename":"File","name":"CImg","sourceInstanceName":"partCommon"}},{"html":"<p>React Jumbotron component indicates a big grey box for showcasing hero unit style content.\nA lightweight, flexible React component that can optionally reach the entire viewport to showcase essential marketing information on your site.</p>","parent":{"__typename":"File","name":"CJumbotron","sourceInstanceName":"partCommon"}},{"html":"<p>React link component (a or NavLink).</p>","parent":{"__typename":"File","name":"CLink","sourceInstanceName":"partCommon"}},{"html":"<p>React List Groups allows displaying are a series of content.</p>","parent":{"__typename":"File","name":"CListGroup","sourceInstanceName":"partCommon"}},{"html":"<p>Documentation and examples for React's media object to construct highly repetitive components like blog comments, tweets, and the like.</p>","parent":{"__typename":"File","name":"CMedia","sourceInstanceName":"partCommon"}},{"html":"<p>Modal window component.</p>","parent":{"__typename":"File","name":"CModal","sourceInstanceName":"partCommon"}},{"html":"<p>React Nav component allows to create simple navigation. Learn how to use React Nav to quickly and easily create elegant and flexible navs.</p>","parent":{"__typename":"File","name":"CNav","sourceInstanceName":"partCommon"}},{"html":"<p>Documentation and examples for React's powerful, responsive navigation header, the navbar. Includes support for branding, navigation, and more, including support for our collapse plugin.</p>","parent":{"__typename":"File","name":"CNavbar","sourceInstanceName":"partCommon"}},{"html":"<p>React pagination component consists of button-like styled links, that are arranged side by side in a horizontal list. Learn how to create nice looking pagination to navigate through pages easily.</p>","parent":{"__typename":"File","name":"CPagination","sourceInstanceName":"partCommon"}},{"html":"<p>React popovers component to adding iPhone and iPad like popovers to any element on your page. </p>","parent":{"__typename":"File","name":"CPopover","sourceInstanceName":"partCommon"}},{"html":"<p>Progress bars component can be used for showing the progress of a task or action to the users. Progress supports for stacked bars, animated backgrounds, and text labels.</p>","parent":{"__typename":"File","name":"CProgress","sourceInstanceName":"partCommon"}},{"html":"<p>Indicate the loading state of a component or page with React spinners.</p>","parent":{"__typename":"File","name":"CSpinner","sourceInstanceName":"partCommon"}},{"html":"<p>React switch component.</p>","parent":{"__typename":"File","name":"CSwitch","sourceInstanceName":"partCommon"}},{"html":"<p>Tabs components.</p>","parent":{"__typename":"File","name":"CTabs","sourceInstanceName":"partCommon"}},{"html":"<p>Wrapper component for toggling button. Use 'inNavbar'/'inHeader' styling or pass your custom styling.</p>","parent":{"__typename":"File","name":"CToggler","sourceInstanceName":"partCommon"}},{"html":"<p>CTooltip is directive, which display tooltip over element, built on top of tooltip.js (popper.js) library. Tooltip is triggered on hover.</p>","parent":{"__typename":"File","name":"CTooltip","sourceInstanceName":"partCommon"}},{"html":"","parent":{"__typename":"File","name":"CBreadcrumbItem","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CButton","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CCallout","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CCol","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CContainer","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CFade","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CFooter","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CForm","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CCharts","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CIconRaw","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CInputCheckbox","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CInputFile","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CInputRadio","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CNavbar","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CPopover","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CPopperContent","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CPopperTargetHelper","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CRow","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CTable","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CTextarea","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CToast","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CToggler","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"CWidgets","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Temporary or constant visibility</li>\n<li>Optionally dismissible by user</li>\n<li>Optional fading effect</li>\n<li>When visible temporary timer can be tracked and displayed (i.e. via Progress component)</li>\n</ul>","parent":{"__typename":"File","name":"CAlert","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Styling determined by color property</li>\n<li>Optional pill shape</li>\n<li>If 'to' or 'href' prop is passed Badge gain behavior of link (is rendered as badge CLink) and gains all props and options of CLink component</li>\n</ul>","parent":{"__typename":"File","name":"CBadge","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Optional customization of styles</li>\n<li>Ready to implement React-router based</li>\n</ul>","parent":{"__typename":"File","name":"CBreadcrumb","sourceInstanceName":"partReact"}},{"html":"<p>This is the wrapper component for CBreadcrumb. It will render breadcrumb items based on current React-router route. Props are the same as in CBreadcrumb, except you cannot pass items.</p>","parent":{"__typename":"File","name":"CBreadcrumbRouter","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component for button groups.</p>","parent":{"__typename":"File","name":"CButtonGroup","sourceInstanceName":"partReact"}},{"html":"<p>Simple button toolbar component.</p>","parent":{"__typename":"File","name":"CButtonToolbar","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Wrapper components covering bootstrap card components</li>\n<li>Style components easily by props</li>\n<li>Custom card-accents styling</li>\n</ul>","parent":{"__typename":"File","name":"CCard","sourceInstanceName":"partReact"}},{"html":"<p>Component for card grouping.</p>","parent":{"__typename":"File","name":"CCardGroup","sourceInstanceName":"partReact"}},{"html":"<p>Component for placing image in card. Component inherits functionality from the CImg component.</p>","parent":{"__typename":"File","name":"CCardImg","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-img-overlay' class.</p>","parent":{"__typename":"File","name":"CCardImgOverlay","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-subtitle' class.</p>","parent":{"__typename":"File","name":"CCardSubtitle","sourceInstanceName":"partReact"}},{"html":"<p>CCardLink is CLink component with additional 'card-link' class.</p>","parent":{"__typename":"File","name":"CCardLink","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-title' class.</p>","parent":{"__typename":"File","name":"CCardTitle","sourceInstanceName":"partReact"}},{"html":"<p>Wrapper component with 'card-text' class.</p>","parent":{"__typename":"File","name":"CCardText","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Slides to next item in intervals</li>\n<li>Item could be an image or other content</li>\n<li>Controlled by arrows and indicators</li>\n</ul>","parent":{"__typename":"File","name":"CCarousel","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Collapse animation</li>\n<li>Optional duration and transition effect</li>\n<li>Adapted to use in navbars</li>\n</ul>","parent":{"__typename":"File","name":"CCollapse","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<p>All features are optional:</p>\n<ul>\n<li>Filter items by one or all columns</li>\n<li>Sort items by column</li>\n<li>Integrated with CPagination component by default</li>\n<li>Customize style of specific rows, columns and cells,</li>\n<li>Customize display of columns (headers, filter, and items separately) by scoped slots</li>\n<li>Load with initial filters and sorter state</li>\n<li>Loading state visualization</li>\n</ul>","parent":{"__typename":"File","name":"CDataTable","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Popper.js based toggleable menu</li>\n<li>Toggling mechanism managed by default</li>\n<li>Fully customizable toggler and menu</li>\n</ul>","parent":{"__typename":"File","name":"CDropdown","sourceInstanceName":"partReact"}},{"html":"<p>Render divider variant of CDropdownItem.</p>","parent":{"__typename":"File","name":"CDropdownDivider","sourceInstanceName":"partReact"}},{"html":"<p>Render header variant of CDropdownItem.</p>","parent":{"__typename":"File","name":"CDropdownHeader","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Simple wrapper for external source videos</li>\n<li>Optional aspect ratios</li>\n</ul>","parent":{"__typename":"File","name":"CEmbed","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Building standard bootstrap grid structure</li>\n</ul>","parent":{"__typename":"File","name":"CGrid","sourceInstanceName":"partReact"}},{"html":"<h2>Full Description</h2>\n<ul>\n<li><a href=\"/react/docs/3.3/components/CHeader\">CHeader</a></li>\n</ul>","parent":{"__typename":"File","name":"CHeader","sourceInstanceName":"partReact"}},{"html":"<h1>Features</h1>\n<ul>\n<li>Can load icons stored globally, directly passed or by source link,</li>\n<li>Can significantly reduce bundle size due to JavaScript named icons import,</li>\n<li>Full functionality of svg html tag,</li>\n<li>Clean API</li>\n</ul>","parent":{"__typename":"File","name":"CIcon","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Easy styling</li>\n<li>Show coloured or transparent blank image (svg) if source of image is not defined. Component can be used as blank svg image permanently or until source of image is passed</li>\n</ul>","parent":{"__typename":"File","name":"CImg","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>All-in-one input components</li>\n<li>Components share similar API</li>\n<li>Use as basic or advanced customized inputs</li>\n</ul>","parent":{"__typename":"File","name":"CInput","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Easily customizable styles</li>\n</ul>","parent":{"__typename":"File","name":"CJumbotron","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Linking to external sources or router-links</li>\n<li>If link is empty, component prevents scrolling up the page after clicking</li>\n</ul>\n<p>To turn link into router-link just pass address in 'to' prop instead of 'href'. Then component will become router link extended by base 'CLink' props.</p>","parent":{"__typename":"File","name":"CLink","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Automically detect if item is actionable</li>\n<li>If 'to' or 'href' prop is passed to CListGroupItem it gains functionality of CLink component - it gains all props and options of CLink component</li>\n</ul>","parent":{"__typename":"File","name":"CListGroup","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Aside element on the left or right side</li>\n<li>Aside element have CImg component functionality by default</li>\n</ul>","parent":{"__typename":"File","name":"CMedia","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Many customization options</li>\n<li>Easily manage modal visibility</li>\n</ul>\n<p>Modal is hidding after click on one of following triggers:</p>\n<ul>\n<li>Close button in the default header</li>\n<li>'OK' and 'Cancel' buttons in the footer</li>\n<li>Backdrop (when closeOnBackdrop prop is true)</li>\n</ul>","parent":{"__typename":"File","name":"CModal","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Easily customizable</li>\n<li>Compatible with CDropdown component</li>\n</ul>","parent":{"__typename":"File","name":"CNav","sourceInstanceName":"partReact"}},{"html":"<p>Render CBrand with navbar class.</p>","parent":{"__typename":"File","name":"CNavbarBrand","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Determine behavior, style and functionality of pagination</li>\n<li>Smart automatic items generation</li>\n</ul>","parent":{"__typename":"File","name":"CPagination","sourceInstanceName":"partReact"}},{"html":"<p>Use as a child component of CProgress when you want to split progress bar into multiple bars. </p>","parent":{"__typename":"File","name":"CProgressBar","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Single or splitted progress bar</li>\n<li>Diffrent widths heights and styles available</li>\n<li>Concise syntax for single bar</li>\n</ul>","parent":{"__typename":"File","name":"CProgress","sourceInstanceName":"partReact"}},{"html":"<p>Render CBrand version for sidebar component.</p>","parent":{"__typename":"File","name":"CSidebarBrand","sourceInstanceName":"partReact"}},{"html":"<h2>Full Description</h2>\n<ul>\n<li><a href=\"/react/docs/3.3/components/CSidebar\">CSidebar</a></li>\n</ul>","parent":{"__typename":"File","name":"CSidebar","sourceInstanceName":"partReact"}},{"html":"<p>Render CButtonClose version for sidebar component.</p>","parent":{"__typename":"File","name":"CSidebarClose","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Spinning and grow effect</li>\n<li>Fully customizable size</li>\n<li>Screen readers friendly</li>\n</ul>","parent":{"__typename":"File","name":"CSpinner","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Many styles and sizes</li>\n<li>Checkbox or radio input mode</li>\n</ul>","parent":{"__typename":"File","name":"CSwitch","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Simple to use</li>\n<li>Customizable styling</li>\n<li>Optional fading effect when switching the active tab</li>\n</ul>\n<p>CTab... and CTabs components are tightly coupled which means you using them together is required, for component to work.</p>","parent":{"__typename":"File","name":"CTabs","sourceInstanceName":"partReact"}},{"html":"<h2># Features</h2>\n<ul>\n<li>Simplified implementation of tooltip</li>\n<li>Bootstrap tooltip styling</li>\n</ul>","parent":{"__typename":"File","name":"CTooltip","sourceInstanceName":"partReact"}},{"html":"<h2>@coreui/react v3 for <a href=\"https://coreui.io/react/\">CoreUI 3 for React</a></h2>\n<p><a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/v/@coreui/react.png?style=flat-square\" alt=\"npm package\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/v/@coreui/react/next.png?style=flat-square\" alt=\"npm next\"></a>\n<a href=\"https://www.npmjs.com/package/@coreui/react\"><img src=\"https://img.shields.io/npm/dm/@coreui/react.svg?style=flat-square\" alt=\"NPM downloads\"></a></p>\n<pre><code class=\"language-bash\">npm install @coreui/react@next\n</code></pre>","parent":{"__typename":"File","name":"README","sourceInstanceName":"js"}},{"html":"","parent":{"__typename":"File","name":"README","sourceInstanceName":"js"}}]}}}